
/*******************************************************************************
 **NOTE** This code was generated by a tool and will occasionally be
 overwritten. We welcome comments and issues regarding this code; they will be
 addressed in the generation tool. If you wish to submit pull requests, please
 do so for the templates in that tool.

 This code was generated by Vipr (https://github.com/microsoft/vipr) using
 the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

 Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
 Licensed under the Apache License 2.0; see LICENSE in the source repository
 root for authoritative license information.ï»¿
 ******************************************************************************/

        package com.microsoft.office365.test.integration.tests;

        import com.microsoft.services.graph.*;
        import com.microsoft.services.graph.fetchers.*;
        import com.microsoft.office365.test.integration.ApplicationContext;
        import com.microsoft.office365.test.integration.framework.*;
        import com.microsoft.office365.test.integration.framework.objectFiller.*;

        import java.util.List;

/**
 * The type GraphServiceClientTests.
 */

/*
public class GraphServiceClientTests extends TestGroup {
    private ObjectFiller mFiller;
    private List<String> mNotSupportedTests;
    private TestCase canGetdirectoryObjects(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    List<DirectoryObject> _directoryObjects = client.getDirectoryObjects().read().get();

                    if (_directoryObjects != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreatedirectoryObjects(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();
                    DirectoryObject _createddirectoryObject = client.getDirectoryObjects().add(sampleDirectoryObject).get();

                    if (_createddirectoryObject != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetapplications(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    List<Application> _applications = client.getApplications().read().get();

                    if (_applications != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateapplications(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Application sampleApplication = getSampleApplication();
                    Application _createdapplication = client.getApplications().add(sampleApplication).get();

                    if (_createdapplication != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetapplicationsextensionProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Application> _listapplications = client.getApplications().read().get();
                    Application _application = _listapplications == null? null : _listapplications.get(0);

                    if(_application == null){
                        throw new Exception("application not available. Can't proceed with the test.");
                    }

                    List<ExtensionProperty> _extensionProperties = client.getApplications().getById(_application.getObjectId()).getExtensionProperties().read().get();

                    if (_extensionProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateapplicationsextensionProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    ExtensionProperty sampleExtensionProperty = getSampleExtensionProperty();

                    List<Application> _listapplications = client.getApplications().read().get();
                    Application _application = _listapplications == null? null : _listapplications.get(0);

                    if(_application == null){
                        throw new Exception("application not available. Can't proceed with the test.");
                    }

                    ExtensionProperty _createdextensionProperty = client.getApplications().getById(_application.getObjectId()).getExtensionProperties().add(sampleExtensionProperty).get();

                    if (_createdextensionProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetapplicationscreatedOnBehalfOf(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Application> _listapplications = client.getApplications().read().get();
                    Application _application = _listapplications == null? null : _listapplications.get(0);

                    if(_application == null){
                        throw new Exception("application not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdOnBehalfOf = client.getApplications().getById(_application.getObjectId()).getCreatedOnBehalfOf().read().get();

                    if (_createdOnBehalfOf != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetapplicationsowners(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Application> _listapplications = client.getApplications().read().get();
                    Application _application = _listapplications == null? null : _listapplications.get(0);

                    if(_application == null){
                        throw new Exception("application not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _owners = client.getApplications().getById(_application.getObjectId()).getOwners().read().get();

                    if (_owners != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateapplicationsowners(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<Application> _listapplications = client.getApplications().read().get();
                    Application _application = _listapplications == null? null : _listapplications.get(0);

                    if(_application == null){
                        throw new Exception("application not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdowner = client.getApplications().getById(_application.getObjectId()).getOwners().add(sampleDirectoryObject).get();

                    if (_createdowner != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetcontacts(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    List<Contact> _contacts = client.getContacts().read().get();

                    if (_contacts != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreatecontacts(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Contact sampleContact = getSampleContact();
                    Contact _createdcontact = client.getContacts().add(sampleContact).get();

                    if (_createdcontact != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetcontactsmanager(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Contact> _listcontacts = client.getContacts().read().get();
                    Contact _contact = _listcontacts == null? null : _listcontacts.get(0);

                    if(_contact == null){
                        throw new Exception("contact not available. Can't proceed with the test.");
                    }

                    DirectoryObject _manager = client.getContacts().getById(_contact.getObjectId()).getManager().read().get();

                    if (_manager != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetcontactsdirectReports(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Contact> _listcontacts = client.getContacts().read().get();
                    Contact _contact = _listcontacts == null? null : _listcontacts.get(0);

                    if(_contact == null){
                        throw new Exception("contact not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _directReports = client.getContacts().getById(_contact.getObjectId()).getDirectReports().read().get();

                    if (_directReports != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreatecontactsdirectReports(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<Contact> _listcontacts = client.getContacts().read().get();
                    Contact _contact = _listcontacts == null? null : _listcontacts.get(0);

                    if(_contact == null){
                        throw new Exception("contact not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createddirectReport = client.getContacts().getById(_contact.getObjectId()).getDirectReports().add(sampleDirectoryObject).get();

                    if (_createddirectReport != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetcontactsmemberOf(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Contact> _listcontacts = client.getContacts().read().get();
                    Contact _contact = _listcontacts == null? null : _listcontacts.get(0);

                    if(_contact == null){
                        throw new Exception("contact not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _memberOf = client.getContacts().getById(_contact.getObjectId()).getMemberOf().read().get();

                    if (_memberOf != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreatecontactsmemberOf(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<Contact> _listcontacts = client.getContacts().read().get();
                    Contact _contact = _listcontacts == null? null : _listcontacts.get(0);

                    if(_contact == null){
                        throw new Exception("contact not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdmemberOf = client.getContacts().getById(_contact.getObjectId()).getMemberOf().add(sampleDirectoryObject).get();

                    if (_createdmemberOf != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetdeviceConfiguration(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    List<DeviceConfiguration> _deviceConfiguration = client.getDeviceConfiguration().read().get();

                    if (_deviceConfiguration != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreatedeviceConfiguration(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DeviceConfiguration sampleDeviceConfiguration = getSampleDeviceConfiguration();
                    DeviceConfiguration _createddeviceConfiguration = client.getDeviceConfiguration().add(sampleDeviceConfiguration).get();

                    if (_createddeviceConfiguration != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetdevices(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    List<Device> _devices = client.getDevices().read().get();

                    if (_devices != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreatedevices(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Device sampleDevice = getSampleDevice();
                    Device _createddevice = client.getDevices().add(sampleDevice).get();

                    if (_createddevice != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetdevicesregisteredOwners(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Device> _listdevices = client.getDevices().read().get();
                    Device _device = _listdevices == null? null : _listdevices.get(0);

                    if(_device == null){
                        throw new Exception("device not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _registeredOwners = client.getDevices().getById(_device.getObjectId()).getRegisteredOwners().read().get();

                    if (_registeredOwners != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreatedevicesregisteredOwners(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<Device> _listdevices = client.getDevices().read().get();
                    Device _device = _listdevices == null? null : _listdevices.get(0);

                    if(_device == null){
                        throw new Exception("device not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdregisteredOwner = client.getDevices().getById(_device.getObjectId()).getRegisteredOwners().add(sampleDirectoryObject).get();

                    if (_createdregisteredOwner != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetdevicesregisteredUsers(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Device> _listdevices = client.getDevices().read().get();
                    Device _device = _listdevices == null? null : _listdevices.get(0);

                    if(_device == null){
                        throw new Exception("device not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _registeredUsers = client.getDevices().getById(_device.getObjectId()).getRegisteredUsers().read().get();

                    if (_registeredUsers != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreatedevicesregisteredUsers(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<Device> _listdevices = client.getDevices().read().get();
                    Device _device = _listdevices == null? null : _listdevices.get(0);

                    if(_device == null){
                        throw new Exception("device not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdregisteredUser = client.getDevices().getById(_device.getObjectId()).getRegisteredUsers().add(sampleDirectoryObject).get();

                    if (_createdregisteredUser != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroups(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    List<Group> _groups = client.getGroups().read().get();

                    if (_groups != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroups(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Group sampleGroup = getSampleGroup();
                    Group _createdgroup = client.getGroups().add(sampleGroup).get();

                    if (_createdgroup != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsappRoleAssignments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }

                    List<AppRoleAssignment> _appRoleAssignments = client.getGroups().getById(_group.getObjectId()).getAppRoleAssignments().read().get();

                    if (_appRoleAssignments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsappRoleAssignments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    AppRoleAssignment sampleAppRoleAssignment = getSampleAppRoleAssignment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }

                    AppRoleAssignment _createdappRoleAssignment = client.getGroups().getById(_group.getObjectId()).getAppRoleAssignments().add(sampleAppRoleAssignment).get();

                    if (_createdappRoleAssignment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsmembers(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _members = client.getGroups().getById(_group.getObjectId()).getMembers().read().get();

                    if (_members != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsmembers(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdmember = client.getGroups().getById(_group.getObjectId()).getMembers().add(sampleDirectoryObject).get();

                    if (_createdmember != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsmemberOf(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _memberOf = client.getGroups().getById(_group.getObjectId()).getMemberOf().read().get();

                    if (_memberOf != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsmemberOf(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdmemberOf = client.getGroups().getById(_group.getObjectId()).getMemberOf().add(sampleDirectoryObject).get();

                    if (_createdmemberOf != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupscreatedOnBehalfOf(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdOnBehalfOf = client.getGroups().getById(_group.getObjectId()).getCreatedOnBehalfOf().read().get();

                    if (_createdOnBehalfOf != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsowners(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _owners = client.getGroups().getById(_group.getObjectId()).getOwners().read().get();

                    if (_owners != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsowners(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdowner = client.getGroups().getById(_group.getObjectId()).getOwners().add(sampleDirectoryObject).get();

                    if (_createdowner != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfiles(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }

                    List<Item> _files = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();

                    if (_files != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfiles(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Item sampleItem = getSampleItem();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }

                    Item _createdfile = client.getGroups().getById(_group.getObjectId()).getFiles().add(sampleItem).get();

                    if (_createdfile != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUser(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    User _createdByUser = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().read().get();

                    if (_createdByUser != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserappRoleAssignments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    List<AppRoleAssignment> _appRoleAssignments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getAppRoleAssignments().read().get();

                    if (_appRoleAssignments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserappRoleAssignments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    AppRoleAssignment sampleAppRoleAssignment = getSampleAppRoleAssignment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    AppRoleAssignment _createdappRoleAssignment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getAppRoleAssignments().add(sampleAppRoleAssignment).get();

                    if (_createdappRoleAssignment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUseroauth2PermissionGrants(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    List<OAuth2PermissionGrant> _oauth2PermissionGrants = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getOauth2PermissionGrants().read().get();

                    if (_oauth2PermissionGrants != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUseroauth2PermissionGrants(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    OAuth2PermissionGrant sampleOAuth2PermissionGrant = getSampleOAuth2PermissionGrant();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    OAuth2PermissionGrant _createdoauth2PermissionGrant = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getOauth2PermissionGrants().add(sampleOAuth2PermissionGrant).get();

                    if (_createdoauth2PermissionGrant != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserownedDevices(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _ownedDevices = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getOwnedDevices().read().get();

                    if (_ownedDevices != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserownedDevices(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdownedDevice = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getOwnedDevices().add(sampleDirectoryObject).get();

                    if (_createdownedDevice != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserregisteredDevices(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _registeredDevices = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getRegisteredDevices().read().get();

                    if (_registeredDevices != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserregisteredDevices(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdregisteredDevice = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getRegisteredDevices().add(sampleDirectoryObject).get();

                    if (_createdregisteredDevice != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUsermanager(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    DirectoryObject _manager = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getManager().read().get();

                    if (_manager != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserdirectReports(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _directReports = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getDirectReports().read().get();

                    if (_directReports != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserdirectReports(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createddirectReport = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getDirectReports().add(sampleDirectoryObject).get();

                    if (_createddirectReport != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUsermemberOf(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _memberOf = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getMemberOf().read().get();

                    if (_memberOf != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUsermemberOf(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdmemberOf = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getMemberOf().add(sampleDirectoryObject).get();

                    if (_createdmemberOf != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUsercreatedObjects(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _createdObjects = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCreatedObjects().read().get();

                    if (_createdObjects != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUsercreatedObjects(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdcreatedObject = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCreatedObjects().add(sampleDirectoryObject).get();

                    if (_createdcreatedObject != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserownedObjects(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _ownedObjects = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getOwnedObjects().read().get();

                    if (_ownedObjects != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserownedObjects(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdownedObject = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getOwnedObjects().add(sampleDirectoryObject).get();

                    if (_createdownedObject != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserMessages(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    List<Message> _messages = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getMessages().read().get();

                    if (_messages != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserMessages(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Message sampleMessage = getSampleMessage();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    Message _createdmessage = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getMessages().add(sampleMessage).get();

                    if (_createdmessage != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserMessagesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Message> _listmessages = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getMessages().read().get();
                    Message _message = _listmessages == null? null : _listmessages.get(0);

                    if(_message == null){
                        throw new Exception("Message not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getMessages().getById(_message.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserMessagesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Message> _listmessages = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getMessages().read().get();
                    Message _message = _listmessages == null? null : _listmessages.get(0);

                    if(_message == null){
                        throw new Exception("Message not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getMessages().getById(_message.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserCalendars(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    List<Calendar> _calendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().read().get();

                    if (_calendars != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserCalendars(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Calendar sampleCalendar = getSampleCalendar();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    Calendar _createdcalendar = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().add(sampleCalendar).get();

                    if (_createdcalendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserCalendarsCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    List<Event> _calendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();

                    if (_calendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserCalendarsCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    Event _createdcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().add(sampleEvent).get();

                    if (_createdcalendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserCalendarsCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserCalendarsCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserCalendarsCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserCalendarsCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserCalendarsCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserCalendarsCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserCalendarsEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    List<Event> _events = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getEvents().read().get();

                    if (_events != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserCalendarsEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    Event _createdevent = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getEvents().add(sampleEvent).get();

                    if (_createdevent != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserCalendarsEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserCalendarsEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserCalendarsEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserCalendarsEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserCalendarsEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserCalendarsEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    Calendar _calendar = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendar().read().get();

                    if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserCalendarCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    List<Event> _calendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendar().getCalendarView().read().get();

                    if (_calendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserCalendarCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    Event _createdcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendar().getCalendarView().add(sampleEvent).get();

                    if (_createdcalendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserCalendarCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendar().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendar().getCalendarView().getById(_calendarView.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserCalendarCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendar().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendar().getCalendarView().getById(_calendarView.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserCalendarCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendar().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserCalendarCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendar().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserCalendarCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendar().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserCalendarCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendar().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserCalendarEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    List<Event> _events = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendar().getEvents().read().get();

                    if (_events != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserCalendarEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    Event _createdevent = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendar().getEvents().add(sampleEvent).get();

                    if (_createdevent != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserCalendarEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendar().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendar().getEvents().getById(_event.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserCalendarEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendar().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendar().getEvents().getById(_event.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserCalendarEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendar().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserCalendarEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendar().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendar().getEvents().getById(_event.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserCalendarEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendar().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserCalendarEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendar().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserCalendarGroups(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    List<CalendarGroup> _calendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().read().get();

                    if (_calendarGroups != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserCalendarGroups(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    CalendarGroup sampleCalendarGroup = getSampleCalendarGroup();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    CalendarGroup _createdcalendarGroup = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().add(sampleCalendarGroup).get();

                    if (_createdcalendarGroup != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserCalendarGroupsCalendars(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }

                    List<Calendar> _calendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();

                    if (_calendars != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserCalendarGroupsCalendars(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Calendar sampleCalendar = getSampleCalendar();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }

                    Calendar _createdcalendar = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().add(sampleCalendar).get();

                    if (_createdcalendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserCalendarGroupsCalendarsCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    List<Event> _calendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();

                    if (_calendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserCalendarGroupsCalendarsCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    Event _createdcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().add(sampleEvent).get();

                    if (_createdcalendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserCalendarGroupsCalendarsCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserCalendarGroupsCalendarsCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserCalendarGroupsCalendarsCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserCalendarGroupsCalendarsCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserCalendarGroupsCalendarsCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserCalendarGroupsCalendarsCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserCalendarGroupsCalendarsEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    List<Event> _events = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();

                    if (_events != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserCalendarGroupsCalendarsEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    Event _createdevent = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().add(sampleEvent).get();

                    if (_createdevent != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserCalendarGroupsCalendarsEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserCalendarGroupsCalendarsEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserCalendarGroupsCalendarsEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserCalendarGroupsCalendarsEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserCalendarGroupsCalendarsEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserCalendarGroupsCalendarsEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    List<Event> _events = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getEvents().read().get();

                    if (_events != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    Event _createdevent = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getEvents().add(sampleEvent).get();

                    if (_createdevent != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getEvents().getById(_event.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getEvents().getById(_event.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserEventsCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Calendar _calendar = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getEvents().getById(_event.getId()).getCalendar().read().get();

                    if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getEvents().getById(_event.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getEvents().getById(_event.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserEventsInstancesCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Calendar _calendar = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getCalendar().read().get();

                    if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    List<Event> _calendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarView().read().get();

                    if (_calendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    Event _createdcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarView().add(sampleEvent).get();

                    if (_createdcalendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarView().getById(_calendarView.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarView().getById(_calendarView.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserCalendarViewCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Calendar _calendar = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarView().getById(_calendarView.getId()).getCalendar().read().get();

                    if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarView().getById(_calendarView.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserCalendarViewInstancesCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Calendar _calendar = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getCalendar().read().get();

                    if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserUserPhoto(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    Photo _userPhoto = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getUserPhoto().read().get();

                    if (_userPhoto != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserUserPhotos(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    List<Photo> _userPhotos = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getUserPhotos().read().get();

                    if (_userPhotos != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfilescreatedByUserUserPhotos(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Photo samplePhoto = getSamplePhoto();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    Photo _createduserPhoto = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getUserPhotos().add(samplePhoto).get();

                    if (_createduserPhoto != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfilescreatedByUserdrive(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    Drive _drive = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getCreatedByUser().getDrive().read().get();

                    if (_drive != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUser(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    User _lastModifiedByUser = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().read().get();

                    if (_lastModifiedByUser != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserappRoleAssignments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    List<AppRoleAssignment> _appRoleAssignments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getAppRoleAssignments().read().get();

                    if (_appRoleAssignments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserappRoleAssignments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    AppRoleAssignment sampleAppRoleAssignment = getSampleAppRoleAssignment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    AppRoleAssignment _createdappRoleAssignment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getAppRoleAssignments().add(sampleAppRoleAssignment).get();

                    if (_createdappRoleAssignment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUseroauth2PermissionGrants(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    List<OAuth2PermissionGrant> _oauth2PermissionGrants = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getOauth2PermissionGrants().read().get();

                    if (_oauth2PermissionGrants != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUseroauth2PermissionGrants(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    OAuth2PermissionGrant sampleOAuth2PermissionGrant = getSampleOAuth2PermissionGrant();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    OAuth2PermissionGrant _createdoauth2PermissionGrant = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getOauth2PermissionGrants().add(sampleOAuth2PermissionGrant).get();

                    if (_createdoauth2PermissionGrant != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserownedDevices(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _ownedDevices = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getOwnedDevices().read().get();

                    if (_ownedDevices != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserownedDevices(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdownedDevice = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getOwnedDevices().add(sampleDirectoryObject).get();

                    if (_createdownedDevice != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserregisteredDevices(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _registeredDevices = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getRegisteredDevices().read().get();

                    if (_registeredDevices != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserregisteredDevices(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdregisteredDevice = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getRegisteredDevices().add(sampleDirectoryObject).get();

                    if (_createdregisteredDevice != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUsermanager(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    DirectoryObject _manager = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getManager().read().get();

                    if (_manager != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserdirectReports(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _directReports = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getDirectReports().read().get();

                    if (_directReports != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserdirectReports(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createddirectReport = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getDirectReports().add(sampleDirectoryObject).get();

                    if (_createddirectReport != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUsermemberOf(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _memberOf = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getMemberOf().read().get();

                    if (_memberOf != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUsermemberOf(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdmemberOf = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getMemberOf().add(sampleDirectoryObject).get();

                    if (_createdmemberOf != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUsercreatedObjects(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _createdObjects = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCreatedObjects().read().get();

                    if (_createdObjects != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUsercreatedObjects(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdcreatedObject = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCreatedObjects().add(sampleDirectoryObject).get();

                    if (_createdcreatedObject != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserownedObjects(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _ownedObjects = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getOwnedObjects().read().get();

                    if (_ownedObjects != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserownedObjects(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdownedObject = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getOwnedObjects().add(sampleDirectoryObject).get();

                    if (_createdownedObject != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserMessages(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    List<Message> _messages = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getMessages().read().get();

                    if (_messages != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserMessages(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Message sampleMessage = getSampleMessage();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    Message _createdmessage = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getMessages().add(sampleMessage).get();

                    if (_createdmessage != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserMessagesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Message> _listmessages = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getMessages().read().get();
                    Message _message = _listmessages == null? null : _listmessages.get(0);

                    if(_message == null){
                        throw new Exception("Message not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getMessages().getById(_message.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserMessagesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Message> _listmessages = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getMessages().read().get();
                    Message _message = _listmessages == null? null : _listmessages.get(0);

                    if(_message == null){
                        throw new Exception("Message not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getMessages().getById(_message.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserCalendars(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    List<Calendar> _calendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().read().get();

                    if (_calendars != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserCalendars(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Calendar sampleCalendar = getSampleCalendar();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    Calendar _createdcalendar = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().add(sampleCalendar).get();

                    if (_createdcalendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserCalendarsCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    List<Event> _calendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();

                    if (_calendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserCalendarsCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    Event _createdcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().add(sampleEvent).get();

                    if (_createdcalendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserCalendarsCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserCalendarsCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserCalendarsCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserCalendarsCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserCalendarsCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserCalendarsCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserCalendarsEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    List<Event> _events = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getEvents().read().get();

                    if (_events != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserCalendarsEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    Event _createdevent = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getEvents().add(sampleEvent).get();

                    if (_createdevent != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserCalendarsEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserCalendarsEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserCalendarsEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserCalendarsEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserCalendarsEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserCalendarsEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    Calendar _calendar = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendar().read().get();

                    if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserCalendarCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    List<Event> _calendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendar().getCalendarView().read().get();

                    if (_calendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserCalendarCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    Event _createdcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendar().getCalendarView().add(sampleEvent).get();

                    if (_createdcalendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserCalendarCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendar().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendar().getCalendarView().getById(_calendarView.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserCalendarCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendar().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendar().getCalendarView().getById(_calendarView.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserCalendarCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendar().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserCalendarCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendar().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserCalendarCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendar().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserCalendarCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendar().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserCalendarEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    List<Event> _events = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendar().getEvents().read().get();

                    if (_events != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserCalendarEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    Event _createdevent = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendar().getEvents().add(sampleEvent).get();

                    if (_createdevent != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserCalendarEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendar().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendar().getEvents().getById(_event.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserCalendarEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendar().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendar().getEvents().getById(_event.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserCalendarEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendar().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserCalendarEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendar().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendar().getEvents().getById(_event.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserCalendarEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendar().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserCalendarEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendar().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserCalendarGroups(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    List<CalendarGroup> _calendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().read().get();

                    if (_calendarGroups != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserCalendarGroups(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    CalendarGroup sampleCalendarGroup = getSampleCalendarGroup();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    CalendarGroup _createdcalendarGroup = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().add(sampleCalendarGroup).get();

                    if (_createdcalendarGroup != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserCalendarGroupsCalendars(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }

                    List<Calendar> _calendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();

                    if (_calendars != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserCalendarGroupsCalendars(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Calendar sampleCalendar = getSampleCalendar();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }

                    Calendar _createdcalendar = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().add(sampleCalendar).get();

                    if (_createdcalendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserCalendarGroupsCalendarsCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    List<Event> _calendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();

                    if (_calendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserCalendarGroupsCalendarsCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    Event _createdcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().add(sampleEvent).get();

                    if (_createdcalendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserCalendarGroupsCalendarsCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserCalendarGroupsCalendarsCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserCalendarGroupsCalendarsCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserCalendarGroupsCalendarsCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserCalendarGroupsCalendarsCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserCalendarGroupsCalendarsCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserCalendarGroupsCalendarsEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    List<Event> _events = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();

                    if (_events != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserCalendarGroupsCalendarsEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    Event _createdevent = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().add(sampleEvent).get();

                    if (_createdevent != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserCalendarGroupsCalendarsEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserCalendarGroupsCalendarsEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserCalendarGroupsCalendarsEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserCalendarGroupsCalendarsEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserCalendarGroupsCalendarsEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserCalendarGroupsCalendarsEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    List<Event> _events = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getEvents().read().get();

                    if (_events != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    Event _createdevent = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getEvents().add(sampleEvent).get();

                    if (_createdevent != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getEvents().getById(_event.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getEvents().getById(_event.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserEventsCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Calendar _calendar = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getEvents().getById(_event.getId()).getCalendar().read().get();

                    if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getEvents().getById(_event.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getEvents().getById(_event.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserEventsInstancesCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Calendar _calendar = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getCalendar().read().get();

                    if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    List<Event> _calendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarView().read().get();

                    if (_calendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    Event _createdcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarView().add(sampleEvent).get();

                    if (_createdcalendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarView().getById(_calendarView.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarView().getById(_calendarView.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserCalendarViewCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Calendar _calendar = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarView().getById(_calendarView.getId()).getCalendar().read().get();

                    if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarView().getById(_calendarView.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserCalendarViewInstancesCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Calendar _calendar = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getCalendar().read().get();

                    if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserUserPhoto(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    Photo _userPhoto = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getUserPhoto().read().get();

                    if (_userPhoto != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserUserPhotos(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    List<Photo> _userPhotos = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getUserPhotos().read().get();

                    if (_userPhotos != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileslastModifiedByUserUserPhotos(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Photo samplePhoto = getSamplePhoto();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    Photo _createduserPhoto = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getUserPhotos().add(samplePhoto).get();

                    if (_createduserPhoto != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileslastModifiedByUserdrive(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    Drive _drive = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getLastModifiedByUser().getDrive().read().get();

                    if (_drive != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildren(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    List<Item> _children = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();

                    if (_children != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildren(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Item sampleItem = getSampleItem();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    Item _createdchild = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().add(sampleItem).get();

                    if (_createdchild != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUser(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    User _createdByUser = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().read().get();

                    if (_createdByUser != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserappRoleAssignments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    List<AppRoleAssignment> _appRoleAssignments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getAppRoleAssignments().read().get();

                    if (_appRoleAssignments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserappRoleAssignments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    AppRoleAssignment sampleAppRoleAssignment = getSampleAppRoleAssignment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    AppRoleAssignment _createdappRoleAssignment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getAppRoleAssignments().add(sampleAppRoleAssignment).get();

                    if (_createdappRoleAssignment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUseroauth2PermissionGrants(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    List<OAuth2PermissionGrant> _oauth2PermissionGrants = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getOauth2PermissionGrants().read().get();

                    if (_oauth2PermissionGrants != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUseroauth2PermissionGrants(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    OAuth2PermissionGrant sampleOAuth2PermissionGrant = getSampleOAuth2PermissionGrant();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    OAuth2PermissionGrant _createdoauth2PermissionGrant = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getOauth2PermissionGrants().add(sampleOAuth2PermissionGrant).get();

                    if (_createdoauth2PermissionGrant != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserownedDevices(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _ownedDevices = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getOwnedDevices().read().get();

                    if (_ownedDevices != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserownedDevices(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdownedDevice = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getOwnedDevices().add(sampleDirectoryObject).get();

                    if (_createdownedDevice != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserregisteredDevices(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _registeredDevices = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getRegisteredDevices().read().get();

                    if (_registeredDevices != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserregisteredDevices(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdregisteredDevice = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getRegisteredDevices().add(sampleDirectoryObject).get();

                    if (_createdregisteredDevice != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUsermanager(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    DirectoryObject _manager = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getManager().read().get();

                    if (_manager != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserdirectReports(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _directReports = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getDirectReports().read().get();

                    if (_directReports != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserdirectReports(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createddirectReport = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getDirectReports().add(sampleDirectoryObject).get();

                    if (_createddirectReport != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUsermemberOf(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _memberOf = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getMemberOf().read().get();

                    if (_memberOf != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUsermemberOf(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdmemberOf = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getMemberOf().add(sampleDirectoryObject).get();

                    if (_createdmemberOf != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUsercreatedObjects(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _createdObjects = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCreatedObjects().read().get();

                    if (_createdObjects != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUsercreatedObjects(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdcreatedObject = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCreatedObjects().add(sampleDirectoryObject).get();

                    if (_createdcreatedObject != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserownedObjects(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _ownedObjects = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getOwnedObjects().read().get();

                    if (_ownedObjects != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserownedObjects(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdownedObject = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getOwnedObjects().add(sampleDirectoryObject).get();

                    if (_createdownedObject != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserMessages(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    List<Message> _messages = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getMessages().read().get();

                    if (_messages != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserMessages(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Message sampleMessage = getSampleMessage();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    Message _createdmessage = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getMessages().add(sampleMessage).get();

                    if (_createdmessage != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserMessagesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Message> _listmessages = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getMessages().read().get();
                    Message _message = _listmessages == null? null : _listmessages.get(0);

                    if(_message == null){
                        throw new Exception("Message not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getMessages().getById(_message.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserMessagesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Message> _listmessages = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getMessages().read().get();
                    Message _message = _listmessages == null? null : _listmessages.get(0);

                    if(_message == null){
                        throw new Exception("Message not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getMessages().getById(_message.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserCalendars(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    List<Calendar> _calendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().read().get();

                    if (_calendars != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserCalendars(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Calendar sampleCalendar = getSampleCalendar();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    Calendar _createdcalendar = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().add(sampleCalendar).get();

                    if (_createdcalendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserCalendarsCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    List<Event> _calendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();

                    if (_calendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserCalendarsCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    Event _createdcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().add(sampleEvent).get();

                    if (_createdcalendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserCalendarsCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserCalendarsCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserCalendarsCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserCalendarsCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserCalendarsCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserCalendarsCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserCalendarsEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    List<Event> _events = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getEvents().read().get();

                    if (_events != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserCalendarsEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    Event _createdevent = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getEvents().add(sampleEvent).get();

                    if (_createdevent != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserCalendarsEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserCalendarsEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserCalendarsEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserCalendarsEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserCalendarsEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserCalendarsEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    Calendar _calendar = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendar().read().get();

                    if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserCalendarCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    List<Event> _calendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendar().getCalendarView().read().get();

                    if (_calendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserCalendarCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    Event _createdcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendar().getCalendarView().add(sampleEvent).get();

                    if (_createdcalendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserCalendarCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendar().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendar().getCalendarView().getById(_calendarView.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserCalendarCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendar().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendar().getCalendarView().getById(_calendarView.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserCalendarCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendar().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserCalendarCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendar().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserCalendarCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendar().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserCalendarCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendar().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserCalendarEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    List<Event> _events = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendar().getEvents().read().get();

                    if (_events != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserCalendarEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    Event _createdevent = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendar().getEvents().add(sampleEvent).get();

                    if (_createdevent != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserCalendarEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendar().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendar().getEvents().getById(_event.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserCalendarEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendar().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendar().getEvents().getById(_event.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserCalendarEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendar().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserCalendarEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendar().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendar().getEvents().getById(_event.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserCalendarEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendar().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserCalendarEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendar().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserCalendarGroups(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    List<CalendarGroup> _calendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().read().get();

                    if (_calendarGroups != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserCalendarGroups(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    CalendarGroup sampleCalendarGroup = getSampleCalendarGroup();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    CalendarGroup _createdcalendarGroup = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().add(sampleCalendarGroup).get();

                    if (_createdcalendarGroup != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserCalendarGroupsCalendars(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }

                    List<Calendar> _calendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();

                    if (_calendars != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserCalendarGroupsCalendars(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Calendar sampleCalendar = getSampleCalendar();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }

                    Calendar _createdcalendar = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().add(sampleCalendar).get();

                    if (_createdcalendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserCalendarGroupsCalendarsCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    List<Event> _calendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();

                    if (_calendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserCalendarGroupsCalendarsCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    Event _createdcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().add(sampleEvent).get();

                    if (_createdcalendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserCalendarGroupsCalendarsCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserCalendarGroupsCalendarsCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserCalendarGroupsCalendarsCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserCalendarGroupsCalendarsCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserCalendarGroupsCalendarsCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserCalendarGroupsCalendarsCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserCalendarGroupsCalendarsEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    List<Event> _events = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();

                    if (_events != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserCalendarGroupsCalendarsEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    Event _createdevent = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().add(sampleEvent).get();

                    if (_createdevent != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserCalendarGroupsCalendarsEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserCalendarGroupsCalendarsEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserCalendarGroupsCalendarsEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserCalendarGroupsCalendarsEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserCalendarGroupsCalendarsEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserCalendarGroupsCalendarsEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    List<Event> _events = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getEvents().read().get();

                    if (_events != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    Event _createdevent = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getEvents().add(sampleEvent).get();

                    if (_createdevent != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getEvents().getById(_event.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getEvents().getById(_event.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserEventsCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Calendar _calendar = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getEvents().getById(_event.getId()).getCalendar().read().get();

                    if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getEvents().getById(_event.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getEvents().getById(_event.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserEventsInstancesCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Calendar _calendar = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getCalendar().read().get();

                    if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    List<Event> _calendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarView().read().get();

                    if (_calendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    Event _createdcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarView().add(sampleEvent).get();

                    if (_createdcalendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarView().getById(_calendarView.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarView().getById(_calendarView.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserCalendarViewCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Calendar _calendar = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarView().getById(_calendarView.getId()).getCalendar().read().get();

                    if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarView().getById(_calendarView.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserCalendarViewInstancesCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Calendar _calendar = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getCalendar().read().get();

                    if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserUserPhoto(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    Photo _userPhoto = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getUserPhoto().read().get();

                    if (_userPhoto != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserUserPhotos(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    List<Photo> _userPhotos = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getUserPhotos().read().get();

                    if (_userPhotos != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrencreatedByUserUserPhotos(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Photo samplePhoto = getSamplePhoto();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    Photo _createduserPhoto = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getUserPhotos().add(samplePhoto).get();

                    if (_createduserPhoto != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrencreatedByUserdrive(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    Drive _drive = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getCreatedByUser().getDrive().read().get();

                    if (_drive != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUser(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    User _lastModifiedByUser = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().read().get();

                    if (_lastModifiedByUser != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserappRoleAssignments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    List<AppRoleAssignment> _appRoleAssignments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getAppRoleAssignments().read().get();

                    if (_appRoleAssignments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserappRoleAssignments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    AppRoleAssignment sampleAppRoleAssignment = getSampleAppRoleAssignment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    AppRoleAssignment _createdappRoleAssignment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getAppRoleAssignments().add(sampleAppRoleAssignment).get();

                    if (_createdappRoleAssignment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUseroauth2PermissionGrants(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    List<OAuth2PermissionGrant> _oauth2PermissionGrants = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getOauth2PermissionGrants().read().get();

                    if (_oauth2PermissionGrants != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUseroauth2PermissionGrants(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    OAuth2PermissionGrant sampleOAuth2PermissionGrant = getSampleOAuth2PermissionGrant();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    OAuth2PermissionGrant _createdoauth2PermissionGrant = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getOauth2PermissionGrants().add(sampleOAuth2PermissionGrant).get();

                    if (_createdoauth2PermissionGrant != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserownedDevices(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _ownedDevices = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getOwnedDevices().read().get();

                    if (_ownedDevices != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserownedDevices(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdownedDevice = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getOwnedDevices().add(sampleDirectoryObject).get();

                    if (_createdownedDevice != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserregisteredDevices(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _registeredDevices = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getRegisteredDevices().read().get();

                    if (_registeredDevices != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserregisteredDevices(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdregisteredDevice = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getRegisteredDevices().add(sampleDirectoryObject).get();

                    if (_createdregisteredDevice != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUsermanager(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    DirectoryObject _manager = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getManager().read().get();

                    if (_manager != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserdirectReports(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _directReports = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getDirectReports().read().get();

                    if (_directReports != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserdirectReports(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createddirectReport = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getDirectReports().add(sampleDirectoryObject).get();

                    if (_createddirectReport != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUsermemberOf(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _memberOf = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getMemberOf().read().get();

                    if (_memberOf != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUsermemberOf(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdmemberOf = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getMemberOf().add(sampleDirectoryObject).get();

                    if (_createdmemberOf != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUsercreatedObjects(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _createdObjects = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCreatedObjects().read().get();

                    if (_createdObjects != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUsercreatedObjects(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdcreatedObject = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCreatedObjects().add(sampleDirectoryObject).get();

                    if (_createdcreatedObject != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserownedObjects(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _ownedObjects = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getOwnedObjects().read().get();

                    if (_ownedObjects != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserownedObjects(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdownedObject = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getOwnedObjects().add(sampleDirectoryObject).get();

                    if (_createdownedObject != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserMessages(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    List<Message> _messages = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getMessages().read().get();

                    if (_messages != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserMessages(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Message sampleMessage = getSampleMessage();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    Message _createdmessage = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getMessages().add(sampleMessage).get();

                    if (_createdmessage != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserMessagesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Message> _listmessages = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getMessages().read().get();
                    Message _message = _listmessages == null? null : _listmessages.get(0);

                    if(_message == null){
                        throw new Exception("Message not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getMessages().getById(_message.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserMessagesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Message> _listmessages = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getMessages().read().get();
                    Message _message = _listmessages == null? null : _listmessages.get(0);

                    if(_message == null){
                        throw new Exception("Message not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getMessages().getById(_message.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserCalendars(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    List<Calendar> _calendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().read().get();

                    if (_calendars != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserCalendars(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Calendar sampleCalendar = getSampleCalendar();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    Calendar _createdcalendar = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().add(sampleCalendar).get();

                    if (_createdcalendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserCalendarsCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    List<Event> _calendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();

                    if (_calendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserCalendarsCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    Event _createdcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().add(sampleEvent).get();

                    if (_createdcalendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserCalendarsCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserCalendarsCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserCalendarsCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserCalendarsCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserCalendarsCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserCalendarsCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserCalendarsEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    List<Event> _events = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getEvents().read().get();

                    if (_events != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserCalendarsEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    Event _createdevent = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getEvents().add(sampleEvent).get();

                    if (_createdevent != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserCalendarsEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserCalendarsEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserCalendarsEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserCalendarsEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserCalendarsEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserCalendarsEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    Calendar _calendar = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendar().read().get();

                    if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserCalendarCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    List<Event> _calendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendar().getCalendarView().read().get();

                    if (_calendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserCalendarCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    Event _createdcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendar().getCalendarView().add(sampleEvent).get();

                    if (_createdcalendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserCalendarCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendar().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendar().getCalendarView().getById(_calendarView.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserCalendarCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendar().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendar().getCalendarView().getById(_calendarView.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserCalendarCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendar().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserCalendarCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendar().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserCalendarCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendar().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserCalendarCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendar().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserCalendarEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    List<Event> _events = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendar().getEvents().read().get();

                    if (_events != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserCalendarEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    Event _createdevent = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendar().getEvents().add(sampleEvent).get();

                    if (_createdevent != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserCalendarEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendar().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendar().getEvents().getById(_event.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserCalendarEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendar().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendar().getEvents().getById(_event.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserCalendarEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendar().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserCalendarEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendar().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendar().getEvents().getById(_event.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserCalendarEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendar().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserCalendarEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendar().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserCalendarGroups(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    List<CalendarGroup> _calendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().read().get();

                    if (_calendarGroups != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserCalendarGroups(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    CalendarGroup sampleCalendarGroup = getSampleCalendarGroup();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    CalendarGroup _createdcalendarGroup = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().add(sampleCalendarGroup).get();

                    if (_createdcalendarGroup != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserCalendarGroupsCalendars(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }

                    List<Calendar> _calendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();

                    if (_calendars != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserCalendarGroupsCalendars(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Calendar sampleCalendar = getSampleCalendar();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }

                    Calendar _createdcalendar = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().add(sampleCalendar).get();

                    if (_createdcalendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    List<Event> _calendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();

                    if (_calendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    Event _createdcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().add(sampleEvent).get();

                    if (_createdcalendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    List<Event> _events = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();

                    if (_events != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    Event _createdevent = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().add(sampleEvent).get();

                    if (_createdevent != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    List<Event> _events = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getEvents().read().get();

                    if (_events != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    Event _createdevent = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getEvents().add(sampleEvent).get();

                    if (_createdevent != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getEvents().getById(_event.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getEvents().getById(_event.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserEventsCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Calendar _calendar = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getEvents().getById(_event.getId()).getCalendar().read().get();

                    if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getEvents().getById(_event.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getEvents().getById(_event.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserEventsInstancesCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Calendar _calendar = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getCalendar().read().get();

                    if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    List<Event> _calendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarView().read().get();

                    if (_calendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    Event _createdcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarView().add(sampleEvent).get();

                    if (_createdcalendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarView().getById(_calendarView.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarView().getById(_calendarView.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserCalendarViewCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Calendar _calendar = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarView().getById(_calendarView.getId()).getCalendar().read().get();

                    if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarView().getById(_calendarView.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserCalendarViewInstancesCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Calendar _calendar = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getCalendar().read().get();

                    if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserUserPhoto(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    Photo _userPhoto = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getUserPhoto().read().get();

                    if (_userPhoto != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserUserPhotos(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    List<Photo> _userPhotos = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getUserPhotos().read().get();

                    if (_userPhotos != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreategroupsfileschildrenlastModifiedByUserUserPhotos(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Photo samplePhoto = getSamplePhoto();

                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    Photo _createduserPhoto = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getUserPhotos().add(samplePhoto).get();

                    if (_createduserPhoto != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetgroupsfileschildrenlastModifiedByUserdrive(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<Group> _listgroups = client.getGroups().read().get();
                    Group _group = _listgroups == null? null : _listgroups.get(0);

                    if(_group == null){
                        throw new Exception("group not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getGroups().getById(_group.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }


                    List<Item> _listchildren = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();
                    Item _child = _listchildren == null? null : _listchildren.get(0);

                    if(_child == null){
                        throw new Exception("child not available. Can't proceed with the test.");
                    }

                    Drive _drive = client.getGroups().getById(_group.getObjectId()).getFiles().getById(_file.getId()).getChildren().getById(_child.getId()).getLastModifiedByUser().getDrive().read().get();

                    if (_drive != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetdirectoryRoles(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    List<DirectoryRole> _directoryRoles = client.getDirectoryRoles().read().get();

                    if (_directoryRoles != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreatedirectoryRoles(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryRole sampleDirectoryRole = getSampleDirectoryRole();
                    DirectoryRole _createddirectoryRole = client.getDirectoryRoles().add(sampleDirectoryRole).get();

                    if (_createddirectoryRole != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetdirectoryRolesmembers(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<DirectoryRole> _listdirectoryRoles = client.getDirectoryRoles().read().get();
                    DirectoryRole _directoryRole = _listdirectoryRoles == null? null : _listdirectoryRoles.get(0);

                    if(_directoryRole == null){
                        throw new Exception("directoryRole not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _members = client.getDirectoryRoles().getById(_directoryRole.getObjectId()).getMembers().read().get();

                    if (_members != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreatedirectoryRolesmembers(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<DirectoryRole> _listdirectoryRoles = client.getDirectoryRoles().read().get();
                    DirectoryRole _directoryRole = _listdirectoryRoles == null? null : _listdirectoryRoles.get(0);

                    if(_directoryRole == null){
                        throw new Exception("directoryRole not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdmember = client.getDirectoryRoles().getById(_directoryRole.getObjectId()).getMembers().add(sampleDirectoryObject).get();

                    if (_createdmember != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetdirectoryRolesmemberOf(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<DirectoryRole> _listdirectoryRoles = client.getDirectoryRoles().read().get();
                    DirectoryRole _directoryRole = _listdirectoryRoles == null? null : _listdirectoryRoles.get(0);

                    if(_directoryRole == null){
                        throw new Exception("directoryRole not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _memberOf = client.getDirectoryRoles().getById(_directoryRole.getObjectId()).getMemberOf().read().get();

                    if (_memberOf != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreatedirectoryRolesmemberOf(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<DirectoryRole> _listdirectoryRoles = client.getDirectoryRoles().read().get();
                    DirectoryRole _directoryRole = _listdirectoryRoles == null? null : _listdirectoryRoles.get(0);

                    if(_directoryRole == null){
                        throw new Exception("directoryRole not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdmemberOf = client.getDirectoryRoles().getById(_directoryRole.getObjectId()).getMemberOf().add(sampleDirectoryObject).get();

                    if (_createdmemberOf != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetdirectoryRolesowners(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<DirectoryRole> _listdirectoryRoles = client.getDirectoryRoles().read().get();
                    DirectoryRole _directoryRole = _listdirectoryRoles == null? null : _listdirectoryRoles.get(0);

                    if(_directoryRole == null){
                        throw new Exception("directoryRole not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _owners = client.getDirectoryRoles().getById(_directoryRole.getObjectId()).getOwners().read().get();

                    if (_owners != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreatedirectoryRolesowners(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<DirectoryRole> _listdirectoryRoles = client.getDirectoryRoles().read().get();
                    DirectoryRole _directoryRole = _listdirectoryRoles == null? null : _listdirectoryRoles.get(0);

                    if(_directoryRole == null){
                        throw new Exception("directoryRole not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdowner = client.getDirectoryRoles().getById(_directoryRole.getObjectId()).getOwners().add(sampleDirectoryObject).get();

                    if (_createdowner != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetdirectoryRolesownedObjects(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<DirectoryRole> _listdirectoryRoles = client.getDirectoryRoles().read().get();
                    DirectoryRole _directoryRole = _listdirectoryRoles == null? null : _listdirectoryRoles.get(0);

                    if(_directoryRole == null){
                        throw new Exception("directoryRole not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _ownedObjects = client.getDirectoryRoles().getById(_directoryRole.getObjectId()).getOwnedObjects().read().get();

                    if (_ownedObjects != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreatedirectoryRolesownedObjects(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<DirectoryRole> _listdirectoryRoles = client.getDirectoryRoles().read().get();
                    DirectoryRole _directoryRole = _listdirectoryRoles == null? null : _listdirectoryRoles.get(0);

                    if(_directoryRole == null){
                        throw new Exception("directoryRole not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdownedObject = client.getDirectoryRoles().getById(_directoryRole.getObjectId()).getOwnedObjects().add(sampleDirectoryObject).get();

                    if (_createdownedObject != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetdirectoryRoleTemplates(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    List<DirectoryRoleTemplate> _directoryRoleTemplates = client.getDirectoryRoleTemplates().read().get();

                    if (_directoryRoleTemplates != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreatedirectoryRoleTemplates(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryRoleTemplate sampleDirectoryRoleTemplate = getSampleDirectoryRoleTemplate();
                    DirectoryRoleTemplate _createddirectoryRoleTemplate = client.getDirectoryRoleTemplates().add(sampleDirectoryRoleTemplate).get();

                    if (_createddirectoryRoleTemplate != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetservicePrincipals(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    List<ServicePrincipal> _servicePrincipals = client.getServicePrincipals().read().get();

                    if (_servicePrincipals != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateservicePrincipals(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    ServicePrincipal sampleServicePrincipal = getSampleServicePrincipal();
                    ServicePrincipal _createdservicePrincipal = client.getServicePrincipals().add(sampleServicePrincipal).get();

                    if (_createdservicePrincipal != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetservicePrincipalsappRoleAssignedTo(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<ServicePrincipal> _listservicePrincipals = client.getServicePrincipals().read().get();
                    ServicePrincipal _servicePrincipal = _listservicePrincipals == null? null : _listservicePrincipals.get(0);

                    if(_servicePrincipal == null){
                        throw new Exception("servicePrincipal not available. Can't proceed with the test.");
                    }

                    AppRoleAssignment _appRoleAssignedTo = client.getServicePrincipals().getById(_servicePrincipal.getObjectId()).getAppRoleAssignedTo().read().get();

                    if (_appRoleAssignedTo != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetservicePrincipalsappRoleAssignments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<ServicePrincipal> _listservicePrincipals = client.getServicePrincipals().read().get();
                    ServicePrincipal _servicePrincipal = _listservicePrincipals == null? null : _listservicePrincipals.get(0);

                    if(_servicePrincipal == null){
                        throw new Exception("servicePrincipal not available. Can't proceed with the test.");
                    }

                    List<AppRoleAssignment> _appRoleAssignments = client.getServicePrincipals().getById(_servicePrincipal.getObjectId()).getAppRoleAssignments().read().get();

                    if (_appRoleAssignments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateservicePrincipalsappRoleAssignments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    AppRoleAssignment sampleAppRoleAssignment = getSampleAppRoleAssignment();

                    List<ServicePrincipal> _listservicePrincipals = client.getServicePrincipals().read().get();
                    ServicePrincipal _servicePrincipal = _listservicePrincipals == null? null : _listservicePrincipals.get(0);

                    if(_servicePrincipal == null){
                        throw new Exception("servicePrincipal not available. Can't proceed with the test.");
                    }

                    AppRoleAssignment _createdappRoleAssignment = client.getServicePrincipals().getById(_servicePrincipal.getObjectId()).getAppRoleAssignments().add(sampleAppRoleAssignment).get();

                    if (_createdappRoleAssignment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetservicePrincipalsoauth2PermissionGrants(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<ServicePrincipal> _listservicePrincipals = client.getServicePrincipals().read().get();
                    ServicePrincipal _servicePrincipal = _listservicePrincipals == null? null : _listservicePrincipals.get(0);

                    if(_servicePrincipal == null){
                        throw new Exception("servicePrincipal not available. Can't proceed with the test.");
                    }

                    List<OAuth2PermissionGrant> _oauth2PermissionGrants = client.getServicePrincipals().getById(_servicePrincipal.getObjectId()).getOauth2PermissionGrants().read().get();

                    if (_oauth2PermissionGrants != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateservicePrincipalsoauth2PermissionGrants(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    OAuth2PermissionGrant sampleOAuth2PermissionGrant = getSampleOAuth2PermissionGrant();

                    List<ServicePrincipal> _listservicePrincipals = client.getServicePrincipals().read().get();
                    ServicePrincipal _servicePrincipal = _listservicePrincipals == null? null : _listservicePrincipals.get(0);

                    if(_servicePrincipal == null){
                        throw new Exception("servicePrincipal not available. Can't proceed with the test.");
                    }

                    OAuth2PermissionGrant _createdoauth2PermissionGrant = client.getServicePrincipals().getById(_servicePrincipal.getObjectId()).getOauth2PermissionGrants().add(sampleOAuth2PermissionGrant).get();

                    if (_createdoauth2PermissionGrant != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetservicePrincipalsmemberOf(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<ServicePrincipal> _listservicePrincipals = client.getServicePrincipals().read().get();
                    ServicePrincipal _servicePrincipal = _listservicePrincipals == null? null : _listservicePrincipals.get(0);

                    if(_servicePrincipal == null){
                        throw new Exception("servicePrincipal not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _memberOf = client.getServicePrincipals().getById(_servicePrincipal.getObjectId()).getMemberOf().read().get();

                    if (_memberOf != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateservicePrincipalsmemberOf(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<ServicePrincipal> _listservicePrincipals = client.getServicePrincipals().read().get();
                    ServicePrincipal _servicePrincipal = _listservicePrincipals == null? null : _listservicePrincipals.get(0);

                    if(_servicePrincipal == null){
                        throw new Exception("servicePrincipal not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdmemberOf = client.getServicePrincipals().getById(_servicePrincipal.getObjectId()).getMemberOf().add(sampleDirectoryObject).get();

                    if (_createdmemberOf != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetservicePrincipalscreatedOnBehalfOf(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<ServicePrincipal> _listservicePrincipals = client.getServicePrincipals().read().get();
                    ServicePrincipal _servicePrincipal = _listservicePrincipals == null? null : _listservicePrincipals.get(0);

                    if(_servicePrincipal == null){
                        throw new Exception("servicePrincipal not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdOnBehalfOf = client.getServicePrincipals().getById(_servicePrincipal.getObjectId()).getCreatedOnBehalfOf().read().get();

                    if (_createdOnBehalfOf != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetservicePrincipalscreatedObjects(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<ServicePrincipal> _listservicePrincipals = client.getServicePrincipals().read().get();
                    ServicePrincipal _servicePrincipal = _listservicePrincipals == null? null : _listservicePrincipals.get(0);

                    if(_servicePrincipal == null){
                        throw new Exception("servicePrincipal not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _createdObjects = client.getServicePrincipals().getById(_servicePrincipal.getObjectId()).getCreatedObjects().read().get();

                    if (_createdObjects != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateservicePrincipalscreatedObjects(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<ServicePrincipal> _listservicePrincipals = client.getServicePrincipals().read().get();
                    ServicePrincipal _servicePrincipal = _listservicePrincipals == null? null : _listservicePrincipals.get(0);

                    if(_servicePrincipal == null){
                        throw new Exception("servicePrincipal not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdcreatedObject = client.getServicePrincipals().getById(_servicePrincipal.getObjectId()).getCreatedObjects().add(sampleDirectoryObject).get();

                    if (_createdcreatedObject != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetservicePrincipalsowners(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<ServicePrincipal> _listservicePrincipals = client.getServicePrincipals().read().get();
                    ServicePrincipal _servicePrincipal = _listservicePrincipals == null? null : _listservicePrincipals.get(0);

                    if(_servicePrincipal == null){
                        throw new Exception("servicePrincipal not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _owners = client.getServicePrincipals().getById(_servicePrincipal.getObjectId()).getOwners().read().get();

                    if (_owners != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateservicePrincipalsowners(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<ServicePrincipal> _listservicePrincipals = client.getServicePrincipals().read().get();
                    ServicePrincipal _servicePrincipal = _listservicePrincipals == null? null : _listservicePrincipals.get(0);

                    if(_servicePrincipal == null){
                        throw new Exception("servicePrincipal not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdowner = client.getServicePrincipals().getById(_servicePrincipal.getObjectId()).getOwners().add(sampleDirectoryObject).get();

                    if (_createdowner != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetservicePrincipalsownedObjects(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<ServicePrincipal> _listservicePrincipals = client.getServicePrincipals().read().get();
                    ServicePrincipal _servicePrincipal = _listservicePrincipals == null? null : _listservicePrincipals.get(0);

                    if(_servicePrincipal == null){
                        throw new Exception("servicePrincipal not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _ownedObjects = client.getServicePrincipals().getById(_servicePrincipal.getObjectId()).getOwnedObjects().read().get();

                    if (_ownedObjects != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateservicePrincipalsownedObjects(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<ServicePrincipal> _listservicePrincipals = client.getServicePrincipals().read().get();
                    ServicePrincipal _servicePrincipal = _listservicePrincipals == null? null : _listservicePrincipals.get(0);

                    if(_servicePrincipal == null){
                        throw new Exception("servicePrincipal not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdownedObject = client.getServicePrincipals().getById(_servicePrincipal.getObjectId()).getOwnedObjects().add(sampleDirectoryObject).get();

                    if (_createdownedObject != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGettenantDetails(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    List<TenantDetail> _tenantDetails = client.getTenantDetails().read().get();

                    if (_tenantDetails != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreatetenantDetails(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    TenantDetail sampleTenantDetail = getSampleTenantDetail();
                    TenantDetail _createdtenantDetail = client.getTenantDetails().add(sampleTenantDetail).get();

                    if (_createdtenantDetail != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusers(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    List<User> _users = client.getUsers().read().get();

                    if (_users != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusers(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    User sampleUser = getSampleUser();
                    User _createduser = client.getUsers().add(sampleUser).get();

                    if (_createduser != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersappRoleAssignments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }

                    List<AppRoleAssignment> _appRoleAssignments = client.getUsers().getById(_user.getObjectId()).getAppRoleAssignments().read().get();

                    if (_appRoleAssignments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersappRoleAssignments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    AppRoleAssignment sampleAppRoleAssignment = getSampleAppRoleAssignment();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }

                    AppRoleAssignment _createdappRoleAssignment = client.getUsers().getById(_user.getObjectId()).getAppRoleAssignments().add(sampleAppRoleAssignment).get();

                    if (_createdappRoleAssignment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersoauth2PermissionGrants(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }

                    List<OAuth2PermissionGrant> _oauth2PermissionGrants = client.getUsers().getById(_user.getObjectId()).getOauth2PermissionGrants().read().get();

                    if (_oauth2PermissionGrants != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersoauth2PermissionGrants(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    OAuth2PermissionGrant sampleOAuth2PermissionGrant = getSampleOAuth2PermissionGrant();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }

                    OAuth2PermissionGrant _createdoauth2PermissionGrant = client.getUsers().getById(_user.getObjectId()).getOauth2PermissionGrants().add(sampleOAuth2PermissionGrant).get();

                    if (_createdoauth2PermissionGrant != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersownedDevices(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _ownedDevices = client.getUsers().getById(_user.getObjectId()).getOwnedDevices().read().get();

                    if (_ownedDevices != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersownedDevices(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdownedDevice = client.getUsers().getById(_user.getObjectId()).getOwnedDevices().add(sampleDirectoryObject).get();

                    if (_createdownedDevice != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersregisteredDevices(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _registeredDevices = client.getUsers().getById(_user.getObjectId()).getRegisteredDevices().read().get();

                    if (_registeredDevices != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersregisteredDevices(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdregisteredDevice = client.getUsers().getById(_user.getObjectId()).getRegisteredDevices().add(sampleDirectoryObject).get();

                    if (_createdregisteredDevice != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersmanager(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }

                    DirectoryObject _manager = client.getUsers().getById(_user.getObjectId()).getManager().read().get();

                    if (_manager != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersdirectReports(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _directReports = client.getUsers().getById(_user.getObjectId()).getDirectReports().read().get();

                    if (_directReports != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersdirectReports(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createddirectReport = client.getUsers().getById(_user.getObjectId()).getDirectReports().add(sampleDirectoryObject).get();

                    if (_createddirectReport != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersmemberOf(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _memberOf = client.getUsers().getById(_user.getObjectId()).getMemberOf().read().get();

                    if (_memberOf != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersmemberOf(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdmemberOf = client.getUsers().getById(_user.getObjectId()).getMemberOf().add(sampleDirectoryObject).get();

                    if (_createdmemberOf != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetuserscreatedObjects(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _createdObjects = client.getUsers().getById(_user.getObjectId()).getCreatedObjects().read().get();

                    if (_createdObjects != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateuserscreatedObjects(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdcreatedObject = client.getUsers().getById(_user.getObjectId()).getCreatedObjects().add(sampleDirectoryObject).get();

                    if (_createdcreatedObject != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersownedObjects(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }

                    List<DirectoryObject> _ownedObjects = client.getUsers().getById(_user.getObjectId()).getOwnedObjects().read().get();

                    if (_ownedObjects != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersownedObjects(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }

                    DirectoryObject _createdownedObject = client.getUsers().getById(_user.getObjectId()).getOwnedObjects().add(sampleDirectoryObject).get();

                    if (_createdownedObject != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersMessages(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }

                    List<Message> _messages = client.getUsers().getById(_user.getObjectId()).getMessages().read().get();

                    if (_messages != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersMessages(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Message sampleMessage = getSampleMessage();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }

                    Message _createdmessage = client.getUsers().getById(_user.getObjectId()).getMessages().add(sampleMessage).get();

                    if (_createdmessage != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersMessagesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Message> _listmessages = client.getUsers().getById(_user.getObjectId()).getMessages().read().get();
                    Message _message = _listmessages == null? null : _listmessages.get(0);

                    if(_message == null){
                        throw new Exception("Message not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getUsers().getById(_user.getObjectId()).getMessages().getById(_message.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersMessagesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Message> _listmessages = client.getUsers().getById(_user.getObjectId()).getMessages().read().get();
                    Message _message = _listmessages == null? null : _listmessages.get(0);

                    if(_message == null){
                        throw new Exception("Message not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getUsers().getById(_user.getObjectId()).getMessages().getById(_message.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersCalendars(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }

                    List<Calendar> _calendars = client.getUsers().getById(_user.getObjectId()).getCalendars().read().get();

                    if (_calendars != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersCalendars(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Calendar sampleCalendar = getSampleCalendar();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }

                    Calendar _createdcalendar = client.getUsers().getById(_user.getObjectId()).getCalendars().add(sampleCalendar).get();

                    if (_createdcalendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersCalendarsCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getUsers().getById(_user.getObjectId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    List<Event> _calendarView = client.getUsers().getById(_user.getObjectId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();

                    if (_calendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersCalendarsCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getUsers().getById(_user.getObjectId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    Event _createdcalendarView = client.getUsers().getById(_user.getObjectId()).getCalendars().getById(_calendar.getId()).getCalendarView().add(sampleEvent).get();

                    if (_createdcalendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersCalendarsCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getUsers().getById(_user.getObjectId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getUsers().getById(_user.getObjectId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getUsers().getById(_user.getObjectId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersCalendarsCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getUsers().getById(_user.getObjectId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getUsers().getById(_user.getObjectId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getUsers().getById(_user.getObjectId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersCalendarsCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getUsers().getById(_user.getObjectId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getUsers().getById(_user.getObjectId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getUsers().getById(_user.getObjectId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersCalendarsCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getUsers().getById(_user.getObjectId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getUsers().getById(_user.getObjectId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getUsers().getById(_user.getObjectId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersCalendarsCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getUsers().getById(_user.getObjectId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getUsers().getById(_user.getObjectId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getUsers().getById(_user.getObjectId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getUsers().getById(_user.getObjectId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersCalendarsCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getUsers().getById(_user.getObjectId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getUsers().getById(_user.getObjectId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getUsers().getById(_user.getObjectId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getUsers().getById(_user.getObjectId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersCalendarsEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getUsers().getById(_user.getObjectId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    List<Event> _events = client.getUsers().getById(_user.getObjectId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();

                    if (_events != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersCalendarsEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getUsers().getById(_user.getObjectId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    Event _createdevent = client.getUsers().getById(_user.getObjectId()).getCalendars().getById(_calendar.getId()).getEvents().add(sampleEvent).get();

                    if (_createdevent != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersCalendarsEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getUsers().getById(_user.getObjectId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getUsers().getById(_user.getObjectId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getUsers().getById(_user.getObjectId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersCalendarsEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getUsers().getById(_user.getObjectId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getUsers().getById(_user.getObjectId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getUsers().getById(_user.getObjectId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersCalendarsEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getUsers().getById(_user.getObjectId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getUsers().getById(_user.getObjectId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getUsers().getById(_user.getObjectId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersCalendarsEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getUsers().getById(_user.getObjectId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getUsers().getById(_user.getObjectId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getUsers().getById(_user.getObjectId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersCalendarsEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getUsers().getById(_user.getObjectId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getUsers().getById(_user.getObjectId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getUsers().getById(_user.getObjectId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getUsers().getById(_user.getObjectId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersCalendarsEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getUsers().getById(_user.getObjectId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getUsers().getById(_user.getObjectId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getUsers().getById(_user.getObjectId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getUsers().getById(_user.getObjectId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }

                    Calendar _calendar = client.getUsers().getById(_user.getObjectId()).getCalendar().read().get();

                    if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersCalendarCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }

                    List<Event> _calendarView = client.getUsers().getById(_user.getObjectId()).getCalendar().getCalendarView().read().get();

                    if (_calendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersCalendarCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }

                    Event _createdcalendarView = client.getUsers().getById(_user.getObjectId()).getCalendar().getCalendarView().add(sampleEvent).get();

                    if (_createdcalendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersCalendarCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getUsers().getById(_user.getObjectId()).getCalendar().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getUsers().getById(_user.getObjectId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersCalendarCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getUsers().getById(_user.getObjectId()).getCalendar().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getUsers().getById(_user.getObjectId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersCalendarCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getUsers().getById(_user.getObjectId()).getCalendar().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getUsers().getById(_user.getObjectId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersCalendarCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getUsers().getById(_user.getObjectId()).getCalendar().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getUsers().getById(_user.getObjectId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersCalendarCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getUsers().getById(_user.getObjectId()).getCalendar().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getUsers().getById(_user.getObjectId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getUsers().getById(_user.getObjectId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersCalendarCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getUsers().getById(_user.getObjectId()).getCalendar().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getUsers().getById(_user.getObjectId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getUsers().getById(_user.getObjectId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersCalendarEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }

                    List<Event> _events = client.getUsers().getById(_user.getObjectId()).getCalendar().getEvents().read().get();

                    if (_events != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersCalendarEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }

                    Event _createdevent = client.getUsers().getById(_user.getObjectId()).getCalendar().getEvents().add(sampleEvent).get();

                    if (_createdevent != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersCalendarEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getUsers().getById(_user.getObjectId()).getCalendar().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getUsers().getById(_user.getObjectId()).getCalendar().getEvents().getById(_event.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersCalendarEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getUsers().getById(_user.getObjectId()).getCalendar().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getUsers().getById(_user.getObjectId()).getCalendar().getEvents().getById(_event.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersCalendarEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getUsers().getById(_user.getObjectId()).getCalendar().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getUsers().getById(_user.getObjectId()).getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersCalendarEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getUsers().getById(_user.getObjectId()).getCalendar().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getUsers().getById(_user.getObjectId()).getCalendar().getEvents().getById(_event.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersCalendarEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getUsers().getById(_user.getObjectId()).getCalendar().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getUsers().getById(_user.getObjectId()).getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getUsers().getById(_user.getObjectId()).getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersCalendarEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getUsers().getById(_user.getObjectId()).getCalendar().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getUsers().getById(_user.getObjectId()).getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getUsers().getById(_user.getObjectId()).getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersCalendarGroups(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }

                    List<CalendarGroup> _calendarGroups = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().read().get();

                    if (_calendarGroups != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersCalendarGroups(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    CalendarGroup sampleCalendarGroup = getSampleCalendarGroup();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }

                    CalendarGroup _createdcalendarGroup = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().add(sampleCalendarGroup).get();

                    if (_createdcalendarGroup != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersCalendarGroupsCalendars(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }

                    List<Calendar> _calendars = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();

                    if (_calendars != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersCalendarGroupsCalendars(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Calendar sampleCalendar = getSampleCalendar();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }

                    Calendar _createdcalendar = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().add(sampleCalendar).get();

                    if (_createdcalendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersCalendarGroupsCalendarsCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    List<Event> _calendarView = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();

                    if (_calendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersCalendarGroupsCalendarsCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    Event _createdcalendarView = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().add(sampleEvent).get();

                    if (_createdcalendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersCalendarGroupsCalendarsCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersCalendarGroupsCalendarsCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersCalendarGroupsCalendarsCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersCalendarGroupsCalendarsCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersCalendarGroupsCalendarsCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersCalendarGroupsCalendarsCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersCalendarGroupsCalendarsEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    List<Event> _events = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();

                    if (_events != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersCalendarGroupsCalendarsEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    Event _createdevent = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().add(sampleEvent).get();

                    if (_createdevent != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersCalendarGroupsCalendarsEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersCalendarGroupsCalendarsEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersCalendarGroupsCalendarsEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersCalendarGroupsCalendarsEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersCalendarGroupsCalendarsEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersCalendarGroupsCalendarsEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getUsers().getById(_user.getObjectId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }

                    List<Event> _events = client.getUsers().getById(_user.getObjectId()).getEvents().read().get();

                    if (_events != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }

                    Event _createdevent = client.getUsers().getById(_user.getObjectId()).getEvents().add(sampleEvent).get();

                    if (_createdevent != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getUsers().getById(_user.getObjectId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getUsers().getById(_user.getObjectId()).getEvents().getById(_event.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getUsers().getById(_user.getObjectId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getUsers().getById(_user.getObjectId()).getEvents().getById(_event.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersEventsCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getUsers().getById(_user.getObjectId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Calendar _calendar = client.getUsers().getById(_user.getObjectId()).getEvents().getById(_event.getId()).getCalendar().read().get();

                    if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getUsers().getById(_user.getObjectId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getUsers().getById(_user.getObjectId()).getEvents().getById(_event.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getUsers().getById(_user.getObjectId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getUsers().getById(_user.getObjectId()).getEvents().getById(_event.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getUsers().getById(_user.getObjectId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getUsers().getById(_user.getObjectId()).getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getUsers().getById(_user.getObjectId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getUsers().getById(_user.getObjectId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getUsers().getById(_user.getObjectId()).getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getUsers().getById(_user.getObjectId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersEventsInstancesCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getUsers().getById(_user.getObjectId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getUsers().getById(_user.getObjectId()).getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Calendar _calendar = client.getUsers().getById(_user.getObjectId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getCalendar().read().get();

                    if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }

                    List<Event> _calendarView = client.getUsers().getById(_user.getObjectId()).getCalendarView().read().get();

                    if (_calendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }

                    Event _createdcalendarView = client.getUsers().getById(_user.getObjectId()).getCalendarView().add(sampleEvent).get();

                    if (_createdcalendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getUsers().getById(_user.getObjectId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getUsers().getById(_user.getObjectId()).getCalendarView().getById(_calendarView.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getUsers().getById(_user.getObjectId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getUsers().getById(_user.getObjectId()).getCalendarView().getById(_calendarView.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersCalendarViewCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getUsers().getById(_user.getObjectId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Calendar _calendar = client.getUsers().getById(_user.getObjectId()).getCalendarView().getById(_calendarView.getId()).getCalendar().read().get();

                    if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getUsers().getById(_user.getObjectId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getUsers().getById(_user.getObjectId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Event sampleEvent = getSampleEvent();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getUsers().getById(_user.getObjectId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getUsers().getById(_user.getObjectId()).getCalendarView().getById(_calendarView.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getUsers().getById(_user.getObjectId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getUsers().getById(_user.getObjectId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getUsers().getById(_user.getObjectId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getUsers().getById(_user.getObjectId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getUsers().getById(_user.getObjectId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getUsers().getById(_user.getObjectId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersCalendarViewInstancesCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getUsers().getById(_user.getObjectId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getUsers().getById(_user.getObjectId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Calendar _calendar = client.getUsers().getById(_user.getObjectId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getCalendar().read().get();

                    if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersUserPhoto(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }

                    Photo _userPhoto = client.getUsers().getById(_user.getObjectId()).getUserPhoto().read().get();

                    if (_userPhoto != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersUserPhotos(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }

                    List<Photo> _userPhotos = client.getUsers().getById(_user.getObjectId()).getUserPhotos().read().get();

                    if (_userPhotos != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersUserPhotos(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Photo samplePhoto = getSamplePhoto();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }

                    Photo _createduserPhoto = client.getUsers().getById(_user.getObjectId()).getUserPhotos().add(samplePhoto).get();

                    if (_createduserPhoto != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersdrive(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }

                    Drive _drive = client.getUsers().getById(_user.getObjectId()).getDrive().read().get();

                    if (_drive != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersfiles(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }

                    List<Item> _files = client.getUsers().getById(_user.getObjectId()).getFiles().read().get();

                    if (_files != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersfiles(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Item sampleItem = getSampleItem();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }

                    Item _createdfile = client.getUsers().getById(_user.getObjectId()).getFiles().add(sampleItem).get();

                    if (_createdfile != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetusersfileschildren(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();


                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getUsers().getById(_user.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    List<Item> _children = client.getUsers().getById(_user.getObjectId()).getFiles().getById(_file.getId()).getChildren().read().get();

                    if (_children != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateusersfileschildren(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    Item sampleItem = getSampleItem();

                    List<User> _listusers = client.getUsers().read().get();
                    User _user = _listusers == null? null : _listusers.get(0);

                    if(_user == null){
                        throw new Exception("user not available. Can't proceed with the test.");
                    }


                    List<Item> _listfiles = client.getUsers().getById(_user.getObjectId()).getFiles().read().get();
                    Item _file = _listfiles == null? null : _listfiles.get(0);

                    if(_file == null){
                        throw new Exception("file not available. Can't proceed with the test.");
                    }

                    Item _createdchild = client.getUsers().getById(_user.getObjectId()).getFiles().getById(_file.getId()).getChildren().add(sampleItem).get();

                    if (_createdchild != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetoauth2PermissionGrants(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    List<OAuth2PermissionGrant> _oauth2PermissionGrants = client.getOauth2PermissionGrants().read().get();

                    if (_oauth2PermissionGrants != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateoauth2PermissionGrants(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    OAuth2PermissionGrant sampleOAuth2PermissionGrant = getSampleOAuth2PermissionGrant();
                    OAuth2PermissionGrant _createdoauth2PermissionGrant = client.getOauth2PermissionGrants().add(sampleOAuth2PermissionGrant).get();

                    if (_createdoauth2PermissionGrant != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetsubscribedSkus(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    List<SubscribedSku> _subscribedSkus = client.getSubscribedSkus().read().get();

                    if (_subscribedSkus != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreatesubscribedSkus(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    GraphServiceClient client = ApplicationContext.getGraphServiceClient();

                    SubscribedSku sampleSubscribedSku = getSampleSubscribedSku();
                    SubscribedSku _createdsubscribedSku = client.getSubscribedSkus().add(sampleSubscribedSku).get();

                    if (_createdsubscribedSku != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }

    public GraphServiceClientTests() {
        super("GraphService Tests");
    }

    public GraphServiceClientTests(List<PropertyFilter> filters, List<String> notSupportedTests ){
        this();
        mFiller = new ObjectFiller();
        mNotSupportedTests = notSupportedTests;
        setSubelementsForContainer();

        for (PropertyFilter pf : filters) {
            mFiller.addPropertyFilter(pf);
        }

        this.addTest(canGetdirectoryObjects("Can get directoryObjects", getTestStatus("canGetdirectoryObjects")));
        this.addTest(canCreatedirectoryObjects("Can create canCreatedirectoryObjects", getTestStatus("canCreatedirectoryObjects")));
        this.addTest(canGetapplications("Can get applications", getTestStatus("canGetapplications")));
        this.addTest(canCreateapplications("Can create canCreateapplications", getTestStatus("canCreateapplications")));
        this.addTest(canGetapplicationsextensionProperties("Can get applicationsextensionProperties", getTestStatus("canGetapplicationsextensionProperties")));
        this.addTest(canCreateapplicationsextensionProperties("Can create canCreateapplicationsextensionProperties", getTestStatus("canCreateapplicationsextensionProperties")));
        this.addTest(canGetapplicationscreatedOnBehalfOf("Can get applicationscreatedOnBehalfOf", getTestStatus("canGetapplicationscreatedOnBehalfOf")));
        this.addTest(canGetapplicationsowners("Can get applicationsowners", getTestStatus("canGetapplicationsowners")));
        this.addTest(canCreateapplicationsowners("Can create canCreateapplicationsowners", getTestStatus("canCreateapplicationsowners")));
        this.addTest(canGetcontacts("Can get contacts", getTestStatus("canGetcontacts")));
        this.addTest(canCreatecontacts("Can create canCreatecontacts", getTestStatus("canCreatecontacts")));
        this.addTest(canGetcontactsmanager("Can get contactsmanager", getTestStatus("canGetcontactsmanager")));
        this.addTest(canGetcontactsdirectReports("Can get contactsdirectReports", getTestStatus("canGetcontactsdirectReports")));
        this.addTest(canCreatecontactsdirectReports("Can create canCreatecontactsdirectReports", getTestStatus("canCreatecontactsdirectReports")));
        this.addTest(canGetcontactsmemberOf("Can get contactsmemberOf", getTestStatus("canGetcontactsmemberOf")));
        this.addTest(canCreatecontactsmemberOf("Can create canCreatecontactsmemberOf", getTestStatus("canCreatecontactsmemberOf")));
        this.addTest(canGetdeviceConfiguration("Can get deviceConfiguration", getTestStatus("canGetdeviceConfiguration")));
        this.addTest(canCreatedeviceConfiguration("Can create canCreatedeviceConfiguration", getTestStatus("canCreatedeviceConfiguration")));
        this.addTest(canGetdevices("Can get devices", getTestStatus("canGetdevices")));
        this.addTest(canCreatedevices("Can create canCreatedevices", getTestStatus("canCreatedevices")));
        this.addTest(canGetdevicesregisteredOwners("Can get devicesregisteredOwners", getTestStatus("canGetdevicesregisteredOwners")));
        this.addTest(canCreatedevicesregisteredOwners("Can create canCreatedevicesregisteredOwners", getTestStatus("canCreatedevicesregisteredOwners")));
        this.addTest(canGetdevicesregisteredUsers("Can get devicesregisteredUsers", getTestStatus("canGetdevicesregisteredUsers")));
        this.addTest(canCreatedevicesregisteredUsers("Can create canCreatedevicesregisteredUsers", getTestStatus("canCreatedevicesregisteredUsers")));
        this.addTest(canGetgroups("Can get groups", getTestStatus("canGetgroups")));
        this.addTest(canCreategroups("Can create canCreategroups", getTestStatus("canCreategroups")));
        this.addTest(canGetgroupsappRoleAssignments("Can get groupsappRoleAssignments", getTestStatus("canGetgroupsappRoleAssignments")));
        this.addTest(canCreategroupsappRoleAssignments("Can create canCreategroupsappRoleAssignments", getTestStatus("canCreategroupsappRoleAssignments")));
        this.addTest(canGetgroupsmembers("Can get groupsmembers", getTestStatus("canGetgroupsmembers")));
        this.addTest(canCreategroupsmembers("Can create canCreategroupsmembers", getTestStatus("canCreategroupsmembers")));
        this.addTest(canGetgroupsmemberOf("Can get groupsmemberOf", getTestStatus("canGetgroupsmemberOf")));
        this.addTest(canCreategroupsmemberOf("Can create canCreategroupsmemberOf", getTestStatus("canCreategroupsmemberOf")));
        this.addTest(canGetgroupscreatedOnBehalfOf("Can get groupscreatedOnBehalfOf", getTestStatus("canGetgroupscreatedOnBehalfOf")));
        this.addTest(canGetgroupsowners("Can get groupsowners", getTestStatus("canGetgroupsowners")));
        this.addTest(canCreategroupsowners("Can create canCreategroupsowners", getTestStatus("canCreategroupsowners")));
        this.addTest(canGetgroupsfiles("Can get groupsfiles", getTestStatus("canGetgroupsfiles")));
        this.addTest(canCreategroupsfiles("Can create canCreategroupsfiles", getTestStatus("canCreategroupsfiles")));
        this.addTest(canGetgroupsfilescreatedByUser("Can get groupsfilescreatedByUser", getTestStatus("canGetgroupsfilescreatedByUser")));
        this.addTest(canGetgroupsfilescreatedByUserappRoleAssignments("Can get groupsfilescreatedByUserappRoleAssignments", getTestStatus("canGetgroupsfilescreatedByUserappRoleAssignments")));
        this.addTest(canCreategroupsfilescreatedByUserappRoleAssignments("Can create canCreategroupsfilescreatedByUserappRoleAssignments", getTestStatus("canCreategroupsfilescreatedByUserappRoleAssignments")));
        this.addTest(canGetgroupsfilescreatedByUseroauth2PermissionGrants("Can get groupsfilescreatedByUseroauth2PermissionGrants", getTestStatus("canGetgroupsfilescreatedByUseroauth2PermissionGrants")));
        this.addTest(canCreategroupsfilescreatedByUseroauth2PermissionGrants("Can create canCreategroupsfilescreatedByUseroauth2PermissionGrants", getTestStatus("canCreategroupsfilescreatedByUseroauth2PermissionGrants")));
        this.addTest(canGetgroupsfilescreatedByUserownedDevices("Can get groupsfilescreatedByUserownedDevices", getTestStatus("canGetgroupsfilescreatedByUserownedDevices")));
        this.addTest(canCreategroupsfilescreatedByUserownedDevices("Can create canCreategroupsfilescreatedByUserownedDevices", getTestStatus("canCreategroupsfilescreatedByUserownedDevices")));
        this.addTest(canGetgroupsfilescreatedByUserregisteredDevices("Can get groupsfilescreatedByUserregisteredDevices", getTestStatus("canGetgroupsfilescreatedByUserregisteredDevices")));
        this.addTest(canCreategroupsfilescreatedByUserregisteredDevices("Can create canCreategroupsfilescreatedByUserregisteredDevices", getTestStatus("canCreategroupsfilescreatedByUserregisteredDevices")));
        this.addTest(canGetgroupsfilescreatedByUsermanager("Can get groupsfilescreatedByUsermanager", getTestStatus("canGetgroupsfilescreatedByUsermanager")));
        this.addTest(canGetgroupsfilescreatedByUserdirectReports("Can get groupsfilescreatedByUserdirectReports", getTestStatus("canGetgroupsfilescreatedByUserdirectReports")));
        this.addTest(canCreategroupsfilescreatedByUserdirectReports("Can create canCreategroupsfilescreatedByUserdirectReports", getTestStatus("canCreategroupsfilescreatedByUserdirectReports")));
        this.addTest(canGetgroupsfilescreatedByUsermemberOf("Can get groupsfilescreatedByUsermemberOf", getTestStatus("canGetgroupsfilescreatedByUsermemberOf")));
        this.addTest(canCreategroupsfilescreatedByUsermemberOf("Can create canCreategroupsfilescreatedByUsermemberOf", getTestStatus("canCreategroupsfilescreatedByUsermemberOf")));
        this.addTest(canGetgroupsfilescreatedByUsercreatedObjects("Can get groupsfilescreatedByUsercreatedObjects", getTestStatus("canGetgroupsfilescreatedByUsercreatedObjects")));
        this.addTest(canCreategroupsfilescreatedByUsercreatedObjects("Can create canCreategroupsfilescreatedByUsercreatedObjects", getTestStatus("canCreategroupsfilescreatedByUsercreatedObjects")));
        this.addTest(canGetgroupsfilescreatedByUserownedObjects("Can get groupsfilescreatedByUserownedObjects", getTestStatus("canGetgroupsfilescreatedByUserownedObjects")));
        this.addTest(canCreategroupsfilescreatedByUserownedObjects("Can create canCreategroupsfilescreatedByUserownedObjects", getTestStatus("canCreategroupsfilescreatedByUserownedObjects")));
        this.addTest(canGetgroupsfilescreatedByUserMessages("Can get groupsfilescreatedByUserMessages", getTestStatus("canGetgroupsfilescreatedByUserMessages")));
        this.addTest(canCreategroupsfilescreatedByUserMessages("Can create canCreategroupsfilescreatedByUserMessages", getTestStatus("canCreategroupsfilescreatedByUserMessages")));
        this.addTest(canGetgroupsfilescreatedByUserMessagesAttachments("Can get groupsfilescreatedByUserMessagesAttachments", getTestStatus("canGetgroupsfilescreatedByUserMessagesAttachments")));
        this.addTest(canCreategroupsfilescreatedByUserMessagesAttachments("Can create canCreategroupsfilescreatedByUserMessagesAttachments", getTestStatus("canCreategroupsfilescreatedByUserMessagesAttachments")));
        this.addTest(canGetgroupsfilescreatedByUserCalendars("Can get groupsfilescreatedByUserCalendars", getTestStatus("canGetgroupsfilescreatedByUserCalendars")));
        this.addTest(canCreategroupsfilescreatedByUserCalendars("Can create canCreategroupsfilescreatedByUserCalendars", getTestStatus("canCreategroupsfilescreatedByUserCalendars")));
        this.addTest(canGetgroupsfilescreatedByUserCalendarsCalendarView("Can get groupsfilescreatedByUserCalendarsCalendarView", getTestStatus("canGetgroupsfilescreatedByUserCalendarsCalendarView")));
        this.addTest(canCreategroupsfilescreatedByUserCalendarsCalendarView("Can create canCreategroupsfilescreatedByUserCalendarsCalendarView", getTestStatus("canCreategroupsfilescreatedByUserCalendarsCalendarView")));
        this.addTest(canGetgroupsfilescreatedByUserCalendarsCalendarViewAttachments("Can get groupsfilescreatedByUserCalendarsCalendarViewAttachments", getTestStatus("canGetgroupsfilescreatedByUserCalendarsCalendarViewAttachments")));
        this.addTest(canCreategroupsfilescreatedByUserCalendarsCalendarViewAttachments("Can create canCreategroupsfilescreatedByUserCalendarsCalendarViewAttachments", getTestStatus("canCreategroupsfilescreatedByUserCalendarsCalendarViewAttachments")));
        this.addTest(canGetgroupsfilescreatedByUserCalendarsCalendarViewInstances("Can get groupsfilescreatedByUserCalendarsCalendarViewInstances", getTestStatus("canGetgroupsfilescreatedByUserCalendarsCalendarViewInstances")));
        this.addTest(canCreategroupsfilescreatedByUserCalendarsCalendarViewInstances("Can create canCreategroupsfilescreatedByUserCalendarsCalendarViewInstances", getTestStatus("canCreategroupsfilescreatedByUserCalendarsCalendarViewInstances")));
        this.addTest(canGetgroupsfilescreatedByUserCalendarsCalendarViewInstancesAttachments("Can get groupsfilescreatedByUserCalendarsCalendarViewInstancesAttachments", getTestStatus("canGetgroupsfilescreatedByUserCalendarsCalendarViewInstancesAttachments")));
        this.addTest(canCreategroupsfilescreatedByUserCalendarsCalendarViewInstancesAttachments("Can create canCreategroupsfilescreatedByUserCalendarsCalendarViewInstancesAttachments", getTestStatus("canCreategroupsfilescreatedByUserCalendarsCalendarViewInstancesAttachments")));
        this.addTest(canGetgroupsfilescreatedByUserCalendarsEvents("Can get groupsfilescreatedByUserCalendarsEvents", getTestStatus("canGetgroupsfilescreatedByUserCalendarsEvents")));
        this.addTest(canCreategroupsfilescreatedByUserCalendarsEvents("Can create canCreategroupsfilescreatedByUserCalendarsEvents", getTestStatus("canCreategroupsfilescreatedByUserCalendarsEvents")));
        this.addTest(canGetgroupsfilescreatedByUserCalendarsEventsAttachments("Can get groupsfilescreatedByUserCalendarsEventsAttachments", getTestStatus("canGetgroupsfilescreatedByUserCalendarsEventsAttachments")));
        this.addTest(canCreategroupsfilescreatedByUserCalendarsEventsAttachments("Can create canCreategroupsfilescreatedByUserCalendarsEventsAttachments", getTestStatus("canCreategroupsfilescreatedByUserCalendarsEventsAttachments")));
        this.addTest(canGetgroupsfilescreatedByUserCalendarsEventsInstances("Can get groupsfilescreatedByUserCalendarsEventsInstances", getTestStatus("canGetgroupsfilescreatedByUserCalendarsEventsInstances")));
        this.addTest(canCreategroupsfilescreatedByUserCalendarsEventsInstances("Can create canCreategroupsfilescreatedByUserCalendarsEventsInstances", getTestStatus("canCreategroupsfilescreatedByUserCalendarsEventsInstances")));
        this.addTest(canGetgroupsfilescreatedByUserCalendarsEventsInstancesAttachments("Can get groupsfilescreatedByUserCalendarsEventsInstancesAttachments", getTestStatus("canGetgroupsfilescreatedByUserCalendarsEventsInstancesAttachments")));
        this.addTest(canCreategroupsfilescreatedByUserCalendarsEventsInstancesAttachments("Can create canCreategroupsfilescreatedByUserCalendarsEventsInstancesAttachments", getTestStatus("canCreategroupsfilescreatedByUserCalendarsEventsInstancesAttachments")));
        this.addTest(canGetgroupsfilescreatedByUserCalendar("Can get groupsfilescreatedByUserCalendar", getTestStatus("canGetgroupsfilescreatedByUserCalendar")));
        this.addTest(canGetgroupsfilescreatedByUserCalendarCalendarView("Can get groupsfilescreatedByUserCalendarCalendarView", getTestStatus("canGetgroupsfilescreatedByUserCalendarCalendarView")));
        this.addTest(canCreategroupsfilescreatedByUserCalendarCalendarView("Can create canCreategroupsfilescreatedByUserCalendarCalendarView", getTestStatus("canCreategroupsfilescreatedByUserCalendarCalendarView")));
        this.addTest(canGetgroupsfilescreatedByUserCalendarCalendarViewAttachments("Can get groupsfilescreatedByUserCalendarCalendarViewAttachments", getTestStatus("canGetgroupsfilescreatedByUserCalendarCalendarViewAttachments")));
        this.addTest(canCreategroupsfilescreatedByUserCalendarCalendarViewAttachments("Can create canCreategroupsfilescreatedByUserCalendarCalendarViewAttachments", getTestStatus("canCreategroupsfilescreatedByUserCalendarCalendarViewAttachments")));
        this.addTest(canGetgroupsfilescreatedByUserCalendarCalendarViewInstances("Can get groupsfilescreatedByUserCalendarCalendarViewInstances", getTestStatus("canGetgroupsfilescreatedByUserCalendarCalendarViewInstances")));
        this.addTest(canCreategroupsfilescreatedByUserCalendarCalendarViewInstances("Can create canCreategroupsfilescreatedByUserCalendarCalendarViewInstances", getTestStatus("canCreategroupsfilescreatedByUserCalendarCalendarViewInstances")));
        this.addTest(canGetgroupsfilescreatedByUserCalendarCalendarViewInstancesAttachments("Can get groupsfilescreatedByUserCalendarCalendarViewInstancesAttachments", getTestStatus("canGetgroupsfilescreatedByUserCalendarCalendarViewInstancesAttachments")));
        this.addTest(canCreategroupsfilescreatedByUserCalendarCalendarViewInstancesAttachments("Can create canCreategroupsfilescreatedByUserCalendarCalendarViewInstancesAttachments", getTestStatus("canCreategroupsfilescreatedByUserCalendarCalendarViewInstancesAttachments")));
        this.addTest(canGetgroupsfilescreatedByUserCalendarEvents("Can get groupsfilescreatedByUserCalendarEvents", getTestStatus("canGetgroupsfilescreatedByUserCalendarEvents")));
        this.addTest(canCreategroupsfilescreatedByUserCalendarEvents("Can create canCreategroupsfilescreatedByUserCalendarEvents", getTestStatus("canCreategroupsfilescreatedByUserCalendarEvents")));
        this.addTest(canGetgroupsfilescreatedByUserCalendarEventsAttachments("Can get groupsfilescreatedByUserCalendarEventsAttachments", getTestStatus("canGetgroupsfilescreatedByUserCalendarEventsAttachments")));
        this.addTest(canCreategroupsfilescreatedByUserCalendarEventsAttachments("Can create canCreategroupsfilescreatedByUserCalendarEventsAttachments", getTestStatus("canCreategroupsfilescreatedByUserCalendarEventsAttachments")));
        this.addTest(canGetgroupsfilescreatedByUserCalendarEventsInstances("Can get groupsfilescreatedByUserCalendarEventsInstances", getTestStatus("canGetgroupsfilescreatedByUserCalendarEventsInstances")));
        this.addTest(canCreategroupsfilescreatedByUserCalendarEventsInstances("Can create canCreategroupsfilescreatedByUserCalendarEventsInstances", getTestStatus("canCreategroupsfilescreatedByUserCalendarEventsInstances")));
        this.addTest(canGetgroupsfilescreatedByUserCalendarEventsInstancesAttachments("Can get groupsfilescreatedByUserCalendarEventsInstancesAttachments", getTestStatus("canGetgroupsfilescreatedByUserCalendarEventsInstancesAttachments")));
        this.addTest(canCreategroupsfilescreatedByUserCalendarEventsInstancesAttachments("Can create canCreategroupsfilescreatedByUserCalendarEventsInstancesAttachments", getTestStatus("canCreategroupsfilescreatedByUserCalendarEventsInstancesAttachments")));
        this.addTest(canGetgroupsfilescreatedByUserCalendarGroups("Can get groupsfilescreatedByUserCalendarGroups", getTestStatus("canGetgroupsfilescreatedByUserCalendarGroups")));
        this.addTest(canCreategroupsfilescreatedByUserCalendarGroups("Can create canCreategroupsfilescreatedByUserCalendarGroups", getTestStatus("canCreategroupsfilescreatedByUserCalendarGroups")));
        this.addTest(canGetgroupsfilescreatedByUserCalendarGroupsCalendars("Can get groupsfilescreatedByUserCalendarGroupsCalendars", getTestStatus("canGetgroupsfilescreatedByUserCalendarGroupsCalendars")));
        this.addTest(canCreategroupsfilescreatedByUserCalendarGroupsCalendars("Can create canCreategroupsfilescreatedByUserCalendarGroupsCalendars", getTestStatus("canCreategroupsfilescreatedByUserCalendarGroupsCalendars")));
        this.addTest(canGetgroupsfilescreatedByUserCalendarGroupsCalendarsCalendarView("Can get groupsfilescreatedByUserCalendarGroupsCalendarsCalendarView", getTestStatus("canGetgroupsfilescreatedByUserCalendarGroupsCalendarsCalendarView")));
        this.addTest(canCreategroupsfilescreatedByUserCalendarGroupsCalendarsCalendarView("Can create canCreategroupsfilescreatedByUserCalendarGroupsCalendarsCalendarView", getTestStatus("canCreategroupsfilescreatedByUserCalendarGroupsCalendarsCalendarView")));
        this.addTest(canGetgroupsfilescreatedByUserCalendarGroupsCalendarsCalendarViewAttachments("Can get groupsfilescreatedByUserCalendarGroupsCalendarsCalendarViewAttachments", getTestStatus("canGetgroupsfilescreatedByUserCalendarGroupsCalendarsCalendarViewAttachments")));
        this.addTest(canCreategroupsfilescreatedByUserCalendarGroupsCalendarsCalendarViewAttachments("Can create canCreategroupsfilescreatedByUserCalendarGroupsCalendarsCalendarViewAttachments", getTestStatus("canCreategroupsfilescreatedByUserCalendarGroupsCalendarsCalendarViewAttachments")));
        this.addTest(canGetgroupsfilescreatedByUserCalendarGroupsCalendarsCalendarViewInstances("Can get groupsfilescreatedByUserCalendarGroupsCalendarsCalendarViewInstances", getTestStatus("canGetgroupsfilescreatedByUserCalendarGroupsCalendarsCalendarViewInstances")));
        this.addTest(canCreategroupsfilescreatedByUserCalendarGroupsCalendarsCalendarViewInstances("Can create canCreategroupsfilescreatedByUserCalendarGroupsCalendarsCalendarViewInstances", getTestStatus("canCreategroupsfilescreatedByUserCalendarGroupsCalendarsCalendarViewInstances")));
        this.addTest(canGetgroupsfilescreatedByUserCalendarGroupsCalendarsCalendarViewInstancesAttachments("Can get groupsfilescreatedByUserCalendarGroupsCalendarsCalendarViewInstancesAttachments", getTestStatus("canGetgroupsfilescreatedByUserCalendarGroupsCalendarsCalendarViewInstancesAttachments")));
        this.addTest(canCreategroupsfilescreatedByUserCalendarGroupsCalendarsCalendarViewInstancesAttachments("Can create canCreategroupsfilescreatedByUserCalendarGroupsCalendarsCalendarViewInstancesAttachments", getTestStatus("canCreategroupsfilescreatedByUserCalendarGroupsCalendarsCalendarViewInstancesAttachments")));
        this.addTest(canGetgroupsfilescreatedByUserCalendarGroupsCalendarsEvents("Can get groupsfilescreatedByUserCalendarGroupsCalendarsEvents", getTestStatus("canGetgroupsfilescreatedByUserCalendarGroupsCalendarsEvents")));
        this.addTest(canCreategroupsfilescreatedByUserCalendarGroupsCalendarsEvents("Can create canCreategroupsfilescreatedByUserCalendarGroupsCalendarsEvents", getTestStatus("canCreategroupsfilescreatedByUserCalendarGroupsCalendarsEvents")));
        this.addTest(canGetgroupsfilescreatedByUserCalendarGroupsCalendarsEventsAttachments("Can get groupsfilescreatedByUserCalendarGroupsCalendarsEventsAttachments", getTestStatus("canGetgroupsfilescreatedByUserCalendarGroupsCalendarsEventsAttachments")));
        this.addTest(canCreategroupsfilescreatedByUserCalendarGroupsCalendarsEventsAttachments("Can create canCreategroupsfilescreatedByUserCalendarGroupsCalendarsEventsAttachments", getTestStatus("canCreategroupsfilescreatedByUserCalendarGroupsCalendarsEventsAttachments")));
        this.addTest(canGetgroupsfilescreatedByUserCalendarGroupsCalendarsEventsInstances("Can get groupsfilescreatedByUserCalendarGroupsCalendarsEventsInstances", getTestStatus("canGetgroupsfilescreatedByUserCalendarGroupsCalendarsEventsInstances")));
        this.addTest(canCreategroupsfilescreatedByUserCalendarGroupsCalendarsEventsInstances("Can create canCreategroupsfilescreatedByUserCalendarGroupsCalendarsEventsInstances", getTestStatus("canCreategroupsfilescreatedByUserCalendarGroupsCalendarsEventsInstances")));
        this.addTest(canGetgroupsfilescreatedByUserCalendarGroupsCalendarsEventsInstancesAttachments("Can get groupsfilescreatedByUserCalendarGroupsCalendarsEventsInstancesAttachments", getTestStatus("canGetgroupsfilescreatedByUserCalendarGroupsCalendarsEventsInstancesAttachments")));
        this.addTest(canCreategroupsfilescreatedByUserCalendarGroupsCalendarsEventsInstancesAttachments("Can create canCreategroupsfilescreatedByUserCalendarGroupsCalendarsEventsInstancesAttachments", getTestStatus("canCreategroupsfilescreatedByUserCalendarGroupsCalendarsEventsInstancesAttachments")));
        this.addTest(canGetgroupsfilescreatedByUserEvents("Can get groupsfilescreatedByUserEvents", getTestStatus("canGetgroupsfilescreatedByUserEvents")));
        this.addTest(canCreategroupsfilescreatedByUserEvents("Can create canCreategroupsfilescreatedByUserEvents", getTestStatus("canCreategroupsfilescreatedByUserEvents")));
        this.addTest(canGetgroupsfilescreatedByUserEventsAttachments("Can get groupsfilescreatedByUserEventsAttachments", getTestStatus("canGetgroupsfilescreatedByUserEventsAttachments")));
        this.addTest(canCreategroupsfilescreatedByUserEventsAttachments("Can create canCreategroupsfilescreatedByUserEventsAttachments", getTestStatus("canCreategroupsfilescreatedByUserEventsAttachments")));
        this.addTest(canGetgroupsfilescreatedByUserEventsCalendar("Can get groupsfilescreatedByUserEventsCalendar", getTestStatus("canGetgroupsfilescreatedByUserEventsCalendar")));
        this.addTest(canGetgroupsfilescreatedByUserEventsInstances("Can get groupsfilescreatedByUserEventsInstances", getTestStatus("canGetgroupsfilescreatedByUserEventsInstances")));
        this.addTest(canCreategroupsfilescreatedByUserEventsInstances("Can create canCreategroupsfilescreatedByUserEventsInstances", getTestStatus("canCreategroupsfilescreatedByUserEventsInstances")));
        this.addTest(canGetgroupsfilescreatedByUserEventsInstancesAttachments("Can get groupsfilescreatedByUserEventsInstancesAttachments", getTestStatus("canGetgroupsfilescreatedByUserEventsInstancesAttachments")));
        this.addTest(canCreategroupsfilescreatedByUserEventsInstancesAttachments("Can create canCreategroupsfilescreatedByUserEventsInstancesAttachments", getTestStatus("canCreategroupsfilescreatedByUserEventsInstancesAttachments")));
        this.addTest(canGetgroupsfilescreatedByUserEventsInstancesCalendar("Can get groupsfilescreatedByUserEventsInstancesCalendar", getTestStatus("canGetgroupsfilescreatedByUserEventsInstancesCalendar")));
        this.addTest(canGetgroupsfilescreatedByUserCalendarView("Can get groupsfilescreatedByUserCalendarView", getTestStatus("canGetgroupsfilescreatedByUserCalendarView")));
        this.addTest(canCreategroupsfilescreatedByUserCalendarView("Can create canCreategroupsfilescreatedByUserCalendarView", getTestStatus("canCreategroupsfilescreatedByUserCalendarView")));
        this.addTest(canGetgroupsfilescreatedByUserCalendarViewAttachments("Can get groupsfilescreatedByUserCalendarViewAttachments", getTestStatus("canGetgroupsfilescreatedByUserCalendarViewAttachments")));
        this.addTest(canCreategroupsfilescreatedByUserCalendarViewAttachments("Can create canCreategroupsfilescreatedByUserCalendarViewAttachments", getTestStatus("canCreategroupsfilescreatedByUserCalendarViewAttachments")));
        this.addTest(canGetgroupsfilescreatedByUserCalendarViewCalendar("Can get groupsfilescreatedByUserCalendarViewCalendar", getTestStatus("canGetgroupsfilescreatedByUserCalendarViewCalendar")));
        this.addTest(canGetgroupsfilescreatedByUserCalendarViewInstances("Can get groupsfilescreatedByUserCalendarViewInstances", getTestStatus("canGetgroupsfilescreatedByUserCalendarViewInstances")));
        this.addTest(canCreategroupsfilescreatedByUserCalendarViewInstances("Can create canCreategroupsfilescreatedByUserCalendarViewInstances", getTestStatus("canCreategroupsfilescreatedByUserCalendarViewInstances")));
        this.addTest(canGetgroupsfilescreatedByUserCalendarViewInstancesAttachments("Can get groupsfilescreatedByUserCalendarViewInstancesAttachments", getTestStatus("canGetgroupsfilescreatedByUserCalendarViewInstancesAttachments")));
        this.addTest(canCreategroupsfilescreatedByUserCalendarViewInstancesAttachments("Can create canCreategroupsfilescreatedByUserCalendarViewInstancesAttachments", getTestStatus("canCreategroupsfilescreatedByUserCalendarViewInstancesAttachments")));
        this.addTest(canGetgroupsfilescreatedByUserCalendarViewInstancesCalendar("Can get groupsfilescreatedByUserCalendarViewInstancesCalendar", getTestStatus("canGetgroupsfilescreatedByUserCalendarViewInstancesCalendar")));
        this.addTest(canGetgroupsfilescreatedByUserUserPhoto("Can get groupsfilescreatedByUserUserPhoto", getTestStatus("canGetgroupsfilescreatedByUserUserPhoto")));
        this.addTest(canGetgroupsfilescreatedByUserUserPhotos("Can get groupsfilescreatedByUserUserPhotos", getTestStatus("canGetgroupsfilescreatedByUserUserPhotos")));
        this.addTest(canCreategroupsfilescreatedByUserUserPhotos("Can create canCreategroupsfilescreatedByUserUserPhotos", getTestStatus("canCreategroupsfilescreatedByUserUserPhotos")));
        this.addTest(canGetgroupsfilescreatedByUserdrive("Can get groupsfilescreatedByUserdrive", getTestStatus("canGetgroupsfilescreatedByUserdrive")));
        this.addTest(canGetgroupsfileslastModifiedByUser("Can get groupsfileslastModifiedByUser", getTestStatus("canGetgroupsfileslastModifiedByUser")));
        this.addTest(canGetgroupsfileslastModifiedByUserappRoleAssignments("Can get groupsfileslastModifiedByUserappRoleAssignments", getTestStatus("canGetgroupsfileslastModifiedByUserappRoleAssignments")));
        this.addTest(canCreategroupsfileslastModifiedByUserappRoleAssignments("Can create canCreategroupsfileslastModifiedByUserappRoleAssignments", getTestStatus("canCreategroupsfileslastModifiedByUserappRoleAssignments")));
        this.addTest(canGetgroupsfileslastModifiedByUseroauth2PermissionGrants("Can get groupsfileslastModifiedByUseroauth2PermissionGrants", getTestStatus("canGetgroupsfileslastModifiedByUseroauth2PermissionGrants")));
        this.addTest(canCreategroupsfileslastModifiedByUseroauth2PermissionGrants("Can create canCreategroupsfileslastModifiedByUseroauth2PermissionGrants", getTestStatus("canCreategroupsfileslastModifiedByUseroauth2PermissionGrants")));
        this.addTest(canGetgroupsfileslastModifiedByUserownedDevices("Can get groupsfileslastModifiedByUserownedDevices", getTestStatus("canGetgroupsfileslastModifiedByUserownedDevices")));
        this.addTest(canCreategroupsfileslastModifiedByUserownedDevices("Can create canCreategroupsfileslastModifiedByUserownedDevices", getTestStatus("canCreategroupsfileslastModifiedByUserownedDevices")));
        this.addTest(canGetgroupsfileslastModifiedByUserregisteredDevices("Can get groupsfileslastModifiedByUserregisteredDevices", getTestStatus("canGetgroupsfileslastModifiedByUserregisteredDevices")));
        this.addTest(canCreategroupsfileslastModifiedByUserregisteredDevices("Can create canCreategroupsfileslastModifiedByUserregisteredDevices", getTestStatus("canCreategroupsfileslastModifiedByUserregisteredDevices")));
        this.addTest(canGetgroupsfileslastModifiedByUsermanager("Can get groupsfileslastModifiedByUsermanager", getTestStatus("canGetgroupsfileslastModifiedByUsermanager")));
        this.addTest(canGetgroupsfileslastModifiedByUserdirectReports("Can get groupsfileslastModifiedByUserdirectReports", getTestStatus("canGetgroupsfileslastModifiedByUserdirectReports")));
        this.addTest(canCreategroupsfileslastModifiedByUserdirectReports("Can create canCreategroupsfileslastModifiedByUserdirectReports", getTestStatus("canCreategroupsfileslastModifiedByUserdirectReports")));
        this.addTest(canGetgroupsfileslastModifiedByUsermemberOf("Can get groupsfileslastModifiedByUsermemberOf", getTestStatus("canGetgroupsfileslastModifiedByUsermemberOf")));
        this.addTest(canCreategroupsfileslastModifiedByUsermemberOf("Can create canCreategroupsfileslastModifiedByUsermemberOf", getTestStatus("canCreategroupsfileslastModifiedByUsermemberOf")));
        this.addTest(canGetgroupsfileslastModifiedByUsercreatedObjects("Can get groupsfileslastModifiedByUsercreatedObjects", getTestStatus("canGetgroupsfileslastModifiedByUsercreatedObjects")));
        this.addTest(canCreategroupsfileslastModifiedByUsercreatedObjects("Can create canCreategroupsfileslastModifiedByUsercreatedObjects", getTestStatus("canCreategroupsfileslastModifiedByUsercreatedObjects")));
        this.addTest(canGetgroupsfileslastModifiedByUserownedObjects("Can get groupsfileslastModifiedByUserownedObjects", getTestStatus("canGetgroupsfileslastModifiedByUserownedObjects")));
        this.addTest(canCreategroupsfileslastModifiedByUserownedObjects("Can create canCreategroupsfileslastModifiedByUserownedObjects", getTestStatus("canCreategroupsfileslastModifiedByUserownedObjects")));
        this.addTest(canGetgroupsfileslastModifiedByUserMessages("Can get groupsfileslastModifiedByUserMessages", getTestStatus("canGetgroupsfileslastModifiedByUserMessages")));
        this.addTest(canCreategroupsfileslastModifiedByUserMessages("Can create canCreategroupsfileslastModifiedByUserMessages", getTestStatus("canCreategroupsfileslastModifiedByUserMessages")));
        this.addTest(canGetgroupsfileslastModifiedByUserMessagesAttachments("Can get groupsfileslastModifiedByUserMessagesAttachments", getTestStatus("canGetgroupsfileslastModifiedByUserMessagesAttachments")));
        this.addTest(canCreategroupsfileslastModifiedByUserMessagesAttachments("Can create canCreategroupsfileslastModifiedByUserMessagesAttachments", getTestStatus("canCreategroupsfileslastModifiedByUserMessagesAttachments")));
        this.addTest(canGetgroupsfileslastModifiedByUserCalendars("Can get groupsfileslastModifiedByUserCalendars", getTestStatus("canGetgroupsfileslastModifiedByUserCalendars")));
        this.addTest(canCreategroupsfileslastModifiedByUserCalendars("Can create canCreategroupsfileslastModifiedByUserCalendars", getTestStatus("canCreategroupsfileslastModifiedByUserCalendars")));
        this.addTest(canGetgroupsfileslastModifiedByUserCalendarsCalendarView("Can get groupsfileslastModifiedByUserCalendarsCalendarView", getTestStatus("canGetgroupsfileslastModifiedByUserCalendarsCalendarView")));
        this.addTest(canCreategroupsfileslastModifiedByUserCalendarsCalendarView("Can create canCreategroupsfileslastModifiedByUserCalendarsCalendarView", getTestStatus("canCreategroupsfileslastModifiedByUserCalendarsCalendarView")));
        this.addTest(canGetgroupsfileslastModifiedByUserCalendarsCalendarViewAttachments("Can get groupsfileslastModifiedByUserCalendarsCalendarViewAttachments", getTestStatus("canGetgroupsfileslastModifiedByUserCalendarsCalendarViewAttachments")));
        this.addTest(canCreategroupsfileslastModifiedByUserCalendarsCalendarViewAttachments("Can create canCreategroupsfileslastModifiedByUserCalendarsCalendarViewAttachments", getTestStatus("canCreategroupsfileslastModifiedByUserCalendarsCalendarViewAttachments")));
        this.addTest(canGetgroupsfileslastModifiedByUserCalendarsCalendarViewInstances("Can get groupsfileslastModifiedByUserCalendarsCalendarViewInstances", getTestStatus("canGetgroupsfileslastModifiedByUserCalendarsCalendarViewInstances")));
        this.addTest(canCreategroupsfileslastModifiedByUserCalendarsCalendarViewInstances("Can create canCreategroupsfileslastModifiedByUserCalendarsCalendarViewInstances", getTestStatus("canCreategroupsfileslastModifiedByUserCalendarsCalendarViewInstances")));
        this.addTest(canGetgroupsfileslastModifiedByUserCalendarsCalendarViewInstancesAttachments("Can get groupsfileslastModifiedByUserCalendarsCalendarViewInstancesAttachments", getTestStatus("canGetgroupsfileslastModifiedByUserCalendarsCalendarViewInstancesAttachments")));
        this.addTest(canCreategroupsfileslastModifiedByUserCalendarsCalendarViewInstancesAttachments("Can create canCreategroupsfileslastModifiedByUserCalendarsCalendarViewInstancesAttachments", getTestStatus("canCreategroupsfileslastModifiedByUserCalendarsCalendarViewInstancesAttachments")));
        this.addTest(canGetgroupsfileslastModifiedByUserCalendarsEvents("Can get groupsfileslastModifiedByUserCalendarsEvents", getTestStatus("canGetgroupsfileslastModifiedByUserCalendarsEvents")));
        this.addTest(canCreategroupsfileslastModifiedByUserCalendarsEvents("Can create canCreategroupsfileslastModifiedByUserCalendarsEvents", getTestStatus("canCreategroupsfileslastModifiedByUserCalendarsEvents")));
        this.addTest(canGetgroupsfileslastModifiedByUserCalendarsEventsAttachments("Can get groupsfileslastModifiedByUserCalendarsEventsAttachments", getTestStatus("canGetgroupsfileslastModifiedByUserCalendarsEventsAttachments")));
        this.addTest(canCreategroupsfileslastModifiedByUserCalendarsEventsAttachments("Can create canCreategroupsfileslastModifiedByUserCalendarsEventsAttachments", getTestStatus("canCreategroupsfileslastModifiedByUserCalendarsEventsAttachments")));
        this.addTest(canGetgroupsfileslastModifiedByUserCalendarsEventsInstances("Can get groupsfileslastModifiedByUserCalendarsEventsInstances", getTestStatus("canGetgroupsfileslastModifiedByUserCalendarsEventsInstances")));
        this.addTest(canCreategroupsfileslastModifiedByUserCalendarsEventsInstances("Can create canCreategroupsfileslastModifiedByUserCalendarsEventsInstances", getTestStatus("canCreategroupsfileslastModifiedByUserCalendarsEventsInstances")));
        this.addTest(canGetgroupsfileslastModifiedByUserCalendarsEventsInstancesAttachments("Can get groupsfileslastModifiedByUserCalendarsEventsInstancesAttachments", getTestStatus("canGetgroupsfileslastModifiedByUserCalendarsEventsInstancesAttachments")));
        this.addTest(canCreategroupsfileslastModifiedByUserCalendarsEventsInstancesAttachments("Can create canCreategroupsfileslastModifiedByUserCalendarsEventsInstancesAttachments", getTestStatus("canCreategroupsfileslastModifiedByUserCalendarsEventsInstancesAttachments")));
        this.addTest(canGetgroupsfileslastModifiedByUserCalendar("Can get groupsfileslastModifiedByUserCalendar", getTestStatus("canGetgroupsfileslastModifiedByUserCalendar")));
        this.addTest(canGetgroupsfileslastModifiedByUserCalendarCalendarView("Can get groupsfileslastModifiedByUserCalendarCalendarView", getTestStatus("canGetgroupsfileslastModifiedByUserCalendarCalendarView")));
        this.addTest(canCreategroupsfileslastModifiedByUserCalendarCalendarView("Can create canCreategroupsfileslastModifiedByUserCalendarCalendarView", getTestStatus("canCreategroupsfileslastModifiedByUserCalendarCalendarView")));
        this.addTest(canGetgroupsfileslastModifiedByUserCalendarCalendarViewAttachments("Can get groupsfileslastModifiedByUserCalendarCalendarViewAttachments", getTestStatus("canGetgroupsfileslastModifiedByUserCalendarCalendarViewAttachments")));
        this.addTest(canCreategroupsfileslastModifiedByUserCalendarCalendarViewAttachments("Can create canCreategroupsfileslastModifiedByUserCalendarCalendarViewAttachments", getTestStatus("canCreategroupsfileslastModifiedByUserCalendarCalendarViewAttachments")));
        this.addTest(canGetgroupsfileslastModifiedByUserCalendarCalendarViewInstances("Can get groupsfileslastModifiedByUserCalendarCalendarViewInstances", getTestStatus("canGetgroupsfileslastModifiedByUserCalendarCalendarViewInstances")));
        this.addTest(canCreategroupsfileslastModifiedByUserCalendarCalendarViewInstances("Can create canCreategroupsfileslastModifiedByUserCalendarCalendarViewInstances", getTestStatus("canCreategroupsfileslastModifiedByUserCalendarCalendarViewInstances")));
        this.addTest(canGetgroupsfileslastModifiedByUserCalendarCalendarViewInstancesAttachments("Can get groupsfileslastModifiedByUserCalendarCalendarViewInstancesAttachments", getTestStatus("canGetgroupsfileslastModifiedByUserCalendarCalendarViewInstancesAttachments")));
        this.addTest(canCreategroupsfileslastModifiedByUserCalendarCalendarViewInstancesAttachments("Can create canCreategroupsfileslastModifiedByUserCalendarCalendarViewInstancesAttachments", getTestStatus("canCreategroupsfileslastModifiedByUserCalendarCalendarViewInstancesAttachments")));
        this.addTest(canGetgroupsfileslastModifiedByUserCalendarEvents("Can get groupsfileslastModifiedByUserCalendarEvents", getTestStatus("canGetgroupsfileslastModifiedByUserCalendarEvents")));
        this.addTest(canCreategroupsfileslastModifiedByUserCalendarEvents("Can create canCreategroupsfileslastModifiedByUserCalendarEvents", getTestStatus("canCreategroupsfileslastModifiedByUserCalendarEvents")));
        this.addTest(canGetgroupsfileslastModifiedByUserCalendarEventsAttachments("Can get groupsfileslastModifiedByUserCalendarEventsAttachments", getTestStatus("canGetgroupsfileslastModifiedByUserCalendarEventsAttachments")));
        this.addTest(canCreategroupsfileslastModifiedByUserCalendarEventsAttachments("Can create canCreategroupsfileslastModifiedByUserCalendarEventsAttachments", getTestStatus("canCreategroupsfileslastModifiedByUserCalendarEventsAttachments")));
        this.addTest(canGetgroupsfileslastModifiedByUserCalendarEventsInstances("Can get groupsfileslastModifiedByUserCalendarEventsInstances", getTestStatus("canGetgroupsfileslastModifiedByUserCalendarEventsInstances")));
        this.addTest(canCreategroupsfileslastModifiedByUserCalendarEventsInstances("Can create canCreategroupsfileslastModifiedByUserCalendarEventsInstances", getTestStatus("canCreategroupsfileslastModifiedByUserCalendarEventsInstances")));
        this.addTest(canGetgroupsfileslastModifiedByUserCalendarEventsInstancesAttachments("Can get groupsfileslastModifiedByUserCalendarEventsInstancesAttachments", getTestStatus("canGetgroupsfileslastModifiedByUserCalendarEventsInstancesAttachments")));
        this.addTest(canCreategroupsfileslastModifiedByUserCalendarEventsInstancesAttachments("Can create canCreategroupsfileslastModifiedByUserCalendarEventsInstancesAttachments", getTestStatus("canCreategroupsfileslastModifiedByUserCalendarEventsInstancesAttachments")));
        this.addTest(canGetgroupsfileslastModifiedByUserCalendarGroups("Can get groupsfileslastModifiedByUserCalendarGroups", getTestStatus("canGetgroupsfileslastModifiedByUserCalendarGroups")));
        this.addTest(canCreategroupsfileslastModifiedByUserCalendarGroups("Can create canCreategroupsfileslastModifiedByUserCalendarGroups", getTestStatus("canCreategroupsfileslastModifiedByUserCalendarGroups")));
        this.addTest(canGetgroupsfileslastModifiedByUserCalendarGroupsCalendars("Can get groupsfileslastModifiedByUserCalendarGroupsCalendars", getTestStatus("canGetgroupsfileslastModifiedByUserCalendarGroupsCalendars")));
        this.addTest(canCreategroupsfileslastModifiedByUserCalendarGroupsCalendars("Can create canCreategroupsfileslastModifiedByUserCalendarGroupsCalendars", getTestStatus("canCreategroupsfileslastModifiedByUserCalendarGroupsCalendars")));
        this.addTest(canGetgroupsfileslastModifiedByUserCalendarGroupsCalendarsCalendarView("Can get groupsfileslastModifiedByUserCalendarGroupsCalendarsCalendarView", getTestStatus("canGetgroupsfileslastModifiedByUserCalendarGroupsCalendarsCalendarView")));
        this.addTest(canCreategroupsfileslastModifiedByUserCalendarGroupsCalendarsCalendarView("Can create canCreategroupsfileslastModifiedByUserCalendarGroupsCalendarsCalendarView", getTestStatus("canCreategroupsfileslastModifiedByUserCalendarGroupsCalendarsCalendarView")));
        this.addTest(canGetgroupsfileslastModifiedByUserCalendarGroupsCalendarsCalendarViewAttachments("Can get groupsfileslastModifiedByUserCalendarGroupsCalendarsCalendarViewAttachments", getTestStatus("canGetgroupsfileslastModifiedByUserCalendarGroupsCalendarsCalendarViewAttachments")));
        this.addTest(canCreategroupsfileslastModifiedByUserCalendarGroupsCalendarsCalendarViewAttachments("Can create canCreategroupsfileslastModifiedByUserCalendarGroupsCalendarsCalendarViewAttachments", getTestStatus("canCreategroupsfileslastModifiedByUserCalendarGroupsCalendarsCalendarViewAttachments")));
        this.addTest(canGetgroupsfileslastModifiedByUserCalendarGroupsCalendarsCalendarViewInstances("Can get groupsfileslastModifiedByUserCalendarGroupsCalendarsCalendarViewInstances", getTestStatus("canGetgroupsfileslastModifiedByUserCalendarGroupsCalendarsCalendarViewInstances")));
        this.addTest(canCreategroupsfileslastModifiedByUserCalendarGroupsCalendarsCalendarViewInstances("Can create canCreategroupsfileslastModifiedByUserCalendarGroupsCalendarsCalendarViewInstances", getTestStatus("canCreategroupsfileslastModifiedByUserCalendarGroupsCalendarsCalendarViewInstances")));
        this.addTest(canGetgroupsfileslastModifiedByUserCalendarGroupsCalendarsCalendarViewInstancesAttachments("Can get groupsfileslastModifiedByUserCalendarGroupsCalendarsCalendarViewInstancesAttachments", getTestStatus("canGetgroupsfileslastModifiedByUserCalendarGroupsCalendarsCalendarViewInstancesAttachments")));
        this.addTest(canCreategroupsfileslastModifiedByUserCalendarGroupsCalendarsCalendarViewInstancesAttachments("Can create canCreategroupsfileslastModifiedByUserCalendarGroupsCalendarsCalendarViewInstancesAttachments", getTestStatus("canCreategroupsfileslastModifiedByUserCalendarGroupsCalendarsCalendarViewInstancesAttachments")));
        this.addTest(canGetgroupsfileslastModifiedByUserCalendarGroupsCalendarsEvents("Can get groupsfileslastModifiedByUserCalendarGroupsCalendarsEvents", getTestStatus("canGetgroupsfileslastModifiedByUserCalendarGroupsCalendarsEvents")));
        this.addTest(canCreategroupsfileslastModifiedByUserCalendarGroupsCalendarsEvents("Can create canCreategroupsfileslastModifiedByUserCalendarGroupsCalendarsEvents", getTestStatus("canCreategroupsfileslastModifiedByUserCalendarGroupsCalendarsEvents")));
        this.addTest(canGetgroupsfileslastModifiedByUserCalendarGroupsCalendarsEventsAttachments("Can get groupsfileslastModifiedByUserCalendarGroupsCalendarsEventsAttachments", getTestStatus("canGetgroupsfileslastModifiedByUserCalendarGroupsCalendarsEventsAttachments")));
        this.addTest(canCreategroupsfileslastModifiedByUserCalendarGroupsCalendarsEventsAttachments("Can create canCreategroupsfileslastModifiedByUserCalendarGroupsCalendarsEventsAttachments", getTestStatus("canCreategroupsfileslastModifiedByUserCalendarGroupsCalendarsEventsAttachments")));
        this.addTest(canGetgroupsfileslastModifiedByUserCalendarGroupsCalendarsEventsInstances("Can get groupsfileslastModifiedByUserCalendarGroupsCalendarsEventsInstances", getTestStatus("canGetgroupsfileslastModifiedByUserCalendarGroupsCalendarsEventsInstances")));
        this.addTest(canCreategroupsfileslastModifiedByUserCalendarGroupsCalendarsEventsInstances("Can create canCreategroupsfileslastModifiedByUserCalendarGroupsCalendarsEventsInstances", getTestStatus("canCreategroupsfileslastModifiedByUserCalendarGroupsCalendarsEventsInstances")));
        this.addTest(canGetgroupsfileslastModifiedByUserCalendarGroupsCalendarsEventsInstancesAttachments("Can get groupsfileslastModifiedByUserCalendarGroupsCalendarsEventsInstancesAttachments", getTestStatus("canGetgroupsfileslastModifiedByUserCalendarGroupsCalendarsEventsInstancesAttachments")));
        this.addTest(canCreategroupsfileslastModifiedByUserCalendarGroupsCalendarsEventsInstancesAttachments("Can create canCreategroupsfileslastModifiedByUserCalendarGroupsCalendarsEventsInstancesAttachments", getTestStatus("canCreategroupsfileslastModifiedByUserCalendarGroupsCalendarsEventsInstancesAttachments")));
        this.addTest(canGetgroupsfileslastModifiedByUserEvents("Can get groupsfileslastModifiedByUserEvents", getTestStatus("canGetgroupsfileslastModifiedByUserEvents")));
        this.addTest(canCreategroupsfileslastModifiedByUserEvents("Can create canCreategroupsfileslastModifiedByUserEvents", getTestStatus("canCreategroupsfileslastModifiedByUserEvents")));
        this.addTest(canGetgroupsfileslastModifiedByUserEventsAttachments("Can get groupsfileslastModifiedByUserEventsAttachments", getTestStatus("canGetgroupsfileslastModifiedByUserEventsAttachments")));
        this.addTest(canCreategroupsfileslastModifiedByUserEventsAttachments("Can create canCreategroupsfileslastModifiedByUserEventsAttachments", getTestStatus("canCreategroupsfileslastModifiedByUserEventsAttachments")));
        this.addTest(canGetgroupsfileslastModifiedByUserEventsCalendar("Can get groupsfileslastModifiedByUserEventsCalendar", getTestStatus("canGetgroupsfileslastModifiedByUserEventsCalendar")));
        this.addTest(canGetgroupsfileslastModifiedByUserEventsInstances("Can get groupsfileslastModifiedByUserEventsInstances", getTestStatus("canGetgroupsfileslastModifiedByUserEventsInstances")));
        this.addTest(canCreategroupsfileslastModifiedByUserEventsInstances("Can create canCreategroupsfileslastModifiedByUserEventsInstances", getTestStatus("canCreategroupsfileslastModifiedByUserEventsInstances")));
        this.addTest(canGetgroupsfileslastModifiedByUserEventsInstancesAttachments("Can get groupsfileslastModifiedByUserEventsInstancesAttachments", getTestStatus("canGetgroupsfileslastModifiedByUserEventsInstancesAttachments")));
        this.addTest(canCreategroupsfileslastModifiedByUserEventsInstancesAttachments("Can create canCreategroupsfileslastModifiedByUserEventsInstancesAttachments", getTestStatus("canCreategroupsfileslastModifiedByUserEventsInstancesAttachments")));
        this.addTest(canGetgroupsfileslastModifiedByUserEventsInstancesCalendar("Can get groupsfileslastModifiedByUserEventsInstancesCalendar", getTestStatus("canGetgroupsfileslastModifiedByUserEventsInstancesCalendar")));
        this.addTest(canGetgroupsfileslastModifiedByUserCalendarView("Can get groupsfileslastModifiedByUserCalendarView", getTestStatus("canGetgroupsfileslastModifiedByUserCalendarView")));
        this.addTest(canCreategroupsfileslastModifiedByUserCalendarView("Can create canCreategroupsfileslastModifiedByUserCalendarView", getTestStatus("canCreategroupsfileslastModifiedByUserCalendarView")));
        this.addTest(canGetgroupsfileslastModifiedByUserCalendarViewAttachments("Can get groupsfileslastModifiedByUserCalendarViewAttachments", getTestStatus("canGetgroupsfileslastModifiedByUserCalendarViewAttachments")));
        this.addTest(canCreategroupsfileslastModifiedByUserCalendarViewAttachments("Can create canCreategroupsfileslastModifiedByUserCalendarViewAttachments", getTestStatus("canCreategroupsfileslastModifiedByUserCalendarViewAttachments")));
        this.addTest(canGetgroupsfileslastModifiedByUserCalendarViewCalendar("Can get groupsfileslastModifiedByUserCalendarViewCalendar", getTestStatus("canGetgroupsfileslastModifiedByUserCalendarViewCalendar")));
        this.addTest(canGetgroupsfileslastModifiedByUserCalendarViewInstances("Can get groupsfileslastModifiedByUserCalendarViewInstances", getTestStatus("canGetgroupsfileslastModifiedByUserCalendarViewInstances")));
        this.addTest(canCreategroupsfileslastModifiedByUserCalendarViewInstances("Can create canCreategroupsfileslastModifiedByUserCalendarViewInstances", getTestStatus("canCreategroupsfileslastModifiedByUserCalendarViewInstances")));
        this.addTest(canGetgroupsfileslastModifiedByUserCalendarViewInstancesAttachments("Can get groupsfileslastModifiedByUserCalendarViewInstancesAttachments", getTestStatus("canGetgroupsfileslastModifiedByUserCalendarViewInstancesAttachments")));
        this.addTest(canCreategroupsfileslastModifiedByUserCalendarViewInstancesAttachments("Can create canCreategroupsfileslastModifiedByUserCalendarViewInstancesAttachments", getTestStatus("canCreategroupsfileslastModifiedByUserCalendarViewInstancesAttachments")));
        this.addTest(canGetgroupsfileslastModifiedByUserCalendarViewInstancesCalendar("Can get groupsfileslastModifiedByUserCalendarViewInstancesCalendar", getTestStatus("canGetgroupsfileslastModifiedByUserCalendarViewInstancesCalendar")));
        this.addTest(canGetgroupsfileslastModifiedByUserUserPhoto("Can get groupsfileslastModifiedByUserUserPhoto", getTestStatus("canGetgroupsfileslastModifiedByUserUserPhoto")));
        this.addTest(canGetgroupsfileslastModifiedByUserUserPhotos("Can get groupsfileslastModifiedByUserUserPhotos", getTestStatus("canGetgroupsfileslastModifiedByUserUserPhotos")));
        this.addTest(canCreategroupsfileslastModifiedByUserUserPhotos("Can create canCreategroupsfileslastModifiedByUserUserPhotos", getTestStatus("canCreategroupsfileslastModifiedByUserUserPhotos")));
        this.addTest(canGetgroupsfileslastModifiedByUserdrive("Can get groupsfileslastModifiedByUserdrive", getTestStatus("canGetgroupsfileslastModifiedByUserdrive")));
        this.addTest(canGetgroupsfileschildren("Can get groupsfileschildren", getTestStatus("canGetgroupsfileschildren")));
        this.addTest(canCreategroupsfileschildren("Can create canCreategroupsfileschildren", getTestStatus("canCreategroupsfileschildren")));
        this.addTest(canGetgroupsfileschildrencreatedByUser("Can get groupsfileschildrencreatedByUser", getTestStatus("canGetgroupsfileschildrencreatedByUser")));
        this.addTest(canGetgroupsfileschildrencreatedByUserappRoleAssignments("Can get groupsfileschildrencreatedByUserappRoleAssignments", getTestStatus("canGetgroupsfileschildrencreatedByUserappRoleAssignments")));
        this.addTest(canCreategroupsfileschildrencreatedByUserappRoleAssignments("Can create canCreategroupsfileschildrencreatedByUserappRoleAssignments", getTestStatus("canCreategroupsfileschildrencreatedByUserappRoleAssignments")));
        this.addTest(canGetgroupsfileschildrencreatedByUseroauth2PermissionGrants("Can get groupsfileschildrencreatedByUseroauth2PermissionGrants", getTestStatus("canGetgroupsfileschildrencreatedByUseroauth2PermissionGrants")));
        this.addTest(canCreategroupsfileschildrencreatedByUseroauth2PermissionGrants("Can create canCreategroupsfileschildrencreatedByUseroauth2PermissionGrants", getTestStatus("canCreategroupsfileschildrencreatedByUseroauth2PermissionGrants")));
        this.addTest(canGetgroupsfileschildrencreatedByUserownedDevices("Can get groupsfileschildrencreatedByUserownedDevices", getTestStatus("canGetgroupsfileschildrencreatedByUserownedDevices")));
        this.addTest(canCreategroupsfileschildrencreatedByUserownedDevices("Can create canCreategroupsfileschildrencreatedByUserownedDevices", getTestStatus("canCreategroupsfileschildrencreatedByUserownedDevices")));
        this.addTest(canGetgroupsfileschildrencreatedByUserregisteredDevices("Can get groupsfileschildrencreatedByUserregisteredDevices", getTestStatus("canGetgroupsfileschildrencreatedByUserregisteredDevices")));
        this.addTest(canCreategroupsfileschildrencreatedByUserregisteredDevices("Can create canCreategroupsfileschildrencreatedByUserregisteredDevices", getTestStatus("canCreategroupsfileschildrencreatedByUserregisteredDevices")));
        this.addTest(canGetgroupsfileschildrencreatedByUsermanager("Can get groupsfileschildrencreatedByUsermanager", getTestStatus("canGetgroupsfileschildrencreatedByUsermanager")));
        this.addTest(canGetgroupsfileschildrencreatedByUserdirectReports("Can get groupsfileschildrencreatedByUserdirectReports", getTestStatus("canGetgroupsfileschildrencreatedByUserdirectReports")));
        this.addTest(canCreategroupsfileschildrencreatedByUserdirectReports("Can create canCreategroupsfileschildrencreatedByUserdirectReports", getTestStatus("canCreategroupsfileschildrencreatedByUserdirectReports")));
        this.addTest(canGetgroupsfileschildrencreatedByUsermemberOf("Can get groupsfileschildrencreatedByUsermemberOf", getTestStatus("canGetgroupsfileschildrencreatedByUsermemberOf")));
        this.addTest(canCreategroupsfileschildrencreatedByUsermemberOf("Can create canCreategroupsfileschildrencreatedByUsermemberOf", getTestStatus("canCreategroupsfileschildrencreatedByUsermemberOf")));
        this.addTest(canGetgroupsfileschildrencreatedByUsercreatedObjects("Can get groupsfileschildrencreatedByUsercreatedObjects", getTestStatus("canGetgroupsfileschildrencreatedByUsercreatedObjects")));
        this.addTest(canCreategroupsfileschildrencreatedByUsercreatedObjects("Can create canCreategroupsfileschildrencreatedByUsercreatedObjects", getTestStatus("canCreategroupsfileschildrencreatedByUsercreatedObjects")));
        this.addTest(canGetgroupsfileschildrencreatedByUserownedObjects("Can get groupsfileschildrencreatedByUserownedObjects", getTestStatus("canGetgroupsfileschildrencreatedByUserownedObjects")));
        this.addTest(canCreategroupsfileschildrencreatedByUserownedObjects("Can create canCreategroupsfileschildrencreatedByUserownedObjects", getTestStatus("canCreategroupsfileschildrencreatedByUserownedObjects")));
        this.addTest(canGetgroupsfileschildrencreatedByUserMessages("Can get groupsfileschildrencreatedByUserMessages", getTestStatus("canGetgroupsfileschildrencreatedByUserMessages")));
        this.addTest(canCreategroupsfileschildrencreatedByUserMessages("Can create canCreategroupsfileschildrencreatedByUserMessages", getTestStatus("canCreategroupsfileschildrencreatedByUserMessages")));
        this.addTest(canGetgroupsfileschildrencreatedByUserMessagesAttachments("Can get groupsfileschildrencreatedByUserMessagesAttachments", getTestStatus("canGetgroupsfileschildrencreatedByUserMessagesAttachments")));
        this.addTest(canCreategroupsfileschildrencreatedByUserMessagesAttachments("Can create canCreategroupsfileschildrencreatedByUserMessagesAttachments", getTestStatus("canCreategroupsfileschildrencreatedByUserMessagesAttachments")));
        this.addTest(canGetgroupsfileschildrencreatedByUserCalendars("Can get groupsfileschildrencreatedByUserCalendars", getTestStatus("canGetgroupsfileschildrencreatedByUserCalendars")));
        this.addTest(canCreategroupsfileschildrencreatedByUserCalendars("Can create canCreategroupsfileschildrencreatedByUserCalendars", getTestStatus("canCreategroupsfileschildrencreatedByUserCalendars")));
        this.addTest(canGetgroupsfileschildrencreatedByUserCalendarsCalendarView("Can get groupsfileschildrencreatedByUserCalendarsCalendarView", getTestStatus("canGetgroupsfileschildrencreatedByUserCalendarsCalendarView")));
        this.addTest(canCreategroupsfileschildrencreatedByUserCalendarsCalendarView("Can create canCreategroupsfileschildrencreatedByUserCalendarsCalendarView", getTestStatus("canCreategroupsfileschildrencreatedByUserCalendarsCalendarView")));
        this.addTest(canGetgroupsfileschildrencreatedByUserCalendarsCalendarViewAttachments("Can get groupsfileschildrencreatedByUserCalendarsCalendarViewAttachments", getTestStatus("canGetgroupsfileschildrencreatedByUserCalendarsCalendarViewAttachments")));
        this.addTest(canCreategroupsfileschildrencreatedByUserCalendarsCalendarViewAttachments("Can create canCreategroupsfileschildrencreatedByUserCalendarsCalendarViewAttachments", getTestStatus("canCreategroupsfileschildrencreatedByUserCalendarsCalendarViewAttachments")));
        this.addTest(canGetgroupsfileschildrencreatedByUserCalendarsCalendarViewInstances("Can get groupsfileschildrencreatedByUserCalendarsCalendarViewInstances", getTestStatus("canGetgroupsfileschildrencreatedByUserCalendarsCalendarViewInstances")));
        this.addTest(canCreategroupsfileschildrencreatedByUserCalendarsCalendarViewInstances("Can create canCreategroupsfileschildrencreatedByUserCalendarsCalendarViewInstances", getTestStatus("canCreategroupsfileschildrencreatedByUserCalendarsCalendarViewInstances")));
        this.addTest(canGetgroupsfileschildrencreatedByUserCalendarsCalendarViewInstancesAttachments("Can get groupsfileschildrencreatedByUserCalendarsCalendarViewInstancesAttachments", getTestStatus("canGetgroupsfileschildrencreatedByUserCalendarsCalendarViewInstancesAttachments")));
        this.addTest(canCreategroupsfileschildrencreatedByUserCalendarsCalendarViewInstancesAttachments("Can create canCreategroupsfileschildrencreatedByUserCalendarsCalendarViewInstancesAttachments", getTestStatus("canCreategroupsfileschildrencreatedByUserCalendarsCalendarViewInstancesAttachments")));
        this.addTest(canGetgroupsfileschildrencreatedByUserCalendarsEvents("Can get groupsfileschildrencreatedByUserCalendarsEvents", getTestStatus("canGetgroupsfileschildrencreatedByUserCalendarsEvents")));
        this.addTest(canCreategroupsfileschildrencreatedByUserCalendarsEvents("Can create canCreategroupsfileschildrencreatedByUserCalendarsEvents", getTestStatus("canCreategroupsfileschildrencreatedByUserCalendarsEvents")));
        this.addTest(canGetgroupsfileschildrencreatedByUserCalendarsEventsAttachments("Can get groupsfileschildrencreatedByUserCalendarsEventsAttachments", getTestStatus("canGetgroupsfileschildrencreatedByUserCalendarsEventsAttachments")));
        this.addTest(canCreategroupsfileschildrencreatedByUserCalendarsEventsAttachments("Can create canCreategroupsfileschildrencreatedByUserCalendarsEventsAttachments", getTestStatus("canCreategroupsfileschildrencreatedByUserCalendarsEventsAttachments")));
        this.addTest(canGetgroupsfileschildrencreatedByUserCalendarsEventsInstances("Can get groupsfileschildrencreatedByUserCalendarsEventsInstances", getTestStatus("canGetgroupsfileschildrencreatedByUserCalendarsEventsInstances")));
        this.addTest(canCreategroupsfileschildrencreatedByUserCalendarsEventsInstances("Can create canCreategroupsfileschildrencreatedByUserCalendarsEventsInstances", getTestStatus("canCreategroupsfileschildrencreatedByUserCalendarsEventsInstances")));
        this.addTest(canGetgroupsfileschildrencreatedByUserCalendarsEventsInstancesAttachments("Can get groupsfileschildrencreatedByUserCalendarsEventsInstancesAttachments", getTestStatus("canGetgroupsfileschildrencreatedByUserCalendarsEventsInstancesAttachments")));
        this.addTest(canCreategroupsfileschildrencreatedByUserCalendarsEventsInstancesAttachments("Can create canCreategroupsfileschildrencreatedByUserCalendarsEventsInstancesAttachments", getTestStatus("canCreategroupsfileschildrencreatedByUserCalendarsEventsInstancesAttachments")));
        this.addTest(canGetgroupsfileschildrencreatedByUserCalendar("Can get groupsfileschildrencreatedByUserCalendar", getTestStatus("canGetgroupsfileschildrencreatedByUserCalendar")));
        this.addTest(canGetgroupsfileschildrencreatedByUserCalendarCalendarView("Can get groupsfileschildrencreatedByUserCalendarCalendarView", getTestStatus("canGetgroupsfileschildrencreatedByUserCalendarCalendarView")));
        this.addTest(canCreategroupsfileschildrencreatedByUserCalendarCalendarView("Can create canCreategroupsfileschildrencreatedByUserCalendarCalendarView", getTestStatus("canCreategroupsfileschildrencreatedByUserCalendarCalendarView")));
        this.addTest(canGetgroupsfileschildrencreatedByUserCalendarCalendarViewAttachments("Can get groupsfileschildrencreatedByUserCalendarCalendarViewAttachments", getTestStatus("canGetgroupsfileschildrencreatedByUserCalendarCalendarViewAttachments")));
        this.addTest(canCreategroupsfileschildrencreatedByUserCalendarCalendarViewAttachments("Can create canCreategroupsfileschildrencreatedByUserCalendarCalendarViewAttachments", getTestStatus("canCreategroupsfileschildrencreatedByUserCalendarCalendarViewAttachments")));
        this.addTest(canGetgroupsfileschildrencreatedByUserCalendarCalendarViewInstances("Can get groupsfileschildrencreatedByUserCalendarCalendarViewInstances", getTestStatus("canGetgroupsfileschildrencreatedByUserCalendarCalendarViewInstances")));
        this.addTest(canCreategroupsfileschildrencreatedByUserCalendarCalendarViewInstances("Can create canCreategroupsfileschildrencreatedByUserCalendarCalendarViewInstances", getTestStatus("canCreategroupsfileschildrencreatedByUserCalendarCalendarViewInstances")));
        this.addTest(canGetgroupsfileschildrencreatedByUserCalendarCalendarViewInstancesAttachments("Can get groupsfileschildrencreatedByUserCalendarCalendarViewInstancesAttachments", getTestStatus("canGetgroupsfileschildrencreatedByUserCalendarCalendarViewInstancesAttachments")));
        this.addTest(canCreategroupsfileschildrencreatedByUserCalendarCalendarViewInstancesAttachments("Can create canCreategroupsfileschildrencreatedByUserCalendarCalendarViewInstancesAttachments", getTestStatus("canCreategroupsfileschildrencreatedByUserCalendarCalendarViewInstancesAttachments")));
        this.addTest(canGetgroupsfileschildrencreatedByUserCalendarEvents("Can get groupsfileschildrencreatedByUserCalendarEvents", getTestStatus("canGetgroupsfileschildrencreatedByUserCalendarEvents")));
        this.addTest(canCreategroupsfileschildrencreatedByUserCalendarEvents("Can create canCreategroupsfileschildrencreatedByUserCalendarEvents", getTestStatus("canCreategroupsfileschildrencreatedByUserCalendarEvents")));
        this.addTest(canGetgroupsfileschildrencreatedByUserCalendarEventsAttachments("Can get groupsfileschildrencreatedByUserCalendarEventsAttachments", getTestStatus("canGetgroupsfileschildrencreatedByUserCalendarEventsAttachments")));
        this.addTest(canCreategroupsfileschildrencreatedByUserCalendarEventsAttachments("Can create canCreategroupsfileschildrencreatedByUserCalendarEventsAttachments", getTestStatus("canCreategroupsfileschildrencreatedByUserCalendarEventsAttachments")));
        this.addTest(canGetgroupsfileschildrencreatedByUserCalendarEventsInstances("Can get groupsfileschildrencreatedByUserCalendarEventsInstances", getTestStatus("canGetgroupsfileschildrencreatedByUserCalendarEventsInstances")));
        this.addTest(canCreategroupsfileschildrencreatedByUserCalendarEventsInstances("Can create canCreategroupsfileschildrencreatedByUserCalendarEventsInstances", getTestStatus("canCreategroupsfileschildrencreatedByUserCalendarEventsInstances")));
        this.addTest(canGetgroupsfileschildrencreatedByUserCalendarEventsInstancesAttachments("Can get groupsfileschildrencreatedByUserCalendarEventsInstancesAttachments", getTestStatus("canGetgroupsfileschildrencreatedByUserCalendarEventsInstancesAttachments")));
        this.addTest(canCreategroupsfileschildrencreatedByUserCalendarEventsInstancesAttachments("Can create canCreategroupsfileschildrencreatedByUserCalendarEventsInstancesAttachments", getTestStatus("canCreategroupsfileschildrencreatedByUserCalendarEventsInstancesAttachments")));
        this.addTest(canGetgroupsfileschildrencreatedByUserCalendarGroups("Can get groupsfileschildrencreatedByUserCalendarGroups", getTestStatus("canGetgroupsfileschildrencreatedByUserCalendarGroups")));
        this.addTest(canCreategroupsfileschildrencreatedByUserCalendarGroups("Can create canCreategroupsfileschildrencreatedByUserCalendarGroups", getTestStatus("canCreategroupsfileschildrencreatedByUserCalendarGroups")));
        this.addTest(canGetgroupsfileschildrencreatedByUserCalendarGroupsCalendars("Can get groupsfileschildrencreatedByUserCalendarGroupsCalendars", getTestStatus("canGetgroupsfileschildrencreatedByUserCalendarGroupsCalendars")));
        this.addTest(canCreategroupsfileschildrencreatedByUserCalendarGroupsCalendars("Can create canCreategroupsfileschildrencreatedByUserCalendarGroupsCalendars", getTestStatus("canCreategroupsfileschildrencreatedByUserCalendarGroupsCalendars")));
        this.addTest(canGetgroupsfileschildrencreatedByUserCalendarGroupsCalendarsCalendarView("Can get groupsfileschildrencreatedByUserCalendarGroupsCalendarsCalendarView", getTestStatus("canGetgroupsfileschildrencreatedByUserCalendarGroupsCalendarsCalendarView")));
        this.addTest(canCreategroupsfileschildrencreatedByUserCalendarGroupsCalendarsCalendarView("Can create canCreategroupsfileschildrencreatedByUserCalendarGroupsCalendarsCalendarView", getTestStatus("canCreategroupsfileschildrencreatedByUserCalendarGroupsCalendarsCalendarView")));
        this.addTest(canGetgroupsfileschildrencreatedByUserCalendarGroupsCalendarsCalendarViewAttachments("Can get groupsfileschildrencreatedByUserCalendarGroupsCalendarsCalendarViewAttachments", getTestStatus("canGetgroupsfileschildrencreatedByUserCalendarGroupsCalendarsCalendarViewAttachments")));
        this.addTest(canCreategroupsfileschildrencreatedByUserCalendarGroupsCalendarsCalendarViewAttachments("Can create canCreategroupsfileschildrencreatedByUserCalendarGroupsCalendarsCalendarViewAttachments", getTestStatus("canCreategroupsfileschildrencreatedByUserCalendarGroupsCalendarsCalendarViewAttachments")));
        this.addTest(canGetgroupsfileschildrencreatedByUserCalendarGroupsCalendarsCalendarViewInstances("Can get groupsfileschildrencreatedByUserCalendarGroupsCalendarsCalendarViewInstances", getTestStatus("canGetgroupsfileschildrencreatedByUserCalendarGroupsCalendarsCalendarViewInstances")));
        this.addTest(canCreategroupsfileschildrencreatedByUserCalendarGroupsCalendarsCalendarViewInstances("Can create canCreategroupsfileschildrencreatedByUserCalendarGroupsCalendarsCalendarViewInstances", getTestStatus("canCreategroupsfileschildrencreatedByUserCalendarGroupsCalendarsCalendarViewInstances")));
        this.addTest(canGetgroupsfileschildrencreatedByUserCalendarGroupsCalendarsCalendarViewInstancesAttachments("Can get groupsfileschildrencreatedByUserCalendarGroupsCalendarsCalendarViewInstancesAttachments", getTestStatus("canGetgroupsfileschildrencreatedByUserCalendarGroupsCalendarsCalendarViewInstancesAttachments")));
        this.addTest(canCreategroupsfileschildrencreatedByUserCalendarGroupsCalendarsCalendarViewInstancesAttachments("Can create canCreategroupsfileschildrencreatedByUserCalendarGroupsCalendarsCalendarViewInstancesAttachments", getTestStatus("canCreategroupsfileschildrencreatedByUserCalendarGroupsCalendarsCalendarViewInstancesAttachments")));
        this.addTest(canGetgroupsfileschildrencreatedByUserCalendarGroupsCalendarsEvents("Can get groupsfileschildrencreatedByUserCalendarGroupsCalendarsEvents", getTestStatus("canGetgroupsfileschildrencreatedByUserCalendarGroupsCalendarsEvents")));
        this.addTest(canCreategroupsfileschildrencreatedByUserCalendarGroupsCalendarsEvents("Can create canCreategroupsfileschildrencreatedByUserCalendarGroupsCalendarsEvents", getTestStatus("canCreategroupsfileschildrencreatedByUserCalendarGroupsCalendarsEvents")));
        this.addTest(canGetgroupsfileschildrencreatedByUserCalendarGroupsCalendarsEventsAttachments("Can get groupsfileschildrencreatedByUserCalendarGroupsCalendarsEventsAttachments", getTestStatus("canGetgroupsfileschildrencreatedByUserCalendarGroupsCalendarsEventsAttachments")));
        this.addTest(canCreategroupsfileschildrencreatedByUserCalendarGroupsCalendarsEventsAttachments("Can create canCreategroupsfileschildrencreatedByUserCalendarGroupsCalendarsEventsAttachments", getTestStatus("canCreategroupsfileschildrencreatedByUserCalendarGroupsCalendarsEventsAttachments")));
        this.addTest(canGetgroupsfileschildrencreatedByUserCalendarGroupsCalendarsEventsInstances("Can get groupsfileschildrencreatedByUserCalendarGroupsCalendarsEventsInstances", getTestStatus("canGetgroupsfileschildrencreatedByUserCalendarGroupsCalendarsEventsInstances")));
        this.addTest(canCreategroupsfileschildrencreatedByUserCalendarGroupsCalendarsEventsInstances("Can create canCreategroupsfileschildrencreatedByUserCalendarGroupsCalendarsEventsInstances", getTestStatus("canCreategroupsfileschildrencreatedByUserCalendarGroupsCalendarsEventsInstances")));
        this.addTest(canGetgroupsfileschildrencreatedByUserCalendarGroupsCalendarsEventsInstancesAttachments("Can get groupsfileschildrencreatedByUserCalendarGroupsCalendarsEventsInstancesAttachments", getTestStatus("canGetgroupsfileschildrencreatedByUserCalendarGroupsCalendarsEventsInstancesAttachments")));
        this.addTest(canCreategroupsfileschildrencreatedByUserCalendarGroupsCalendarsEventsInstancesAttachments("Can create canCreategroupsfileschildrencreatedByUserCalendarGroupsCalendarsEventsInstancesAttachments", getTestStatus("canCreategroupsfileschildrencreatedByUserCalendarGroupsCalendarsEventsInstancesAttachments")));
        this.addTest(canGetgroupsfileschildrencreatedByUserEvents("Can get groupsfileschildrencreatedByUserEvents", getTestStatus("canGetgroupsfileschildrencreatedByUserEvents")));
        this.addTest(canCreategroupsfileschildrencreatedByUserEvents("Can create canCreategroupsfileschildrencreatedByUserEvents", getTestStatus("canCreategroupsfileschildrencreatedByUserEvents")));
        this.addTest(canGetgroupsfileschildrencreatedByUserEventsAttachments("Can get groupsfileschildrencreatedByUserEventsAttachments", getTestStatus("canGetgroupsfileschildrencreatedByUserEventsAttachments")));
        this.addTest(canCreategroupsfileschildrencreatedByUserEventsAttachments("Can create canCreategroupsfileschildrencreatedByUserEventsAttachments", getTestStatus("canCreategroupsfileschildrencreatedByUserEventsAttachments")));
        this.addTest(canGetgroupsfileschildrencreatedByUserEventsCalendar("Can get groupsfileschildrencreatedByUserEventsCalendar", getTestStatus("canGetgroupsfileschildrencreatedByUserEventsCalendar")));
        this.addTest(canGetgroupsfileschildrencreatedByUserEventsInstances("Can get groupsfileschildrencreatedByUserEventsInstances", getTestStatus("canGetgroupsfileschildrencreatedByUserEventsInstances")));
        this.addTest(canCreategroupsfileschildrencreatedByUserEventsInstances("Can create canCreategroupsfileschildrencreatedByUserEventsInstances", getTestStatus("canCreategroupsfileschildrencreatedByUserEventsInstances")));
        this.addTest(canGetgroupsfileschildrencreatedByUserEventsInstancesAttachments("Can get groupsfileschildrencreatedByUserEventsInstancesAttachments", getTestStatus("canGetgroupsfileschildrencreatedByUserEventsInstancesAttachments")));
        this.addTest(canCreategroupsfileschildrencreatedByUserEventsInstancesAttachments("Can create canCreategroupsfileschildrencreatedByUserEventsInstancesAttachments", getTestStatus("canCreategroupsfileschildrencreatedByUserEventsInstancesAttachments")));
        this.addTest(canGetgroupsfileschildrencreatedByUserEventsInstancesCalendar("Can get groupsfileschildrencreatedByUserEventsInstancesCalendar", getTestStatus("canGetgroupsfileschildrencreatedByUserEventsInstancesCalendar")));
        this.addTest(canGetgroupsfileschildrencreatedByUserCalendarView("Can get groupsfileschildrencreatedByUserCalendarView", getTestStatus("canGetgroupsfileschildrencreatedByUserCalendarView")));
        this.addTest(canCreategroupsfileschildrencreatedByUserCalendarView("Can create canCreategroupsfileschildrencreatedByUserCalendarView", getTestStatus("canCreategroupsfileschildrencreatedByUserCalendarView")));
        this.addTest(canGetgroupsfileschildrencreatedByUserCalendarViewAttachments("Can get groupsfileschildrencreatedByUserCalendarViewAttachments", getTestStatus("canGetgroupsfileschildrencreatedByUserCalendarViewAttachments")));
        this.addTest(canCreategroupsfileschildrencreatedByUserCalendarViewAttachments("Can create canCreategroupsfileschildrencreatedByUserCalendarViewAttachments", getTestStatus("canCreategroupsfileschildrencreatedByUserCalendarViewAttachments")));
        this.addTest(canGetgroupsfileschildrencreatedByUserCalendarViewCalendar("Can get groupsfileschildrencreatedByUserCalendarViewCalendar", getTestStatus("canGetgroupsfileschildrencreatedByUserCalendarViewCalendar")));
        this.addTest(canGetgroupsfileschildrencreatedByUserCalendarViewInstances("Can get groupsfileschildrencreatedByUserCalendarViewInstances", getTestStatus("canGetgroupsfileschildrencreatedByUserCalendarViewInstances")));
        this.addTest(canCreategroupsfileschildrencreatedByUserCalendarViewInstances("Can create canCreategroupsfileschildrencreatedByUserCalendarViewInstances", getTestStatus("canCreategroupsfileschildrencreatedByUserCalendarViewInstances")));
        this.addTest(canGetgroupsfileschildrencreatedByUserCalendarViewInstancesAttachments("Can get groupsfileschildrencreatedByUserCalendarViewInstancesAttachments", getTestStatus("canGetgroupsfileschildrencreatedByUserCalendarViewInstancesAttachments")));
        this.addTest(canCreategroupsfileschildrencreatedByUserCalendarViewInstancesAttachments("Can create canCreategroupsfileschildrencreatedByUserCalendarViewInstancesAttachments", getTestStatus("canCreategroupsfileschildrencreatedByUserCalendarViewInstancesAttachments")));
        this.addTest(canGetgroupsfileschildrencreatedByUserCalendarViewInstancesCalendar("Can get groupsfileschildrencreatedByUserCalendarViewInstancesCalendar", getTestStatus("canGetgroupsfileschildrencreatedByUserCalendarViewInstancesCalendar")));
        this.addTest(canGetgroupsfileschildrencreatedByUserUserPhoto("Can get groupsfileschildrencreatedByUserUserPhoto", getTestStatus("canGetgroupsfileschildrencreatedByUserUserPhoto")));
        this.addTest(canGetgroupsfileschildrencreatedByUserUserPhotos("Can get groupsfileschildrencreatedByUserUserPhotos", getTestStatus("canGetgroupsfileschildrencreatedByUserUserPhotos")));
        this.addTest(canCreategroupsfileschildrencreatedByUserUserPhotos("Can create canCreategroupsfileschildrencreatedByUserUserPhotos", getTestStatus("canCreategroupsfileschildrencreatedByUserUserPhotos")));
        this.addTest(canGetgroupsfileschildrencreatedByUserdrive("Can get groupsfileschildrencreatedByUserdrive", getTestStatus("canGetgroupsfileschildrencreatedByUserdrive")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUser("Can get groupsfileschildrenlastModifiedByUser", getTestStatus("canGetgroupsfileschildrenlastModifiedByUser")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserappRoleAssignments("Can get groupsfileschildrenlastModifiedByUserappRoleAssignments", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserappRoleAssignments")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserappRoleAssignments("Can create canCreategroupsfileschildrenlastModifiedByUserappRoleAssignments", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserappRoleAssignments")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUseroauth2PermissionGrants("Can get groupsfileschildrenlastModifiedByUseroauth2PermissionGrants", getTestStatus("canGetgroupsfileschildrenlastModifiedByUseroauth2PermissionGrants")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUseroauth2PermissionGrants("Can create canCreategroupsfileschildrenlastModifiedByUseroauth2PermissionGrants", getTestStatus("canCreategroupsfileschildrenlastModifiedByUseroauth2PermissionGrants")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserownedDevices("Can get groupsfileschildrenlastModifiedByUserownedDevices", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserownedDevices")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserownedDevices("Can create canCreategroupsfileschildrenlastModifiedByUserownedDevices", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserownedDevices")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserregisteredDevices("Can get groupsfileschildrenlastModifiedByUserregisteredDevices", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserregisteredDevices")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserregisteredDevices("Can create canCreategroupsfileschildrenlastModifiedByUserregisteredDevices", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserregisteredDevices")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUsermanager("Can get groupsfileschildrenlastModifiedByUsermanager", getTestStatus("canGetgroupsfileschildrenlastModifiedByUsermanager")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserdirectReports("Can get groupsfileschildrenlastModifiedByUserdirectReports", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserdirectReports")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserdirectReports("Can create canCreategroupsfileschildrenlastModifiedByUserdirectReports", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserdirectReports")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUsermemberOf("Can get groupsfileschildrenlastModifiedByUsermemberOf", getTestStatus("canGetgroupsfileschildrenlastModifiedByUsermemberOf")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUsermemberOf("Can create canCreategroupsfileschildrenlastModifiedByUsermemberOf", getTestStatus("canCreategroupsfileschildrenlastModifiedByUsermemberOf")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUsercreatedObjects("Can get groupsfileschildrenlastModifiedByUsercreatedObjects", getTestStatus("canGetgroupsfileschildrenlastModifiedByUsercreatedObjects")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUsercreatedObjects("Can create canCreategroupsfileschildrenlastModifiedByUsercreatedObjects", getTestStatus("canCreategroupsfileschildrenlastModifiedByUsercreatedObjects")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserownedObjects("Can get groupsfileschildrenlastModifiedByUserownedObjects", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserownedObjects")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserownedObjects("Can create canCreategroupsfileschildrenlastModifiedByUserownedObjects", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserownedObjects")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserMessages("Can get groupsfileschildrenlastModifiedByUserMessages", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserMessages")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserMessages("Can create canCreategroupsfileschildrenlastModifiedByUserMessages", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserMessages")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserMessagesAttachments("Can get groupsfileschildrenlastModifiedByUserMessagesAttachments", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserMessagesAttachments")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserMessagesAttachments("Can create canCreategroupsfileschildrenlastModifiedByUserMessagesAttachments", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserMessagesAttachments")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserCalendars("Can get groupsfileschildrenlastModifiedByUserCalendars", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserCalendars")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserCalendars("Can create canCreategroupsfileschildrenlastModifiedByUserCalendars", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserCalendars")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserCalendarsCalendarView("Can get groupsfileschildrenlastModifiedByUserCalendarsCalendarView", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserCalendarsCalendarView")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserCalendarsCalendarView("Can create canCreategroupsfileschildrenlastModifiedByUserCalendarsCalendarView", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserCalendarsCalendarView")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserCalendarsCalendarViewAttachments("Can get groupsfileschildrenlastModifiedByUserCalendarsCalendarViewAttachments", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserCalendarsCalendarViewAttachments")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserCalendarsCalendarViewAttachments("Can create canCreategroupsfileschildrenlastModifiedByUserCalendarsCalendarViewAttachments", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserCalendarsCalendarViewAttachments")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserCalendarsCalendarViewInstances("Can get groupsfileschildrenlastModifiedByUserCalendarsCalendarViewInstances", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserCalendarsCalendarViewInstances")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserCalendarsCalendarViewInstances("Can create canCreategroupsfileschildrenlastModifiedByUserCalendarsCalendarViewInstances", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserCalendarsCalendarViewInstances")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserCalendarsCalendarViewInstancesAttachments("Can get groupsfileschildrenlastModifiedByUserCalendarsCalendarViewInstancesAttachments", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserCalendarsCalendarViewInstancesAttachments")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserCalendarsCalendarViewInstancesAttachments("Can create canCreategroupsfileschildrenlastModifiedByUserCalendarsCalendarViewInstancesAttachments", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserCalendarsCalendarViewInstancesAttachments")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserCalendarsEvents("Can get groupsfileschildrenlastModifiedByUserCalendarsEvents", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserCalendarsEvents")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserCalendarsEvents("Can create canCreategroupsfileschildrenlastModifiedByUserCalendarsEvents", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserCalendarsEvents")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserCalendarsEventsAttachments("Can get groupsfileschildrenlastModifiedByUserCalendarsEventsAttachments", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserCalendarsEventsAttachments")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserCalendarsEventsAttachments("Can create canCreategroupsfileschildrenlastModifiedByUserCalendarsEventsAttachments", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserCalendarsEventsAttachments")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserCalendarsEventsInstances("Can get groupsfileschildrenlastModifiedByUserCalendarsEventsInstances", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserCalendarsEventsInstances")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserCalendarsEventsInstances("Can create canCreategroupsfileschildrenlastModifiedByUserCalendarsEventsInstances", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserCalendarsEventsInstances")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserCalendarsEventsInstancesAttachments("Can get groupsfileschildrenlastModifiedByUserCalendarsEventsInstancesAttachments", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserCalendarsEventsInstancesAttachments")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserCalendarsEventsInstancesAttachments("Can create canCreategroupsfileschildrenlastModifiedByUserCalendarsEventsInstancesAttachments", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserCalendarsEventsInstancesAttachments")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserCalendar("Can get groupsfileschildrenlastModifiedByUserCalendar", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserCalendar")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserCalendarCalendarView("Can get groupsfileschildrenlastModifiedByUserCalendarCalendarView", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserCalendarCalendarView")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserCalendarCalendarView("Can create canCreategroupsfileschildrenlastModifiedByUserCalendarCalendarView", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserCalendarCalendarView")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserCalendarCalendarViewAttachments("Can get groupsfileschildrenlastModifiedByUserCalendarCalendarViewAttachments", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserCalendarCalendarViewAttachments")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserCalendarCalendarViewAttachments("Can create canCreategroupsfileschildrenlastModifiedByUserCalendarCalendarViewAttachments", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserCalendarCalendarViewAttachments")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserCalendarCalendarViewInstances("Can get groupsfileschildrenlastModifiedByUserCalendarCalendarViewInstances", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserCalendarCalendarViewInstances")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserCalendarCalendarViewInstances("Can create canCreategroupsfileschildrenlastModifiedByUserCalendarCalendarViewInstances", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserCalendarCalendarViewInstances")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserCalendarCalendarViewInstancesAttachments("Can get groupsfileschildrenlastModifiedByUserCalendarCalendarViewInstancesAttachments", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserCalendarCalendarViewInstancesAttachments")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserCalendarCalendarViewInstancesAttachments("Can create canCreategroupsfileschildrenlastModifiedByUserCalendarCalendarViewInstancesAttachments", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserCalendarCalendarViewInstancesAttachments")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserCalendarEvents("Can get groupsfileschildrenlastModifiedByUserCalendarEvents", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserCalendarEvents")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserCalendarEvents("Can create canCreategroupsfileschildrenlastModifiedByUserCalendarEvents", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserCalendarEvents")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserCalendarEventsAttachments("Can get groupsfileschildrenlastModifiedByUserCalendarEventsAttachments", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserCalendarEventsAttachments")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserCalendarEventsAttachments("Can create canCreategroupsfileschildrenlastModifiedByUserCalendarEventsAttachments", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserCalendarEventsAttachments")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserCalendarEventsInstances("Can get groupsfileschildrenlastModifiedByUserCalendarEventsInstances", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserCalendarEventsInstances")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserCalendarEventsInstances("Can create canCreategroupsfileschildrenlastModifiedByUserCalendarEventsInstances", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserCalendarEventsInstances")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserCalendarEventsInstancesAttachments("Can get groupsfileschildrenlastModifiedByUserCalendarEventsInstancesAttachments", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserCalendarEventsInstancesAttachments")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserCalendarEventsInstancesAttachments("Can create canCreategroupsfileschildrenlastModifiedByUserCalendarEventsInstancesAttachments", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserCalendarEventsInstancesAttachments")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserCalendarGroups("Can get groupsfileschildrenlastModifiedByUserCalendarGroups", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserCalendarGroups")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserCalendarGroups("Can create canCreategroupsfileschildrenlastModifiedByUserCalendarGroups", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserCalendarGroups")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserCalendarGroupsCalendars("Can get groupsfileschildrenlastModifiedByUserCalendarGroupsCalendars", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserCalendarGroupsCalendars")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserCalendarGroupsCalendars("Can create canCreategroupsfileschildrenlastModifiedByUserCalendarGroupsCalendars", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserCalendarGroupsCalendars")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsCalendarView("Can get groupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsCalendarView", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsCalendarView")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsCalendarView("Can create canCreategroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsCalendarView", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsCalendarView")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsCalendarViewAttachments("Can get groupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsCalendarViewAttachments", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsCalendarViewAttachments")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsCalendarViewAttachments("Can create canCreategroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsCalendarViewAttachments", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsCalendarViewAttachments")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsCalendarViewInstances("Can get groupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsCalendarViewInstances", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsCalendarViewInstances")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsCalendarViewInstances("Can create canCreategroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsCalendarViewInstances", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsCalendarViewInstances")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsCalendarViewInstancesAttachments("Can get groupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsCalendarViewInstancesAttachments", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsCalendarViewInstancesAttachments")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsCalendarViewInstancesAttachments("Can create canCreategroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsCalendarViewInstancesAttachments", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsCalendarViewInstancesAttachments")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsEvents("Can get groupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsEvents", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsEvents")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsEvents("Can create canCreategroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsEvents", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsEvents")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsEventsAttachments("Can get groupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsEventsAttachments", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsEventsAttachments")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsEventsAttachments("Can create canCreategroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsEventsAttachments", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsEventsAttachments")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsEventsInstances("Can get groupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsEventsInstances", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsEventsInstances")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsEventsInstances("Can create canCreategroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsEventsInstances", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsEventsInstances")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsEventsInstancesAttachments("Can get groupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsEventsInstancesAttachments", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsEventsInstancesAttachments")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsEventsInstancesAttachments("Can create canCreategroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsEventsInstancesAttachments", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserCalendarGroupsCalendarsEventsInstancesAttachments")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserEvents("Can get groupsfileschildrenlastModifiedByUserEvents", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserEvents")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserEvents("Can create canCreategroupsfileschildrenlastModifiedByUserEvents", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserEvents")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserEventsAttachments("Can get groupsfileschildrenlastModifiedByUserEventsAttachments", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserEventsAttachments")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserEventsAttachments("Can create canCreategroupsfileschildrenlastModifiedByUserEventsAttachments", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserEventsAttachments")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserEventsCalendar("Can get groupsfileschildrenlastModifiedByUserEventsCalendar", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserEventsCalendar")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserEventsInstances("Can get groupsfileschildrenlastModifiedByUserEventsInstances", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserEventsInstances")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserEventsInstances("Can create canCreategroupsfileschildrenlastModifiedByUserEventsInstances", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserEventsInstances")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserEventsInstancesAttachments("Can get groupsfileschildrenlastModifiedByUserEventsInstancesAttachments", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserEventsInstancesAttachments")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserEventsInstancesAttachments("Can create canCreategroupsfileschildrenlastModifiedByUserEventsInstancesAttachments", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserEventsInstancesAttachments")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserEventsInstancesCalendar("Can get groupsfileschildrenlastModifiedByUserEventsInstancesCalendar", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserEventsInstancesCalendar")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserCalendarView("Can get groupsfileschildrenlastModifiedByUserCalendarView", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserCalendarView")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserCalendarView("Can create canCreategroupsfileschildrenlastModifiedByUserCalendarView", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserCalendarView")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserCalendarViewAttachments("Can get groupsfileschildrenlastModifiedByUserCalendarViewAttachments", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserCalendarViewAttachments")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserCalendarViewAttachments("Can create canCreategroupsfileschildrenlastModifiedByUserCalendarViewAttachments", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserCalendarViewAttachments")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserCalendarViewCalendar("Can get groupsfileschildrenlastModifiedByUserCalendarViewCalendar", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserCalendarViewCalendar")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserCalendarViewInstances("Can get groupsfileschildrenlastModifiedByUserCalendarViewInstances", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserCalendarViewInstances")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserCalendarViewInstances("Can create canCreategroupsfileschildrenlastModifiedByUserCalendarViewInstances", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserCalendarViewInstances")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserCalendarViewInstancesAttachments("Can get groupsfileschildrenlastModifiedByUserCalendarViewInstancesAttachments", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserCalendarViewInstancesAttachments")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserCalendarViewInstancesAttachments("Can create canCreategroupsfileschildrenlastModifiedByUserCalendarViewInstancesAttachments", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserCalendarViewInstancesAttachments")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserCalendarViewInstancesCalendar("Can get groupsfileschildrenlastModifiedByUserCalendarViewInstancesCalendar", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserCalendarViewInstancesCalendar")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserUserPhoto("Can get groupsfileschildrenlastModifiedByUserUserPhoto", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserUserPhoto")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserUserPhotos("Can get groupsfileschildrenlastModifiedByUserUserPhotos", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserUserPhotos")));
        this.addTest(canCreategroupsfileschildrenlastModifiedByUserUserPhotos("Can create canCreategroupsfileschildrenlastModifiedByUserUserPhotos", getTestStatus("canCreategroupsfileschildrenlastModifiedByUserUserPhotos")));
        this.addTest(canGetgroupsfileschildrenlastModifiedByUserdrive("Can get groupsfileschildrenlastModifiedByUserdrive", getTestStatus("canGetgroupsfileschildrenlastModifiedByUserdrive")));
        this.addTest(canGetdirectoryRoles("Can get directoryRoles", getTestStatus("canGetdirectoryRoles")));
        this.addTest(canCreatedirectoryRoles("Can create canCreatedirectoryRoles", getTestStatus("canCreatedirectoryRoles")));
        this.addTest(canGetdirectoryRolesmembers("Can get directoryRolesmembers", getTestStatus("canGetdirectoryRolesmembers")));
        this.addTest(canCreatedirectoryRolesmembers("Can create canCreatedirectoryRolesmembers", getTestStatus("canCreatedirectoryRolesmembers")));
        this.addTest(canGetdirectoryRolesmemberOf("Can get directoryRolesmemberOf", getTestStatus("canGetdirectoryRolesmemberOf")));
        this.addTest(canCreatedirectoryRolesmemberOf("Can create canCreatedirectoryRolesmemberOf", getTestStatus("canCreatedirectoryRolesmemberOf")));
        this.addTest(canGetdirectoryRolesowners("Can get directoryRolesowners", getTestStatus("canGetdirectoryRolesowners")));
        this.addTest(canCreatedirectoryRolesowners("Can create canCreatedirectoryRolesowners", getTestStatus("canCreatedirectoryRolesowners")));
        this.addTest(canGetdirectoryRolesownedObjects("Can get directoryRolesownedObjects", getTestStatus("canGetdirectoryRolesownedObjects")));
        this.addTest(canCreatedirectoryRolesownedObjects("Can create canCreatedirectoryRolesownedObjects", getTestStatus("canCreatedirectoryRolesownedObjects")));
        this.addTest(canGetdirectoryRoleTemplates("Can get directoryRoleTemplates", getTestStatus("canGetdirectoryRoleTemplates")));
        this.addTest(canCreatedirectoryRoleTemplates("Can create canCreatedirectoryRoleTemplates", getTestStatus("canCreatedirectoryRoleTemplates")));
        this.addTest(canGetservicePrincipals("Can get servicePrincipals", getTestStatus("canGetservicePrincipals")));
        this.addTest(canCreateservicePrincipals("Can create canCreateservicePrincipals", getTestStatus("canCreateservicePrincipals")));
        this.addTest(canGetservicePrincipalsappRoleAssignedTo("Can get servicePrincipalsappRoleAssignedTo", getTestStatus("canGetservicePrincipalsappRoleAssignedTo")));
        this.addTest(canGetservicePrincipalsappRoleAssignments("Can get servicePrincipalsappRoleAssignments", getTestStatus("canGetservicePrincipalsappRoleAssignments")));
        this.addTest(canCreateservicePrincipalsappRoleAssignments("Can create canCreateservicePrincipalsappRoleAssignments", getTestStatus("canCreateservicePrincipalsappRoleAssignments")));
        this.addTest(canGetservicePrincipalsoauth2PermissionGrants("Can get servicePrincipalsoauth2PermissionGrants", getTestStatus("canGetservicePrincipalsoauth2PermissionGrants")));
        this.addTest(canCreateservicePrincipalsoauth2PermissionGrants("Can create canCreateservicePrincipalsoauth2PermissionGrants", getTestStatus("canCreateservicePrincipalsoauth2PermissionGrants")));
        this.addTest(canGetservicePrincipalsmemberOf("Can get servicePrincipalsmemberOf", getTestStatus("canGetservicePrincipalsmemberOf")));
        this.addTest(canCreateservicePrincipalsmemberOf("Can create canCreateservicePrincipalsmemberOf", getTestStatus("canCreateservicePrincipalsmemberOf")));
        this.addTest(canGetservicePrincipalscreatedOnBehalfOf("Can get servicePrincipalscreatedOnBehalfOf", getTestStatus("canGetservicePrincipalscreatedOnBehalfOf")));
        this.addTest(canGetservicePrincipalscreatedObjects("Can get servicePrincipalscreatedObjects", getTestStatus("canGetservicePrincipalscreatedObjects")));
        this.addTest(canCreateservicePrincipalscreatedObjects("Can create canCreateservicePrincipalscreatedObjects", getTestStatus("canCreateservicePrincipalscreatedObjects")));
        this.addTest(canGetservicePrincipalsowners("Can get servicePrincipalsowners", getTestStatus("canGetservicePrincipalsowners")));
        this.addTest(canCreateservicePrincipalsowners("Can create canCreateservicePrincipalsowners", getTestStatus("canCreateservicePrincipalsowners")));
        this.addTest(canGetservicePrincipalsownedObjects("Can get servicePrincipalsownedObjects", getTestStatus("canGetservicePrincipalsownedObjects")));
        this.addTest(canCreateservicePrincipalsownedObjects("Can create canCreateservicePrincipalsownedObjects", getTestStatus("canCreateservicePrincipalsownedObjects")));
        this.addTest(canGettenantDetails("Can get tenantDetails", getTestStatus("canGettenantDetails")));
        this.addTest(canCreatetenantDetails("Can create canCreatetenantDetails", getTestStatus("canCreatetenantDetails")));
        this.addTest(canGetusers("Can get users", getTestStatus("canGetusers")));
        this.addTest(canCreateusers("Can create canCreateusers", getTestStatus("canCreateusers")));
        this.addTest(canGetusersappRoleAssignments("Can get usersappRoleAssignments", getTestStatus("canGetusersappRoleAssignments")));
        this.addTest(canCreateusersappRoleAssignments("Can create canCreateusersappRoleAssignments", getTestStatus("canCreateusersappRoleAssignments")));
        this.addTest(canGetusersoauth2PermissionGrants("Can get usersoauth2PermissionGrants", getTestStatus("canGetusersoauth2PermissionGrants")));
        this.addTest(canCreateusersoauth2PermissionGrants("Can create canCreateusersoauth2PermissionGrants", getTestStatus("canCreateusersoauth2PermissionGrants")));
        this.addTest(canGetusersownedDevices("Can get usersownedDevices", getTestStatus("canGetusersownedDevices")));
        this.addTest(canCreateusersownedDevices("Can create canCreateusersownedDevices", getTestStatus("canCreateusersownedDevices")));
        this.addTest(canGetusersregisteredDevices("Can get usersregisteredDevices", getTestStatus("canGetusersregisteredDevices")));
        this.addTest(canCreateusersregisteredDevices("Can create canCreateusersregisteredDevices", getTestStatus("canCreateusersregisteredDevices")));
        this.addTest(canGetusersmanager("Can get usersmanager", getTestStatus("canGetusersmanager")));
        this.addTest(canGetusersdirectReports("Can get usersdirectReports", getTestStatus("canGetusersdirectReports")));
        this.addTest(canCreateusersdirectReports("Can create canCreateusersdirectReports", getTestStatus("canCreateusersdirectReports")));
        this.addTest(canGetusersmemberOf("Can get usersmemberOf", getTestStatus("canGetusersmemberOf")));
        this.addTest(canCreateusersmemberOf("Can create canCreateusersmemberOf", getTestStatus("canCreateusersmemberOf")));
        this.addTest(canGetuserscreatedObjects("Can get userscreatedObjects", getTestStatus("canGetuserscreatedObjects")));
        this.addTest(canCreateuserscreatedObjects("Can create canCreateuserscreatedObjects", getTestStatus("canCreateuserscreatedObjects")));
        this.addTest(canGetusersownedObjects("Can get usersownedObjects", getTestStatus("canGetusersownedObjects")));
        this.addTest(canCreateusersownedObjects("Can create canCreateusersownedObjects", getTestStatus("canCreateusersownedObjects")));
        this.addTest(canGetusersMessages("Can get usersMessages", getTestStatus("canGetusersMessages")));
        this.addTest(canCreateusersMessages("Can create canCreateusersMessages", getTestStatus("canCreateusersMessages")));
        this.addTest(canGetusersMessagesAttachments("Can get usersMessagesAttachments", getTestStatus("canGetusersMessagesAttachments")));
        this.addTest(canCreateusersMessagesAttachments("Can create canCreateusersMessagesAttachments", getTestStatus("canCreateusersMessagesAttachments")));
        this.addTest(canGetusersCalendars("Can get usersCalendars", getTestStatus("canGetusersCalendars")));
        this.addTest(canCreateusersCalendars("Can create canCreateusersCalendars", getTestStatus("canCreateusersCalendars")));
        this.addTest(canGetusersCalendarsCalendarView("Can get usersCalendarsCalendarView", getTestStatus("canGetusersCalendarsCalendarView")));
        this.addTest(canCreateusersCalendarsCalendarView("Can create canCreateusersCalendarsCalendarView", getTestStatus("canCreateusersCalendarsCalendarView")));
        this.addTest(canGetusersCalendarsCalendarViewAttachments("Can get usersCalendarsCalendarViewAttachments", getTestStatus("canGetusersCalendarsCalendarViewAttachments")));
        this.addTest(canCreateusersCalendarsCalendarViewAttachments("Can create canCreateusersCalendarsCalendarViewAttachments", getTestStatus("canCreateusersCalendarsCalendarViewAttachments")));
        this.addTest(canGetusersCalendarsCalendarViewInstances("Can get usersCalendarsCalendarViewInstances", getTestStatus("canGetusersCalendarsCalendarViewInstances")));
        this.addTest(canCreateusersCalendarsCalendarViewInstances("Can create canCreateusersCalendarsCalendarViewInstances", getTestStatus("canCreateusersCalendarsCalendarViewInstances")));
        this.addTest(canGetusersCalendarsCalendarViewInstancesAttachments("Can get usersCalendarsCalendarViewInstancesAttachments", getTestStatus("canGetusersCalendarsCalendarViewInstancesAttachments")));
        this.addTest(canCreateusersCalendarsCalendarViewInstancesAttachments("Can create canCreateusersCalendarsCalendarViewInstancesAttachments", getTestStatus("canCreateusersCalendarsCalendarViewInstancesAttachments")));
        this.addTest(canGetusersCalendarsEvents("Can get usersCalendarsEvents", getTestStatus("canGetusersCalendarsEvents")));
        this.addTest(canCreateusersCalendarsEvents("Can create canCreateusersCalendarsEvents", getTestStatus("canCreateusersCalendarsEvents")));
        this.addTest(canGetusersCalendarsEventsAttachments("Can get usersCalendarsEventsAttachments", getTestStatus("canGetusersCalendarsEventsAttachments")));
        this.addTest(canCreateusersCalendarsEventsAttachments("Can create canCreateusersCalendarsEventsAttachments", getTestStatus("canCreateusersCalendarsEventsAttachments")));
        this.addTest(canGetusersCalendarsEventsInstances("Can get usersCalendarsEventsInstances", getTestStatus("canGetusersCalendarsEventsInstances")));
        this.addTest(canCreateusersCalendarsEventsInstances("Can create canCreateusersCalendarsEventsInstances", getTestStatus("canCreateusersCalendarsEventsInstances")));
        this.addTest(canGetusersCalendarsEventsInstancesAttachments("Can get usersCalendarsEventsInstancesAttachments", getTestStatus("canGetusersCalendarsEventsInstancesAttachments")));
        this.addTest(canCreateusersCalendarsEventsInstancesAttachments("Can create canCreateusersCalendarsEventsInstancesAttachments", getTestStatus("canCreateusersCalendarsEventsInstancesAttachments")));
        this.addTest(canGetusersCalendar("Can get usersCalendar", getTestStatus("canGetusersCalendar")));
        this.addTest(canGetusersCalendarCalendarView("Can get usersCalendarCalendarView", getTestStatus("canGetusersCalendarCalendarView")));
        this.addTest(canCreateusersCalendarCalendarView("Can create canCreateusersCalendarCalendarView", getTestStatus("canCreateusersCalendarCalendarView")));
        this.addTest(canGetusersCalendarCalendarViewAttachments("Can get usersCalendarCalendarViewAttachments", getTestStatus("canGetusersCalendarCalendarViewAttachments")));
        this.addTest(canCreateusersCalendarCalendarViewAttachments("Can create canCreateusersCalendarCalendarViewAttachments", getTestStatus("canCreateusersCalendarCalendarViewAttachments")));
        this.addTest(canGetusersCalendarCalendarViewInstances("Can get usersCalendarCalendarViewInstances", getTestStatus("canGetusersCalendarCalendarViewInstances")));
        this.addTest(canCreateusersCalendarCalendarViewInstances("Can create canCreateusersCalendarCalendarViewInstances", getTestStatus("canCreateusersCalendarCalendarViewInstances")));
        this.addTest(canGetusersCalendarCalendarViewInstancesAttachments("Can get usersCalendarCalendarViewInstancesAttachments", getTestStatus("canGetusersCalendarCalendarViewInstancesAttachments")));
        this.addTest(canCreateusersCalendarCalendarViewInstancesAttachments("Can create canCreateusersCalendarCalendarViewInstancesAttachments", getTestStatus("canCreateusersCalendarCalendarViewInstancesAttachments")));
        this.addTest(canGetusersCalendarEvents("Can get usersCalendarEvents", getTestStatus("canGetusersCalendarEvents")));
        this.addTest(canCreateusersCalendarEvents("Can create canCreateusersCalendarEvents", getTestStatus("canCreateusersCalendarEvents")));
        this.addTest(canGetusersCalendarEventsAttachments("Can get usersCalendarEventsAttachments", getTestStatus("canGetusersCalendarEventsAttachments")));
        this.addTest(canCreateusersCalendarEventsAttachments("Can create canCreateusersCalendarEventsAttachments", getTestStatus("canCreateusersCalendarEventsAttachments")));
        this.addTest(canGetusersCalendarEventsInstances("Can get usersCalendarEventsInstances", getTestStatus("canGetusersCalendarEventsInstances")));
        this.addTest(canCreateusersCalendarEventsInstances("Can create canCreateusersCalendarEventsInstances", getTestStatus("canCreateusersCalendarEventsInstances")));
        this.addTest(canGetusersCalendarEventsInstancesAttachments("Can get usersCalendarEventsInstancesAttachments", getTestStatus("canGetusersCalendarEventsInstancesAttachments")));
        this.addTest(canCreateusersCalendarEventsInstancesAttachments("Can create canCreateusersCalendarEventsInstancesAttachments", getTestStatus("canCreateusersCalendarEventsInstancesAttachments")));
        this.addTest(canGetusersCalendarGroups("Can get usersCalendarGroups", getTestStatus("canGetusersCalendarGroups")));
        this.addTest(canCreateusersCalendarGroups("Can create canCreateusersCalendarGroups", getTestStatus("canCreateusersCalendarGroups")));
        this.addTest(canGetusersCalendarGroupsCalendars("Can get usersCalendarGroupsCalendars", getTestStatus("canGetusersCalendarGroupsCalendars")));
        this.addTest(canCreateusersCalendarGroupsCalendars("Can create canCreateusersCalendarGroupsCalendars", getTestStatus("canCreateusersCalendarGroupsCalendars")));
        this.addTest(canGetusersCalendarGroupsCalendarsCalendarView("Can get usersCalendarGroupsCalendarsCalendarView", getTestStatus("canGetusersCalendarGroupsCalendarsCalendarView")));
        this.addTest(canCreateusersCalendarGroupsCalendarsCalendarView("Can create canCreateusersCalendarGroupsCalendarsCalendarView", getTestStatus("canCreateusersCalendarGroupsCalendarsCalendarView")));
        this.addTest(canGetusersCalendarGroupsCalendarsCalendarViewAttachments("Can get usersCalendarGroupsCalendarsCalendarViewAttachments", getTestStatus("canGetusersCalendarGroupsCalendarsCalendarViewAttachments")));
        this.addTest(canCreateusersCalendarGroupsCalendarsCalendarViewAttachments("Can create canCreateusersCalendarGroupsCalendarsCalendarViewAttachments", getTestStatus("canCreateusersCalendarGroupsCalendarsCalendarViewAttachments")));
        this.addTest(canGetusersCalendarGroupsCalendarsCalendarViewInstances("Can get usersCalendarGroupsCalendarsCalendarViewInstances", getTestStatus("canGetusersCalendarGroupsCalendarsCalendarViewInstances")));
        this.addTest(canCreateusersCalendarGroupsCalendarsCalendarViewInstances("Can create canCreateusersCalendarGroupsCalendarsCalendarViewInstances", getTestStatus("canCreateusersCalendarGroupsCalendarsCalendarViewInstances")));
        this.addTest(canGetusersCalendarGroupsCalendarsCalendarViewInstancesAttachments("Can get usersCalendarGroupsCalendarsCalendarViewInstancesAttachments", getTestStatus("canGetusersCalendarGroupsCalendarsCalendarViewInstancesAttachments")));
        this.addTest(canCreateusersCalendarGroupsCalendarsCalendarViewInstancesAttachments("Can create canCreateusersCalendarGroupsCalendarsCalendarViewInstancesAttachments", getTestStatus("canCreateusersCalendarGroupsCalendarsCalendarViewInstancesAttachments")));
        this.addTest(canGetusersCalendarGroupsCalendarsEvents("Can get usersCalendarGroupsCalendarsEvents", getTestStatus("canGetusersCalendarGroupsCalendarsEvents")));
        this.addTest(canCreateusersCalendarGroupsCalendarsEvents("Can create canCreateusersCalendarGroupsCalendarsEvents", getTestStatus("canCreateusersCalendarGroupsCalendarsEvents")));
        this.addTest(canGetusersCalendarGroupsCalendarsEventsAttachments("Can get usersCalendarGroupsCalendarsEventsAttachments", getTestStatus("canGetusersCalendarGroupsCalendarsEventsAttachments")));
        this.addTest(canCreateusersCalendarGroupsCalendarsEventsAttachments("Can create canCreateusersCalendarGroupsCalendarsEventsAttachments", getTestStatus("canCreateusersCalendarGroupsCalendarsEventsAttachments")));
        this.addTest(canGetusersCalendarGroupsCalendarsEventsInstances("Can get usersCalendarGroupsCalendarsEventsInstances", getTestStatus("canGetusersCalendarGroupsCalendarsEventsInstances")));
        this.addTest(canCreateusersCalendarGroupsCalendarsEventsInstances("Can create canCreateusersCalendarGroupsCalendarsEventsInstances", getTestStatus("canCreateusersCalendarGroupsCalendarsEventsInstances")));
        this.addTest(canGetusersCalendarGroupsCalendarsEventsInstancesAttachments("Can get usersCalendarGroupsCalendarsEventsInstancesAttachments", getTestStatus("canGetusersCalendarGroupsCalendarsEventsInstancesAttachments")));
        this.addTest(canCreateusersCalendarGroupsCalendarsEventsInstancesAttachments("Can create canCreateusersCalendarGroupsCalendarsEventsInstancesAttachments", getTestStatus("canCreateusersCalendarGroupsCalendarsEventsInstancesAttachments")));
        this.addTest(canGetusersEvents("Can get usersEvents", getTestStatus("canGetusersEvents")));
        this.addTest(canCreateusersEvents("Can create canCreateusersEvents", getTestStatus("canCreateusersEvents")));
        this.addTest(canGetusersEventsAttachments("Can get usersEventsAttachments", getTestStatus("canGetusersEventsAttachments")));
        this.addTest(canCreateusersEventsAttachments("Can create canCreateusersEventsAttachments", getTestStatus("canCreateusersEventsAttachments")));
        this.addTest(canGetusersEventsCalendar("Can get usersEventsCalendar", getTestStatus("canGetusersEventsCalendar")));
        this.addTest(canGetusersEventsInstances("Can get usersEventsInstances", getTestStatus("canGetusersEventsInstances")));
        this.addTest(canCreateusersEventsInstances("Can create canCreateusersEventsInstances", getTestStatus("canCreateusersEventsInstances")));
        this.addTest(canGetusersEventsInstancesAttachments("Can get usersEventsInstancesAttachments", getTestStatus("canGetusersEventsInstancesAttachments")));
        this.addTest(canCreateusersEventsInstancesAttachments("Can create canCreateusersEventsInstancesAttachments", getTestStatus("canCreateusersEventsInstancesAttachments")));
        this.addTest(canGetusersEventsInstancesCalendar("Can get usersEventsInstancesCalendar", getTestStatus("canGetusersEventsInstancesCalendar")));
        this.addTest(canGetusersCalendarView("Can get usersCalendarView", getTestStatus("canGetusersCalendarView")));
        this.addTest(canCreateusersCalendarView("Can create canCreateusersCalendarView", getTestStatus("canCreateusersCalendarView")));
        this.addTest(canGetusersCalendarViewAttachments("Can get usersCalendarViewAttachments", getTestStatus("canGetusersCalendarViewAttachments")));
        this.addTest(canCreateusersCalendarViewAttachments("Can create canCreateusersCalendarViewAttachments", getTestStatus("canCreateusersCalendarViewAttachments")));
        this.addTest(canGetusersCalendarViewCalendar("Can get usersCalendarViewCalendar", getTestStatus("canGetusersCalendarViewCalendar")));
        this.addTest(canGetusersCalendarViewInstances("Can get usersCalendarViewInstances", getTestStatus("canGetusersCalendarViewInstances")));
        this.addTest(canCreateusersCalendarViewInstances("Can create canCreateusersCalendarViewInstances", getTestStatus("canCreateusersCalendarViewInstances")));
        this.addTest(canGetusersCalendarViewInstancesAttachments("Can get usersCalendarViewInstancesAttachments", getTestStatus("canGetusersCalendarViewInstancesAttachments")));
        this.addTest(canCreateusersCalendarViewInstancesAttachments("Can create canCreateusersCalendarViewInstancesAttachments", getTestStatus("canCreateusersCalendarViewInstancesAttachments")));
        this.addTest(canGetusersCalendarViewInstancesCalendar("Can get usersCalendarViewInstancesCalendar", getTestStatus("canGetusersCalendarViewInstancesCalendar")));
        this.addTest(canGetusersUserPhoto("Can get usersUserPhoto", getTestStatus("canGetusersUserPhoto")));
        this.addTest(canGetusersUserPhotos("Can get usersUserPhotos", getTestStatus("canGetusersUserPhotos")));
        this.addTest(canCreateusersUserPhotos("Can create canCreateusersUserPhotos", getTestStatus("canCreateusersUserPhotos")));
        this.addTest(canGetusersdrive("Can get usersdrive", getTestStatus("canGetusersdrive")));
        this.addTest(canGetusersfiles("Can get usersfiles", getTestStatus("canGetusersfiles")));
        this.addTest(canCreateusersfiles("Can create canCreateusersfiles", getTestStatus("canCreateusersfiles")));
        this.addTest(canGetusersfileschildren("Can get usersfileschildren", getTestStatus("canGetusersfileschildren")));
        this.addTest(canCreateusersfileschildren("Can create canCreateusersfileschildren", getTestStatus("canCreateusersfileschildren")));
        this.addTest(canGetoauth2PermissionGrants("Can get oauth2PermissionGrants", getTestStatus("canGetoauth2PermissionGrants")));
        this.addTest(canCreateoauth2PermissionGrants("Can create canCreateoauth2PermissionGrants", getTestStatus("canCreateoauth2PermissionGrants")));
        this.addTest(canGetsubscribedSkus("Can get subscribedSkus", getTestStatus("canGetsubscribedSkus")));
        this.addTest(canCreatesubscribedSkus("Can create canCreatesubscribedSkus", getTestStatus("canCreatesubscribedSkus")));
    }

    private TestStatus getTestStatus(String name){
        return mNotSupportedTests.contains(name) ? TestStatus.NotSupported : TestStatus.NotRun;
    }
    private DirectoryObject getSampleDirectoryObject() throws InstantiationException, IllegalAccessException{
        DirectoryObject sampleDirectoryObject = new DirectoryObject();

        mFiller.fill(sampleDirectoryObject);
        if(sampleDirectoryObject == null) {
            throw new IllegalArgumentException("Couldn't fill sample DirectoryObject with default values");
        }

        return sampleDirectoryObject;
    }

    private Application getSampleApplication() throws InstantiationException, IllegalAccessException{
        Application sampleApplication = new Application();

        mFiller.fill(sampleApplication);
        if(sampleApplication == null) {
            throw new IllegalArgumentException("Couldn't fill sample Application with default values");
        }

        return sampleApplication;
    }

    private ExtensionProperty getSampleExtensionProperty() throws InstantiationException, IllegalAccessException{
        ExtensionProperty sampleExtensionProperty = new ExtensionProperty();

        mFiller.fill(sampleExtensionProperty);
        if(sampleExtensionProperty == null) {
            throw new IllegalArgumentException("Couldn't fill sample ExtensionProperty with default values");
        }

        return sampleExtensionProperty;
    }

    private Contact getSampleContact() throws InstantiationException, IllegalAccessException{
        Contact sampleContact = new Contact();

        mFiller.fill(sampleContact);
        if(sampleContact == null) {
            throw new IllegalArgumentException("Couldn't fill sample Contact with default values");
        }

        return sampleContact;
    }

    private DeviceConfiguration getSampleDeviceConfiguration() throws InstantiationException, IllegalAccessException{
        DeviceConfiguration sampleDeviceConfiguration = new DeviceConfiguration();

        mFiller.fill(sampleDeviceConfiguration);
        if(sampleDeviceConfiguration == null) {
            throw new IllegalArgumentException("Couldn't fill sample DeviceConfiguration with default values");
        }

        return sampleDeviceConfiguration;
    }

    private Device getSampleDevice() throws InstantiationException, IllegalAccessException{
        Device sampleDevice = new Device();

        mFiller.fill(sampleDevice);
        if(sampleDevice == null) {
            throw new IllegalArgumentException("Couldn't fill sample Device with default values");
        }

        return sampleDevice;
    }

    private Group getSampleGroup() throws InstantiationException, IllegalAccessException{
        Group sampleGroup = new Group();

        mFiller.fill(sampleGroup);
        if(sampleGroup == null) {
            throw new IllegalArgumentException("Couldn't fill sample Group with default values");
        }

        return sampleGroup;
    }

    private AppRoleAssignment getSampleAppRoleAssignment() throws InstantiationException, IllegalAccessException{
        AppRoleAssignment sampleAppRoleAssignment = new AppRoleAssignment();

        mFiller.fill(sampleAppRoleAssignment);
        if(sampleAppRoleAssignment == null) {
            throw new IllegalArgumentException("Couldn't fill sample AppRoleAssignment with default values");
        }

        return sampleAppRoleAssignment;
    }

    private Item getSampleItem() throws InstantiationException, IllegalAccessException{
        Item sampleItem = new Item();

        mFiller.fill(sampleItem);
        if(sampleItem == null) {
            throw new IllegalArgumentException("Couldn't fill sample Item with default values");
        }

        return sampleItem;
    }

    private OAuth2PermissionGrant getSampleOAuth2PermissionGrant() throws InstantiationException, IllegalAccessException{
        OAuth2PermissionGrant sampleOAuth2PermissionGrant = new OAuth2PermissionGrant();

        mFiller.fill(sampleOAuth2PermissionGrant);
        if(sampleOAuth2PermissionGrant == null) {
            throw new IllegalArgumentException("Couldn't fill sample OAuth2PermissionGrant with default values");
        }

        return sampleOAuth2PermissionGrant;
    }

    private Message getSampleMessage() throws InstantiationException, IllegalAccessException{
        Message sampleMessage = new Message();

        mFiller.fill(sampleMessage);
        if(sampleMessage == null) {
            throw new IllegalArgumentException("Couldn't fill sample Message with default values");
        }

        return sampleMessage;
    }

    private Attachment getSampleAttachment() throws InstantiationException, IllegalAccessException{
        Attachment sampleAttachment = new Attachment();

        mFiller.fill(sampleAttachment);
        if(sampleAttachment == null) {
            throw new IllegalArgumentException("Couldn't fill sample Attachment with default values");
        }

        return sampleAttachment;
    }

    private Calendar getSampleCalendar() throws InstantiationException, IllegalAccessException{
        Calendar sampleCalendar = new Calendar();

        mFiller.fill(sampleCalendar);
        if(sampleCalendar == null) {
            throw new IllegalArgumentException("Couldn't fill sample Calendar with default values");
        }

        return sampleCalendar;
    }

    private Event getSampleEvent() throws InstantiationException, IllegalAccessException{
        Event sampleEvent = new Event();

        mFiller.fill(sampleEvent);
        if(sampleEvent == null) {
            throw new IllegalArgumentException("Couldn't fill sample Event with default values");
        }

        return sampleEvent;
    }

    private CalendarGroup getSampleCalendarGroup() throws InstantiationException, IllegalAccessException{
        CalendarGroup sampleCalendarGroup = new CalendarGroup();

        mFiller.fill(sampleCalendarGroup);
        if(sampleCalendarGroup == null) {
            throw new IllegalArgumentException("Couldn't fill sample CalendarGroup with default values");
        }

        return sampleCalendarGroup;
    }

    private Photo getSamplePhoto() throws InstantiationException, IllegalAccessException{
        Photo samplePhoto = new Photo();

        mFiller.fill(samplePhoto);
        if(samplePhoto == null) {
            throw new IllegalArgumentException("Couldn't fill sample Photo with default values");
        }

        return samplePhoto;
    }

    private DirectoryRole getSampleDirectoryRole() throws InstantiationException, IllegalAccessException{
        DirectoryRole sampleDirectoryRole = new DirectoryRole();

        mFiller.fill(sampleDirectoryRole);
        if(sampleDirectoryRole == null) {
            throw new IllegalArgumentException("Couldn't fill sample DirectoryRole with default values");
        }

        return sampleDirectoryRole;
    }

    private DirectoryRoleTemplate getSampleDirectoryRoleTemplate() throws InstantiationException, IllegalAccessException{
        DirectoryRoleTemplate sampleDirectoryRoleTemplate = new DirectoryRoleTemplate();

        mFiller.fill(sampleDirectoryRoleTemplate);
        if(sampleDirectoryRoleTemplate == null) {
            throw new IllegalArgumentException("Couldn't fill sample DirectoryRoleTemplate with default values");
        }

        return sampleDirectoryRoleTemplate;
    }

    private ServicePrincipal getSampleServicePrincipal() throws InstantiationException, IllegalAccessException{
        ServicePrincipal sampleServicePrincipal = new ServicePrincipal();

        mFiller.fill(sampleServicePrincipal);
        if(sampleServicePrincipal == null) {
            throw new IllegalArgumentException("Couldn't fill sample ServicePrincipal with default values");
        }

        return sampleServicePrincipal;
    }

    private TenantDetail getSampleTenantDetail() throws InstantiationException, IllegalAccessException{
        TenantDetail sampleTenantDetail = new TenantDetail();

        mFiller.fill(sampleTenantDetail);
        if(sampleTenantDetail == null) {
            throw new IllegalArgumentException("Couldn't fill sample TenantDetail with default values");
        }

        return sampleTenantDetail;
    }

    private User getSampleUser() throws InstantiationException, IllegalAccessException{
        User sampleUser = new User();

        mFiller.fill(sampleUser);
        if(sampleUser == null) {
            throw new IllegalArgumentException("Couldn't fill sample User with default values");
        }

        return sampleUser;
    }

    private SubscribedSku getSampleSubscribedSku() throws InstantiationException, IllegalAccessException{
        SubscribedSku sampleSubscribedSku = new SubscribedSku();

        mFiller.fill(sampleSubscribedSku);
        if(sampleSubscribedSku == null) {
            throw new IllegalArgumentException("Couldn't fill sample SubscribedSku with default values");
        }

        return sampleSubscribedSku;
    }

    private void setSubelementsForContainer(){
        mFiller.setSubElementClass(Application.class, "appRoles", AppRole.class);
        mFiller.setSubElementClass(AppRole.class, "allowedMemberTypes", String.class);
        mFiller.setSubElementClass(Application.class, "identifierUris", String.class);
        mFiller.setSubElementClass(Application.class, "keyCredentials", KeyCredential.class);
        mFiller.setSubElementClass(Application.class, "oauth2Permissions", OAuth2Permission.class);
        mFiller.setSubElementClass(Application.class, "passwordCredentials", PasswordCredential.class);
        mFiller.setSubElementClass(Application.class, "requiredResourceAccess", RequiredResourceAccess.class);
        mFiller.setSubElementClass(RequiredResourceAccess.class, "resourceAccess", ResourceAccess.class);
        mFiller.setSubElementClass(Application.class, "extensionProperties", ExtensionProperty.class);
        mFiller.setSubElementClass(ExtensionProperty.class, "targetObjects", String.class);
        mFiller.setSubElementClass(Application.class, "owners", DirectoryObject.class);
        mFiller.setSubElementClass(Contact.class, "provisioningErrors", ProvisioningError.class);
        mFiller.setSubElementClass(Contact.class, "proxyAddresses", String.class);
        mFiller.setSubElementClass(Contact.class, "directReports", DirectoryObject.class);
        mFiller.setSubElementClass(DeviceConfiguration.class, "publicIssuerCertificates", byte[].class);
        mFiller.setSubElementClass(Device.class, "alternativeSecurityIds", AlternativeSecurityId.class);
        mFiller.setSubElementClass(Device.class, "devicePhysicalIds", String.class);
        mFiller.setSubElementClass(Device.class, "registeredOwners", DirectoryObject.class);
        mFiller.setSubElementClass(Group.class, "provisioningErrors", ProvisioningError.class);
        mFiller.setSubElementClass(Group.class, "proxyAddresses", String.class);
        mFiller.setSubElementClass(Group.class, "appRoleAssignments", AppRoleAssignment.class);
        mFiller.setSubElementClass(Group.class, "members", DirectoryObject.class);
        mFiller.setSubElementClass(Group.class, "files", Item.class);
        mFiller.setSubElementClass(User.class, "assignedLicenses", AssignedLicense.class);
        mFiller.setSubElementClass(AssignedLicense.class, "disabledPlans", String.class);
        mFiller.setSubElementClass(User.class, "assignedPlans", AssignedPlan.class);
        mFiller.setSubElementClass(User.class, "otherMails", String.class);
        mFiller.setSubElementClass(User.class, "provisionedPlans", ProvisionedPlan.class);
        mFiller.setSubElementClass(User.class, "provisioningErrors", ProvisioningError.class);
        mFiller.setSubElementClass(User.class, "appRoleAssignments", AppRoleAssignment.class);
        mFiller.setSubElementClass(User.class, "oauth2PermissionGrants", OAuth2PermissionGrant.class);
        mFiller.setSubElementClass(User.class, "ownedDevices", DirectoryObject.class);
        mFiller.setSubElementClass(User.class, "Messages", Message.class);
        mFiller.setSubElementClass(Message.class, "ToRecipients", Recipient.class);
        mFiller.setSubElementClass(Message.class, "Attachments", Attachment.class);
        mFiller.setSubElementClass(User.class, "Calendars", Calendar.class);
        mFiller.setSubElementClass(Calendar.class, "CalendarView", Event.class);
        mFiller.setSubElementClass(Event.class, "Attendees", Attendee.class);
        mFiller.setSubElementClass(RecurrencePattern.class, "DaysOfWeek", DayOfWeek.class);
        mFiller.setSubElementClass(Event.class, "Attachments", Attachment.class);
        mFiller.setSubElementClass(Event.class, "Instances", Event.class);
        mFiller.setSubElementClass(User.class, "CalendarGroups", CalendarGroup.class);
        mFiller.setSubElementClass(CalendarGroup.class, "Calendars", Calendar.class);
        mFiller.setSubElementClass(User.class, "Events", Event.class);
        mFiller.setSubElementClass(User.class, "UserPhotos", Photo.class);
        mFiller.setSubElementClass(User.class, "files", Item.class);
        mFiller.setSubElementClass(Item.class, "children", Item.class);
        mFiller.setSubElementClass(DirectoryRole.class, "members", DirectoryObject.class);
        mFiller.setSubElementClass(ServicePrincipal.class, "appRoles", AppRole.class);
        mFiller.setSubElementClass(ServicePrincipal.class, "keyCredentials", KeyCredential.class);
        mFiller.setSubElementClass(ServicePrincipal.class, "oauth2Permissions", OAuth2Permission.class);
        mFiller.setSubElementClass(ServicePrincipal.class, "passwordCredentials", PasswordCredential.class);
        mFiller.setSubElementClass(ServicePrincipal.class, "replyUrls", String.class);
        mFiller.setSubElementClass(ServicePrincipal.class, "appRoleAssignments", AppRoleAssignment.class);
        mFiller.setSubElementClass(ServicePrincipal.class, "oauth2PermissionGrants", OAuth2PermissionGrant.class);
        mFiller.setSubElementClass(ServicePrincipal.class, "memberOf", DirectoryObject.class);
        mFiller.setSubElementClass(TenantDetail.class, "assignedPlans", AssignedPlan.class);
        mFiller.setSubElementClass(TenantDetail.class, "marketingNotificationEmails", String.class);
        mFiller.setSubElementClass(TenantDetail.class, "provisionedPlans", ProvisionedPlan.class);
        mFiller.setSubElementClass(TenantDetail.class, "provisioningErrors", ProvisioningError.class);
        mFiller.setSubElementClass(TenantDetail.class, "verifiedDomains", VerifiedDomain.class);
        mFiller.setSubElementClass(SubscribedSku.class, "servicePlans", ServicePlanInfo.class);
    }
}
*/