

/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/

package com.microsoft.office365.test.integration.tests;

import com.microsoft.services.outlook.*;
import com.microsoft.services.outlook.fetchers.*;
import com.microsoft.office365.test.integration.ApplicationContext;
import com.microsoft.office365.test.integration.framework.*;
import com.microsoft.office365.test.integration.framework.objectFiller.*;

import java.util.List;
import java.util.Set;

/**
 * The type OutlookClientTests.
 */
public class OutlookClientTests extends TestGroup {
    private ObjectFiller mFiller;
    private Set<String> mNotSupportedTests;
      private TestCase canGetUsers(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                    List<User> _users = client.getUsers().read().get();
                        
                        if (_users != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsers(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    User sampleUser = getSampleUser();
                    User _createduser = client.getUsers().add(sampleUser).get();
                    
                    if (_createduser != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersSubscriptions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                List<Subscription> _subscriptions = client.getUsers().getById(_user.getId()).getSubscriptions().read().get();
                        
                        if (_subscriptions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersSubscriptions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Subscription sampleSubscription = getSampleSubscription();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                Subscription _createdsubscription = client.getUsers().getById(_user.getId()).getSubscriptions().add(sampleSubscription).get();
                    
                    if (_createdsubscription != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersMessages(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                List<Message> _messages = client.getUsers().getById(_user.getId()).getMessages().read().get();
                        
                        if (_messages != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersMessages(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Message sampleMessage = getSampleMessage();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                Message _createdmessage = client.getUsers().getById(_user.getId()).getMessages().add(sampleMessage).get();
                    
                    if (_createdmessage != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersMessagesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getUsers().getById(_user.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getUsers().getById(_user.getId()).getMessages().getById(_message.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersMessagesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getUsers().getById(_user.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getUsers().getById(_user.getId()).getMessages().getById(_message.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersMessagesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getUsers().getById(_user.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getUsers().getById(_user.getId()).getMessages().getById(_message.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersMessagesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getUsers().getById(_user.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getUsers().getById(_user.getId()).getMessages().getById(_message.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersMessagesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getUsers().getById(_user.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getMessages().getById(_message.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersMessagesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getUsers().getById(_user.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getMessages().getById(_message.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersMessagesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getUsers().getById(_user.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getMessages().getById(_message.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersMessagesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getUsers().getById(_user.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getMessages().getById(_message.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroups(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                List<Group> _joinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
                        
                        if (_joinedGroups != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroups(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Group sampleGroup = getSampleGroup();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                Group _createdjoinedGroup = client.getUsers().getById(_user.getId()).getJoinedGroups().add(sampleGroup).get();
                    
                    if (_createdjoinedGroup != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsThreads(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                List<ConversationThread> _threads = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().read().get();
                        
                        if (_threads != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsThreads(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    ConversationThread sampleConversationThread = getSampleConversationThread();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                ConversationThread _createdthread = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().add(sampleConversationThread).get();
                    
                    if (_createdthread != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsThreadsPosts(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                                List<Post> _posts = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
                        
                        if (_posts != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsThreadsPosts(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Post samplePost = getSamplePost();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                                Post _createdpost = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().add(samplePost).get();
                    
                    if (_createdpost != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsThreadsPostsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsThreadsPostsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsThreadsPostsInReplyTo(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                Post _inReplyTo = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().read().get();
                        
                        if (_inReplyTo != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsThreadsPostsInReplyToExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsThreadsPostsInReplyToExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsThreadsPostsInReplyToAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsThreadsPostsInReplyToAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsThreadsPostsInReplyToSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsThreadsPostsInReplyToSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsThreadsPostsInReplyToMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsThreadsPostsInReplyToMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsThreadsPostsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsThreadsPostsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsThreadsPostsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsThreadsPostsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsThreadsPostsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsThreadsPostsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                Calendar _calendar = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().read().get();
                        
                        if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsCalendarEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                List<Event> _events = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().read().get();
                        
                        if (_events != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsCalendarEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                Event _createdevent = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().add(sampleEvent).get();
                    
                    if (_createdevent != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsCalendarEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<Event> _instances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
                        
                        if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsCalendarEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Event _createdinstance = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().add(sampleEvent).get();
                    
                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsCalendarEventsInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsCalendarEventsInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsCalendarEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsCalendarEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsCalendarEventsInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsCalendarEventsInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsCalendarEventsInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsCalendarEventsInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsCalendarEventsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsCalendarEventsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsCalendarEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsCalendarEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsCalendarEventsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsCalendarEventsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsCalendarEventsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsCalendarEventsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsCalendarCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                List<Event> _calendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().read().get();
                        
                        if (_calendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsCalendarCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                Event _createdcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().add(sampleEvent).get();
                    
                    if (_createdcalendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsCalendarCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<Event> _instances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                        
                        if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsCalendarCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Event _createdinstance = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().add(sampleEvent).get();
                    
                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsCalendarCalendarViewInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsCalendarCalendarViewInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsCalendarCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsCalendarCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsCalendarCalendarViewInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsCalendarCalendarViewInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsCalendarCalendarViewInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsCalendarCalendarViewInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsCalendarCalendarViewExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsCalendarCalendarViewExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsCalendarCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsCalendarCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsCalendarCalendarViewSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsCalendarCalendarViewSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsCalendarCalendarViewMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsCalendarCalendarViewMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                List<Event> _calendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
                        
                        if (_calendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                Event _createdcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().add(sampleEvent).get();
                    
                    if (_createdcalendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsCalendarViewCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Calendar _calendar = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getCalendar().read().get();
                        
                        if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsCalendarViewCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getCalendar().getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsCalendarViewCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getCalendar().getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsCalendarViewCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getCalendar().getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsCalendarViewCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getCalendar().getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<Event> _instances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                        
                        if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Event _createdinstance = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().add(sampleEvent).get();
                    
                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsCalendarViewInstancesCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Calendar _calendar = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getCalendar().read().get();
                        
                        if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsCalendarViewInstancesCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getCalendar().getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsCalendarViewInstancesCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getCalendar().getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsCalendarViewInstancesCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getCalendar().getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsCalendarViewInstancesCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getCalendar().getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsCalendarViewInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsCalendarViewInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsCalendarViewInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsCalendarViewInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsCalendarViewInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsCalendarViewInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsCalendarViewExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsCalendarViewExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsCalendarViewSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsCalendarViewSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsCalendarViewMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsCalendarViewMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                List<Event> _events = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
                        
                        if (_events != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                Event _createdevent = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().add(sampleEvent).get();
                    
                    if (_createdevent != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsEventsCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Calendar _calendar = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getCalendar().read().get();
                        
                        if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsEventsCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getCalendar().getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsEventsCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getCalendar().getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsEventsCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getCalendar().getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsEventsCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getCalendar().getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<Event> _instances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
                        
                        if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Event _createdinstance = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().add(sampleEvent).get();
                    
                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsEventsInstancesCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Calendar _calendar = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getCalendar().read().get();
                        
                        if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsEventsInstancesCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getCalendar().getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsEventsInstancesCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getCalendar().getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsEventsInstancesCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getCalendar().getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsEventsInstancesCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getCalendar().getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsEventsInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsEventsInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsEventsInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsEventsInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsEventsInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsEventsInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsEventsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsEventsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsEventsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsEventsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsEventsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsEventsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsConversations(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                List<Conversation> _conversations = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
                        
                        if (_conversations != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsConversations(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Conversation sampleConversation = getSampleConversation();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                Conversation _createdconversation = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().add(sampleConversation).get();
                    
                    if (_createdconversation != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsConversationsThreads(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                                List<ConversationThread> _threads = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
                        
                        if (_threads != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsConversationsThreads(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    ConversationThread sampleConversationThread = getSampleConversationThread();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                                ConversationThread _createdthread = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().add(sampleConversationThread).get();
                    
                    if (_createdthread != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsConversationsThreadsPosts(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                                List<Post> _posts = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
                        
                        if (_posts != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsConversationsThreadsPosts(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Post samplePost = getSamplePost();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                                Post _createdpost = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().add(samplePost).get();
                    
                    if (_createdpost != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsConversationsThreadsPostsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsConversationsThreadsPostsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsConversationsThreadsPostsInReplyTo(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                Post _inReplyTo = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().read().get();
                        
                        if (_inReplyTo != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsConversationsThreadsPostsInReplyToExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsConversationsThreadsPostsInReplyToExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsConversationsThreadsPostsInReplyToAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsConversationsThreadsPostsInReplyToAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsConversationsThreadsPostsInReplyToSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsConversationsThreadsPostsInReplyToSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsConversationsThreadsPostsInReplyToMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsConversationsThreadsPostsInReplyToMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsConversationsThreadsPostsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsConversationsThreadsPostsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsConversationsThreadsPostsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsConversationsThreadsPostsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsConversationsThreadsPostsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsConversationsThreadsPostsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsSubscriptions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                List<Subscription> _subscriptions = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getSubscriptions().read().get();
                        
                        if (_subscriptions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsSubscriptions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Subscription sampleSubscription = getSampleSubscription();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                Subscription _createdsubscription = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getSubscriptions().add(sampleSubscription).get();
                    
                    if (_createdsubscription != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsPhoto(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                Photo _photo = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getPhoto().read().get();
                        
                        if (_photo != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsPhotos(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                List<Photo> _photos = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getPhotos().read().get();
                        
                        if (_photos != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsPhotos(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Photo samplePhoto = getSamplePhoto();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                Photo _createdphoto = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getPhotos().add(samplePhoto).get();
                    
                    if (_createdphoto != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsAcceptedSenders(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                List<DirectoryObject> _acceptedSenders = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getAcceptedSenders().read().get();
                        
                        if (_acceptedSenders != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsAcceptedSenders(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                DirectoryObject _createdacceptedSender = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getAcceptedSenders().add(sampleDirectoryObject).get();
                    
                    if (_createdacceptedSender != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersJoinedGroupsRejectedSenders(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                List<DirectoryObject> _rejectedSenders = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getRejectedSenders().read().get();
                        
                        if (_rejectedSenders != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersJoinedGroupsRejectedSenders(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Group> _listjoinedGroups = client.getUsers().getById(_user.getId()).getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                DirectoryObject _createdrejectedSender = client.getUsers().getById(_user.getId()).getJoinedGroups().getById(_joinedGroup.getId()).getRejectedSenders().add(sampleDirectoryObject).get();
                    
                    if (_createdrejectedSender != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersMailFolders(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                List<MailFolder> _mailFolders = client.getUsers().getById(_user.getId()).getMailFolders().read().get();
                        
                        if (_mailFolders != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersMailFolders(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MailFolder sampleMailFolder = getSampleMailFolder();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                MailFolder _createdmailFolder = client.getUsers().getById(_user.getId()).getMailFolders().add(sampleMailFolder).get();
                    
                    if (_createdmailFolder != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersMailFoldersMessages(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listmailFolders = client.getUsers().getById(_user.getId()).getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                                List<Message> _messages = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getMessages().read().get();
                        
                        if (_messages != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersMailFoldersMessages(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Message sampleMessage = getSampleMessage();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listmailFolders = client.getUsers().getById(_user.getId()).getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                                Message _createdmessage = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getMessages().add(sampleMessage).get();
                    
                    if (_createdmessage != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersMailFoldersMessagesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listmailFolders = client.getUsers().getById(_user.getId()).getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getMessages().getById(_message.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersMailFoldersMessagesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listmailFolders = client.getUsers().getById(_user.getId()).getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getMessages().getById(_message.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersMailFoldersMessagesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listmailFolders = client.getUsers().getById(_user.getId()).getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getMessages().getById(_message.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersMailFoldersMessagesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listmailFolders = client.getUsers().getById(_user.getId()).getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getMessages().getById(_message.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersMailFoldersMessagesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listmailFolders = client.getUsers().getById(_user.getId()).getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getMessages().getById(_message.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersMailFoldersMessagesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listmailFolders = client.getUsers().getById(_user.getId()).getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getMessages().getById(_message.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersMailFoldersMessagesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listmailFolders = client.getUsers().getById(_user.getId()).getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getMessages().getById(_message.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersMailFoldersMessagesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listmailFolders = client.getUsers().getById(_user.getId()).getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getMessages().getById(_message.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersMailFoldersChildFolders(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listmailFolders = client.getUsers().getById(_user.getId()).getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                                List<MailFolder> _childFolders = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getChildFolders().read().get();
                        
                        if (_childFolders != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersMailFoldersChildFolders(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MailFolder sampleMailFolder = getSampleMailFolder();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listmailFolders = client.getUsers().getById(_user.getId()).getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                                MailFolder _createdchildFolder = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getChildFolders().add(sampleMailFolder).get();
                    
                    if (_createdchildFolder != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersMailFoldersChildFoldersMessages(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listmailFolders = client.getUsers().getById(_user.getId()).getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listchildFolders = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                                List<Message> _messages = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
                        
                        if (_messages != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersMailFoldersChildFoldersMessages(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Message sampleMessage = getSampleMessage();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listmailFolders = client.getUsers().getById(_user.getId()).getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listchildFolders = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                                Message _createdmessage = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().add(sampleMessage).get();
                    
                    if (_createdmessage != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersMailFoldersChildFoldersMessagesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listmailFolders = client.getUsers().getById(_user.getId()).getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listchildFolders = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().getById(_message.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersMailFoldersChildFoldersMessagesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listmailFolders = client.getUsers().getById(_user.getId()).getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listchildFolders = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().getById(_message.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersMailFoldersChildFoldersMessagesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listmailFolders = client.getUsers().getById(_user.getId()).getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listchildFolders = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().getById(_message.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersMailFoldersChildFoldersMessagesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listmailFolders = client.getUsers().getById(_user.getId()).getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listchildFolders = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().getById(_message.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersMailFoldersChildFoldersMessagesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listmailFolders = client.getUsers().getById(_user.getId()).getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listchildFolders = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().getById(_message.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersMailFoldersChildFoldersMessagesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listmailFolders = client.getUsers().getById(_user.getId()).getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listchildFolders = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().getById(_message.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersMailFoldersChildFoldersMessagesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listmailFolders = client.getUsers().getById(_user.getId()).getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listchildFolders = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().getById(_message.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersMailFoldersChildFoldersMessagesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listmailFolders = client.getUsers().getById(_user.getId()).getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listchildFolders = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().getById(_message.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersMailFoldersChildFoldersSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listmailFolders = client.getUsers().getById(_user.getId()).getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listchildFolders = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersMailFoldersChildFoldersSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listmailFolders = client.getUsers().getById(_user.getId()).getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listchildFolders = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersMailFoldersChildFoldersMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listmailFolders = client.getUsers().getById(_user.getId()).getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listchildFolders = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersMailFoldersChildFoldersMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listmailFolders = client.getUsers().getById(_user.getId()).getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listchildFolders = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersMailFoldersSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listmailFolders = client.getUsers().getById(_user.getId()).getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersMailFoldersSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listmailFolders = client.getUsers().getById(_user.getId()).getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersMailFoldersMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listmailFolders = client.getUsers().getById(_user.getId()).getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersMailFoldersMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listmailFolders = client.getUsers().getById(_user.getId()).getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getMailFolders().getById(_mailFolder.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                Calendar _calendar = client.getUsers().getById(_user.getId()).getCalendar().read().get();
                        
                        if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                List<Event> _events = client.getUsers().getById(_user.getId()).getCalendar().getEvents().read().get();
                        
                        if (_events != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                Event _createdevent = client.getUsers().getById(_user.getId()).getCalendar().getEvents().add(sampleEvent).get();
                    
                    if (_createdevent != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<Event> _instances = client.getUsers().getById(_user.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
                        
                        if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Event _createdinstance = client.getUsers().getById(_user.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().add(sampleEvent).get();
                    
                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarEventsInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getUsers().getById(_user.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarEventsInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getUsers().getById(_user.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getUsers().getById(_user.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getUsers().getById(_user.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarEventsInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarEventsInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarEventsInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarEventsInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarEventsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getUsers().getById(_user.getId()).getCalendar().getEvents().getById(_event.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarEventsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getUsers().getById(_user.getId()).getCalendar().getEvents().getById(_event.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getUsers().getById(_user.getId()).getCalendar().getEvents().getById(_event.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getUsers().getById(_user.getId()).getCalendar().getEvents().getById(_event.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarEventsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getCalendar().getEvents().getById(_event.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarEventsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getCalendar().getEvents().getById(_event.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarEventsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getCalendar().getEvents().getById(_event.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarEventsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getCalendar().getEvents().getById(_event.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                List<Event> _calendarView = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().read().get();
                        
                        if (_calendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                Event _createdcalendarView = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().add(sampleEvent).get();
                    
                    if (_createdcalendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<Event> _instances = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                        
                        if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Event _createdinstance = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().add(sampleEvent).get();
                    
                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarCalendarViewInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarCalendarViewInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarCalendarViewInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarCalendarViewInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarCalendarViewInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarCalendarViewInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarCalendarViewExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarCalendarViewExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarCalendarViewSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarCalendarViewSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarCalendarViewMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarCalendarViewMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getCalendar().getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getCalendar().getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getCalendar().getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getCalendar().getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendars(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                List<Calendar> _calendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
                        
                        if (_calendars != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendars(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Calendar sampleCalendar = getSampleCalendar();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                Calendar _createdcalendar = client.getUsers().getById(_user.getId()).getCalendars().add(sampleCalendar).get();
                    
                    if (_createdcalendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarsEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                                List<Event> _events = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                        
                        if (_events != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarsEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                                Event _createdevent = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().add(sampleEvent).get();
                    
                    if (_createdevent != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarsEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<Event> _instances = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
                        
                        if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarsEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Event _createdinstance = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().add(sampleEvent).get();
                    
                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarsEventsInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarsEventsInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarsEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarsEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarsEventsInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarsEventsInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarsEventsInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarsEventsInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarsEventsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarsEventsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarsEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarsEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarsEventsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarsEventsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarsEventsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarsEventsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarsCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                                List<Event> _calendarView = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                        
                        if (_calendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarsCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                                Event _createdcalendarView = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().add(sampleEvent).get();
                    
                    if (_createdcalendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarsCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<Event> _instances = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                        
                        if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarsCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Event _createdinstance = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().add(sampleEvent).get();
                    
                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarsCalendarViewInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarsCalendarViewInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarsCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarsCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarsCalendarViewInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarsCalendarViewInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarsCalendarViewInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarsCalendarViewInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarsCalendarViewExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarsCalendarViewExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarsCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarsCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarsCalendarViewSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarsCalendarViewSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarsCalendarViewMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarsCalendarViewMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getCalendars().getById(_calendar.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarGroups(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                List<CalendarGroup> _calendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
                        
                        if (_calendarGroups != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarGroups(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    CalendarGroup sampleCalendarGroup = getSampleCalendarGroup();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                CalendarGroup _createdcalendarGroup = client.getUsers().getById(_user.getId()).getCalendarGroups().add(sampleCalendarGroup).get();
                    
                    if (_createdcalendarGroup != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarGroupsCalendars(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                                List<Calendar> _calendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                        
                        if (_calendars != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarGroupsCalendars(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Calendar sampleCalendar = getSampleCalendar();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                                Calendar _createdcalendar = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().add(sampleCalendar).get();
                    
                    if (_createdcalendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarGroupsCalendarsEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                                List<Event> _events = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                        
                        if (_events != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarGroupsCalendarsEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                                Event _createdevent = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().add(sampleEvent).get();
                    
                    if (_createdevent != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarGroupsCalendarsEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<Event> _instances = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
                        
                        if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarGroupsCalendarsEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Event _createdinstance = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().add(sampleEvent).get();
                    
                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarGroupsCalendarsEventsInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarGroupsCalendarsEventsInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarGroupsCalendarsEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarGroupsCalendarsEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarGroupsCalendarsEventsInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarGroupsCalendarsEventsInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarGroupsCalendarsEventsInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarGroupsCalendarsEventsInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarGroupsCalendarsEventsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarGroupsCalendarsEventsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarGroupsCalendarsEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarGroupsCalendarsEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarGroupsCalendarsEventsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarGroupsCalendarsEventsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarGroupsCalendarsEventsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarGroupsCalendarsEventsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarGroupsCalendarsCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                                List<Event> _calendarView = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                        
                        if (_calendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarGroupsCalendarsCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                                Event _createdcalendarView = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().add(sampleEvent).get();
                    
                    if (_createdcalendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarGroupsCalendarsCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<Event> _instances = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                        
                        if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarGroupsCalendarsCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Event _createdinstance = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().add(sampleEvent).get();
                    
                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarGroupsCalendarsCalendarViewInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarGroupsCalendarsCalendarViewInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarGroupsCalendarsCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarGroupsCalendarsCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarGroupsCalendarsCalendarViewInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarGroupsCalendarsCalendarViewInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarGroupsCalendarsCalendarViewInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarGroupsCalendarsCalendarViewInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarGroupsCalendarsCalendarViewExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarGroupsCalendarsCalendarViewExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarGroupsCalendarsCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarGroupsCalendarsCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarGroupsCalendarsCalendarViewSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarGroupsCalendarsCalendarViewSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarGroupsCalendarsCalendarViewMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarGroupsCalendarsCalendarViewMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarGroupsCalendarsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarGroupsCalendarsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarGroupsCalendarsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarGroupsCalendarsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<CalendarGroup> _listcalendarGroups = client.getUsers().getById(_user.getId()).getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                List<Event> _calendarView = client.getUsers().getById(_user.getId()).getCalendarView().read().get();
                        
                        if (_calendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                Event _createdcalendarView = client.getUsers().getById(_user.getId()).getCalendarView().add(sampleEvent).get();
                    
                    if (_createdcalendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarViewCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Calendar _calendar = client.getUsers().getById(_user.getId()).getCalendarView().getById(_calendarView.getId()).getCalendar().read().get();
                        
                        if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarViewCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getCalendarView().getById(_calendarView.getId()).getCalendar().getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarViewCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getCalendarView().getById(_calendarView.getId()).getCalendar().getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarViewCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getCalendarView().getById(_calendarView.getId()).getCalendar().getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarViewCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getCalendarView().getById(_calendarView.getId()).getCalendar().getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<Event> _instances = client.getUsers().getById(_user.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                        
                        if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Event _createdinstance = client.getUsers().getById(_user.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().add(sampleEvent).get();
                    
                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarViewInstancesCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Calendar _calendar = client.getUsers().getById(_user.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getCalendar().read().get();
                        
                        if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarViewInstancesCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getCalendar().getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarViewInstancesCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getCalendar().getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarViewInstancesCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getCalendar().getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarViewInstancesCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getCalendar().getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarViewInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getUsers().getById(_user.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarViewInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getUsers().getById(_user.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getUsers().getById(_user.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getUsers().getById(_user.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarViewInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarViewInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarViewInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarViewInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarViewExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getUsers().getById(_user.getId()).getCalendarView().getById(_calendarView.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarViewExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getUsers().getById(_user.getId()).getCalendarView().getById(_calendarView.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getUsers().getById(_user.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getUsers().getById(_user.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarViewSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getCalendarView().getById(_calendarView.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarViewSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getCalendarView().getById(_calendarView.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersCalendarViewMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getCalendarView().getById(_calendarView.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersCalendarViewMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getUsers().getById(_user.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getCalendarView().getById(_calendarView.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                List<Event> _events = client.getUsers().getById(_user.getId()).getEvents().read().get();
                        
                        if (_events != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                Event _createdevent = client.getUsers().getById(_user.getId()).getEvents().add(sampleEvent).get();
                    
                    if (_createdevent != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersEventsCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Calendar _calendar = client.getUsers().getById(_user.getId()).getEvents().getById(_event.getId()).getCalendar().read().get();
                        
                        if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersEventsCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getEvents().getById(_event.getId()).getCalendar().getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersEventsCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getEvents().getById(_event.getId()).getCalendar().getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersEventsCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getEvents().getById(_event.getId()).getCalendar().getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersEventsCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getEvents().getById(_event.getId()).getCalendar().getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<Event> _instances = client.getUsers().getById(_user.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
                        
                        if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Event _createdinstance = client.getUsers().getById(_user.getId()).getEvents().getById(_event.getId()).getInstances().add(sampleEvent).get();
                    
                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersEventsInstancesCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Calendar _calendar = client.getUsers().getById(_user.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getCalendar().read().get();
                        
                        if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersEventsInstancesCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getCalendar().getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersEventsInstancesCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getCalendar().getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersEventsInstancesCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getCalendar().getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersEventsInstancesCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getCalendar().getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersEventsInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getUsers().getById(_user.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersEventsInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getUsers().getById(_user.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getUsers().getById(_user.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getUsers().getById(_user.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersEventsInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersEventsInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersEventsInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersEventsInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersEventsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getUsers().getById(_user.getId()).getEvents().getById(_event.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersEventsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getUsers().getById(_user.getId()).getEvents().getById(_event.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getUsers().getById(_user.getId()).getEvents().getById(_event.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getUsers().getById(_user.getId()).getEvents().getById(_event.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersEventsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getEvents().getById(_event.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersEventsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getEvents().getById(_event.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersEventsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getEvents().getById(_event.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersEventsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getUsers().getById(_user.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getEvents().getById(_event.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersPeople(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                List<Person> _people = client.getUsers().getById(_user.getId()).getPeople().read().get();
                        
                        if (_people != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersPeople(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Person samplePerson = getSamplePerson();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                Person _createdperson = client.getUsers().getById(_user.getId()).getPeople().add(samplePerson).get();
                    
                    if (_createdperson != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersContacts(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                List<Contact> _contacts = client.getUsers().getById(_user.getId()).getContacts().read().get();
                        
                        if (_contacts != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersContacts(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Contact sampleContact = getSampleContact();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                Contact _createdcontact = client.getUsers().getById(_user.getId()).getContacts().add(sampleContact).get();
                    
                    if (_createdcontact != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersContactsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Contact> _listcontacts = client.getUsers().getById(_user.getId()).getContacts().read().get();
            Contact _contact = _listcontacts == null? null : _listcontacts.get(0);
            
            if(_contact == null){
                throw new Exception("Contact not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getUsers().getById(_user.getId()).getContacts().getById(_contact.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersContactsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Contact> _listcontacts = client.getUsers().getById(_user.getId()).getContacts().read().get();
            Contact _contact = _listcontacts == null? null : _listcontacts.get(0);
            
            if(_contact == null){
                throw new Exception("Contact not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getUsers().getById(_user.getId()).getContacts().getById(_contact.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersContactsPhoto(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Contact> _listcontacts = client.getUsers().getById(_user.getId()).getContacts().read().get();
            Contact _contact = _listcontacts == null? null : _listcontacts.get(0);
            
            if(_contact == null){
                throw new Exception("Contact not available. Can't proceed with the test.");
            }
            
                                Photo _photo = client.getUsers().getById(_user.getId()).getContacts().getById(_contact.getId()).getPhoto().read().get();
                        
                        if (_photo != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersContactsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Contact> _listcontacts = client.getUsers().getById(_user.getId()).getContacts().read().get();
            Contact _contact = _listcontacts == null? null : _listcontacts.get(0);
            
            if(_contact == null){
                throw new Exception("Contact not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getContacts().getById(_contact.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersContactsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Contact> _listcontacts = client.getUsers().getById(_user.getId()).getContacts().read().get();
            Contact _contact = _listcontacts == null? null : _listcontacts.get(0);
            
            if(_contact == null){
                throw new Exception("Contact not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getContacts().getById(_contact.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersContactsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Contact> _listcontacts = client.getUsers().getById(_user.getId()).getContacts().read().get();
            Contact _contact = _listcontacts == null? null : _listcontacts.get(0);
            
            if(_contact == null){
                throw new Exception("Contact not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getContacts().getById(_contact.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersContactsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Contact> _listcontacts = client.getUsers().getById(_user.getId()).getContacts().read().get();
            Contact _contact = _listcontacts == null? null : _listcontacts.get(0);
            
            if(_contact == null){
                throw new Exception("Contact not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getContacts().getById(_contact.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersContactFolders(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                List<ContactFolder> _contactFolders = client.getUsers().getById(_user.getId()).getContactFolders().read().get();
                        
                        if (_contactFolders != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersContactFolders(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    ContactFolder sampleContactFolder = getSampleContactFolder();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                ContactFolder _createdcontactFolder = client.getUsers().getById(_user.getId()).getContactFolders().add(sampleContactFolder).get();
                    
                    if (_createdcontactFolder != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersContactFoldersContacts(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listcontactFolders = client.getUsers().getById(_user.getId()).getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                                List<Contact> _contacts = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getContacts().read().get();
                        
                        if (_contacts != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersContactFoldersContacts(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Contact sampleContact = getSampleContact();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listcontactFolders = client.getUsers().getById(_user.getId()).getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                                Contact _createdcontact = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getContacts().add(sampleContact).get();
                    
                    if (_createdcontact != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersContactFoldersContactsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listcontactFolders = client.getUsers().getById(_user.getId()).getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Contact> _listcontacts = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getContacts().read().get();
            Contact _contact = _listcontacts == null? null : _listcontacts.get(0);
            
            if(_contact == null){
                throw new Exception("Contact not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getContacts().getById(_contact.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersContactFoldersContactsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listcontactFolders = client.getUsers().getById(_user.getId()).getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Contact> _listcontacts = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getContacts().read().get();
            Contact _contact = _listcontacts == null? null : _listcontacts.get(0);
            
            if(_contact == null){
                throw new Exception("Contact not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getContacts().getById(_contact.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersContactFoldersContactsPhoto(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listcontactFolders = client.getUsers().getById(_user.getId()).getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Contact> _listcontacts = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getContacts().read().get();
            Contact _contact = _listcontacts == null? null : _listcontacts.get(0);
            
            if(_contact == null){
                throw new Exception("Contact not available. Can't proceed with the test.");
            }
            
                                Photo _photo = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getContacts().getById(_contact.getId()).getPhoto().read().get();
                        
                        if (_photo != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersContactFoldersContactsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listcontactFolders = client.getUsers().getById(_user.getId()).getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Contact> _listcontacts = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getContacts().read().get();
            Contact _contact = _listcontacts == null? null : _listcontacts.get(0);
            
            if(_contact == null){
                throw new Exception("Contact not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getContacts().getById(_contact.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersContactFoldersContactsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listcontactFolders = client.getUsers().getById(_user.getId()).getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Contact> _listcontacts = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getContacts().read().get();
            Contact _contact = _listcontacts == null? null : _listcontacts.get(0);
            
            if(_contact == null){
                throw new Exception("Contact not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getContacts().getById(_contact.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersContactFoldersContactsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listcontactFolders = client.getUsers().getById(_user.getId()).getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Contact> _listcontacts = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getContacts().read().get();
            Contact _contact = _listcontacts == null? null : _listcontacts.get(0);
            
            if(_contact == null){
                throw new Exception("Contact not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getContacts().getById(_contact.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersContactFoldersContactsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listcontactFolders = client.getUsers().getById(_user.getId()).getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Contact> _listcontacts = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getContacts().read().get();
            Contact _contact = _listcontacts == null? null : _listcontacts.get(0);
            
            if(_contact == null){
                throw new Exception("Contact not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getContacts().getById(_contact.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersContactFoldersChildFolders(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listcontactFolders = client.getUsers().getById(_user.getId()).getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                                List<ContactFolder> _childFolders = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getChildFolders().read().get();
                        
                        if (_childFolders != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersContactFoldersChildFolders(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    ContactFolder sampleContactFolder = getSampleContactFolder();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listcontactFolders = client.getUsers().getById(_user.getId()).getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                                ContactFolder _createdchildFolder = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getChildFolders().add(sampleContactFolder).get();
                    
                    if (_createdchildFolder != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersContactFoldersChildFoldersContacts(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listcontactFolders = client.getUsers().getById(_user.getId()).getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listchildFolders = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getChildFolders().read().get();
            ContactFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                                List<Contact> _contacts = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getContacts().read().get();
                        
                        if (_contacts != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersContactFoldersChildFoldersContacts(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Contact sampleContact = getSampleContact();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listcontactFolders = client.getUsers().getById(_user.getId()).getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listchildFolders = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getChildFolders().read().get();
            ContactFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                                Contact _createdcontact = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getContacts().add(sampleContact).get();
                    
                    if (_createdcontact != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersContactFoldersChildFoldersContactsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listcontactFolders = client.getUsers().getById(_user.getId()).getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listchildFolders = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getChildFolders().read().get();
            ContactFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Contact> _listcontacts = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getContacts().read().get();
            Contact _contact = _listcontacts == null? null : _listcontacts.get(0);
            
            if(_contact == null){
                throw new Exception("Contact not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getContacts().getById(_contact.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersContactFoldersChildFoldersContactsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listcontactFolders = client.getUsers().getById(_user.getId()).getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listchildFolders = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getChildFolders().read().get();
            ContactFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Contact> _listcontacts = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getContacts().read().get();
            Contact _contact = _listcontacts == null? null : _listcontacts.get(0);
            
            if(_contact == null){
                throw new Exception("Contact not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getContacts().getById(_contact.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersContactFoldersChildFoldersContactsPhoto(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listcontactFolders = client.getUsers().getById(_user.getId()).getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listchildFolders = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getChildFolders().read().get();
            ContactFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Contact> _listcontacts = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getContacts().read().get();
            Contact _contact = _listcontacts == null? null : _listcontacts.get(0);
            
            if(_contact == null){
                throw new Exception("Contact not available. Can't proceed with the test.");
            }
            
                                Photo _photo = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getContacts().getById(_contact.getId()).getPhoto().read().get();
                        
                        if (_photo != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersContactFoldersChildFoldersContactsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listcontactFolders = client.getUsers().getById(_user.getId()).getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listchildFolders = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getChildFolders().read().get();
            ContactFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Contact> _listcontacts = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getContacts().read().get();
            Contact _contact = _listcontacts == null? null : _listcontacts.get(0);
            
            if(_contact == null){
                throw new Exception("Contact not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getContacts().getById(_contact.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersContactFoldersChildFoldersContactsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listcontactFolders = client.getUsers().getById(_user.getId()).getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listchildFolders = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getChildFolders().read().get();
            ContactFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Contact> _listcontacts = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getContacts().read().get();
            Contact _contact = _listcontacts == null? null : _listcontacts.get(0);
            
            if(_contact == null){
                throw new Exception("Contact not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getContacts().getById(_contact.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersContactFoldersChildFoldersContactsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listcontactFolders = client.getUsers().getById(_user.getId()).getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listchildFolders = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getChildFolders().read().get();
            ContactFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Contact> _listcontacts = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getContacts().read().get();
            Contact _contact = _listcontacts == null? null : _listcontacts.get(0);
            
            if(_contact == null){
                throw new Exception("Contact not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getContacts().getById(_contact.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersContactFoldersChildFoldersContactsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listcontactFolders = client.getUsers().getById(_user.getId()).getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listchildFolders = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getChildFolders().read().get();
            ContactFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Contact> _listcontacts = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getContacts().read().get();
            Contact _contact = _listcontacts == null? null : _listcontacts.get(0);
            
            if(_contact == null){
                throw new Exception("Contact not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getContacts().getById(_contact.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersContactFoldersChildFoldersSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listcontactFolders = client.getUsers().getById(_user.getId()).getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listchildFolders = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getChildFolders().read().get();
            ContactFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersContactFoldersChildFoldersSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listcontactFolders = client.getUsers().getById(_user.getId()).getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listchildFolders = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getChildFolders().read().get();
            ContactFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersContactFoldersChildFoldersMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listcontactFolders = client.getUsers().getById(_user.getId()).getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listchildFolders = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getChildFolders().read().get();
            ContactFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersContactFoldersChildFoldersMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listcontactFolders = client.getUsers().getById(_user.getId()).getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listchildFolders = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getChildFolders().read().get();
            ContactFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersContactFoldersSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listcontactFolders = client.getUsers().getById(_user.getId()).getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersContactFoldersSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listcontactFolders = client.getUsers().getById(_user.getId()).getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersContactFoldersMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listcontactFolders = client.getUsers().getById(_user.getId()).getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersContactFoldersMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listcontactFolders = client.getUsers().getById(_user.getId()).getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getContactFolders().getById(_contactFolder.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersInferenceClassification(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                InferenceClassification _inferenceClassification = client.getUsers().getById(_user.getId()).getInferenceClassification().read().get();
                        
                        if (_inferenceClassification != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersInferenceClassificationOverrides(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                List<InferenceClassificationOverride> _overrides = client.getUsers().getById(_user.getId()).getInferenceClassification().getOverrides().read().get();
                        
                        if (_overrides != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersInferenceClassificationOverrides(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    InferenceClassificationOverride sampleInferenceClassificationOverride = getSampleInferenceClassificationOverride();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                InferenceClassificationOverride _createdoverride = client.getUsers().getById(_user.getId()).getInferenceClassification().getOverrides().add(sampleInferenceClassificationOverride).get();
                    
                    if (_createdoverride != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersRootFolder(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                MailFolder _rootFolder = client.getUsers().getById(_user.getId()).getRootFolder().read().get();
                        
                        if (_rootFolder != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersRootFolderMessages(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                List<Message> _messages = client.getUsers().getById(_user.getId()).getRootFolder().getMessages().read().get();
                        
                        if (_messages != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersRootFolderMessages(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Message sampleMessage = getSampleMessage();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                Message _createdmessage = client.getUsers().getById(_user.getId()).getRootFolder().getMessages().add(sampleMessage).get();
                    
                    if (_createdmessage != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersRootFolderMessagesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getUsers().getById(_user.getId()).getRootFolder().getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getUsers().getById(_user.getId()).getRootFolder().getMessages().getById(_message.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersRootFolderMessagesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getUsers().getById(_user.getId()).getRootFolder().getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getUsers().getById(_user.getId()).getRootFolder().getMessages().getById(_message.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersRootFolderMessagesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getUsers().getById(_user.getId()).getRootFolder().getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getUsers().getById(_user.getId()).getRootFolder().getMessages().getById(_message.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersRootFolderMessagesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getUsers().getById(_user.getId()).getRootFolder().getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getUsers().getById(_user.getId()).getRootFolder().getMessages().getById(_message.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersRootFolderMessagesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getUsers().getById(_user.getId()).getRootFolder().getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getRootFolder().getMessages().getById(_message.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersRootFolderMessagesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getUsers().getById(_user.getId()).getRootFolder().getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getRootFolder().getMessages().getById(_message.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersRootFolderMessagesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getUsers().getById(_user.getId()).getRootFolder().getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getRootFolder().getMessages().getById(_message.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersRootFolderMessagesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getUsers().getById(_user.getId()).getRootFolder().getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getRootFolder().getMessages().getById(_message.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersRootFolderChildFolders(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                List<MailFolder> _childFolders = client.getUsers().getById(_user.getId()).getRootFolder().getChildFolders().read().get();
                        
                        if (_childFolders != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersRootFolderChildFolders(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MailFolder sampleMailFolder = getSampleMailFolder();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                MailFolder _createdchildFolder = client.getUsers().getById(_user.getId()).getRootFolder().getChildFolders().add(sampleMailFolder).get();
                    
                    if (_createdchildFolder != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersRootFolderChildFoldersMessages(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listchildFolders = client.getUsers().getById(_user.getId()).getRootFolder().getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                                List<Message> _messages = client.getUsers().getById(_user.getId()).getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
                        
                        if (_messages != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersRootFolderChildFoldersMessages(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Message sampleMessage = getSampleMessage();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listchildFolders = client.getUsers().getById(_user.getId()).getRootFolder().getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                                Message _createdmessage = client.getUsers().getById(_user.getId()).getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().add(sampleMessage).get();
                    
                    if (_createdmessage != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersRootFolderChildFoldersMessagesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listchildFolders = client.getUsers().getById(_user.getId()).getRootFolder().getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getUsers().getById(_user.getId()).getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getUsers().getById(_user.getId()).getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().getById(_message.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersRootFolderChildFoldersMessagesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listchildFolders = client.getUsers().getById(_user.getId()).getRootFolder().getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getUsers().getById(_user.getId()).getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getUsers().getById(_user.getId()).getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().getById(_message.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersRootFolderChildFoldersMessagesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listchildFolders = client.getUsers().getById(_user.getId()).getRootFolder().getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getUsers().getById(_user.getId()).getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getUsers().getById(_user.getId()).getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().getById(_message.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersRootFolderChildFoldersMessagesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listchildFolders = client.getUsers().getById(_user.getId()).getRootFolder().getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getUsers().getById(_user.getId()).getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getUsers().getById(_user.getId()).getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().getById(_message.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersRootFolderChildFoldersMessagesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listchildFolders = client.getUsers().getById(_user.getId()).getRootFolder().getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getUsers().getById(_user.getId()).getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().getById(_message.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersRootFolderChildFoldersMessagesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listchildFolders = client.getUsers().getById(_user.getId()).getRootFolder().getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getUsers().getById(_user.getId()).getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().getById(_message.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersRootFolderChildFoldersMessagesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listchildFolders = client.getUsers().getById(_user.getId()).getRootFolder().getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getUsers().getById(_user.getId()).getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().getById(_message.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersRootFolderChildFoldersMessagesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listchildFolders = client.getUsers().getById(_user.getId()).getRootFolder().getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getUsers().getById(_user.getId()).getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().getById(_message.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersRootFolderChildFoldersSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listchildFolders = client.getUsers().getById(_user.getId()).getRootFolder().getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getRootFolder().getChildFolders().getById(_childFolder.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersRootFolderChildFoldersSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listchildFolders = client.getUsers().getById(_user.getId()).getRootFolder().getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getRootFolder().getChildFolders().getById(_childFolder.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersRootFolderChildFoldersMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listchildFolders = client.getUsers().getById(_user.getId()).getRootFolder().getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getRootFolder().getChildFolders().getById(_childFolder.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersRootFolderChildFoldersMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listchildFolders = client.getUsers().getById(_user.getId()).getRootFolder().getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getRootFolder().getChildFolders().getById(_childFolder.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersRootFolderSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getRootFolder().getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersRootFolderSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getRootFolder().getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersRootFolderMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getRootFolder().getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersRootFolderMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getRootFolder().getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersAggregatedSocialActivities(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                List<AggregatedSocialActivity> _aggregatedSocialActivities = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().read().get();
                        
                        if (_aggregatedSocialActivities != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersAggregatedSocialActivities(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    AggregatedSocialActivity sampleAggregatedSocialActivity = getSampleAggregatedSocialActivity();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                AggregatedSocialActivity _createdaggregatedSocialActivity = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().add(sampleAggregatedSocialActivity).get();
                    
                    if (_createdaggregatedSocialActivity != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersAggregatedSocialActivitiesItem(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                                Event _item = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().read().get();
                        
                        if (_item != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersAggregatedSocialActivitiesItemCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                                Calendar _calendar = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getCalendar().read().get();
                        
                        if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersAggregatedSocialActivitiesItemCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getCalendar().getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersAggregatedSocialActivitiesItemCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getCalendar().getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersAggregatedSocialActivitiesItemCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getCalendar().getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersAggregatedSocialActivitiesItemCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getCalendar().getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersAggregatedSocialActivitiesItemInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                                List<Event> _instances = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().read().get();
                        
                        if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersAggregatedSocialActivitiesItemInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                                Event _createdinstance = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().add(sampleEvent).get();
                    
                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersAggregatedSocialActivitiesItemInstancesCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Calendar _calendar = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().getById(_instance.getId()).getCalendar().read().get();
                        
                        if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersAggregatedSocialActivitiesItemInstancesCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().getById(_instance.getId()).getCalendar().getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersAggregatedSocialActivitiesItemInstancesCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().getById(_instance.getId()).getCalendar().getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersAggregatedSocialActivitiesItemInstancesCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().getById(_instance.getId()).getCalendar().getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersAggregatedSocialActivitiesItemInstancesCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().getById(_instance.getId()).getCalendar().getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersAggregatedSocialActivitiesItemInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().getById(_instance.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersAggregatedSocialActivitiesItemInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().getById(_instance.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersAggregatedSocialActivitiesItemInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().getById(_instance.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersAggregatedSocialActivitiesItemInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersAggregatedSocialActivitiesItemInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersAggregatedSocialActivitiesItemInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersAggregatedSocialActivitiesItemInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersAggregatedSocialActivitiesItemInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersAggregatedSocialActivitiesItemExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersAggregatedSocialActivitiesItemExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersAggregatedSocialActivitiesItemAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersAggregatedSocialActivitiesItemAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersAggregatedSocialActivitiesItemSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersAggregatedSocialActivitiesItemSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersAggregatedSocialActivitiesItemMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersAggregatedSocialActivitiesItemMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getUsers().getById(_user.getId()).getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersPhoto(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                Photo _photo = client.getUsers().getById(_user.getId()).getPhoto().read().get();
                        
                        if (_photo != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersPhotos(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                List<Photo> _photos = client.getUsers().getById(_user.getId()).getPhotos().read().get();
                        
                        if (_photos != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersPhotos(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Photo samplePhoto = getSamplePhoto();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                Photo _createdphoto = client.getUsers().getById(_user.getId()).getPhotos().add(samplePhoto).get();
                    
                    if (_createdphoto != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersDrives(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                List<Drive> _drives = client.getUsers().getById(_user.getId()).getDrives().read().get();
                        
                        if (_drives != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersDrives(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Drive sampleDrive = getSampleDrive();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                Drive _createddrife = client.getUsers().getById(_user.getId()).getDrives().add(sampleDrive).get();
                    
                    if (_createddrife != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersDrivesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Drive> _listdrives = client.getUsers().getById(_user.getId()).getDrives().read().get();
            Drive _drife = _listdrives == null? null : _listdrives.get(0);
            
            if(_drife == null){
                throw new Exception("Drife not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getUsers().getById(_user.getId()).getDrives().getById(_drife.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersDrivesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Drive> _listdrives = client.getUsers().getById(_user.getId()).getDrives().read().get();
            Drive _drife = _listdrives == null? null : _listdrives.get(0);
            
            if(_drife == null){
                throw new Exception("Drife not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getUsers().getById(_user.getId()).getDrives().getById(_drife.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersDrivesFiles(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Drive> _listdrives = client.getUsers().getById(_user.getId()).getDrives().read().get();
            Drive _drife = _listdrives == null? null : _listdrives.get(0);
            
            if(_drife == null){
                throw new Exception("Drife not available. Can't proceed with the test.");
            }
            
                                List<File> _files = client.getUsers().getById(_user.getId()).getDrives().getById(_drife.getId()).getFiles().read().get();
                        
                        if (_files != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersDrivesFiles(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    File sampleFile = getSampleFile();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Drive> _listdrives = client.getUsers().getById(_user.getId()).getDrives().read().get();
            Drive _drife = _listdrives == null? null : _listdrives.get(0);
            
            if(_drife == null){
                throw new Exception("Drife not available. Can't proceed with the test.");
            }
            
                                File _createdfile = client.getUsers().getById(_user.getId()).getDrives().getById(_drife.getId()).getFiles().add(sampleFile).get();
                    
                    if (_createdfile != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersDrivesFilesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Drive> _listdrives = client.getUsers().getById(_user.getId()).getDrives().read().get();
            Drive _drife = _listdrives == null? null : _listdrives.get(0);
            
            if(_drife == null){
                throw new Exception("Drife not available. Can't proceed with the test.");
            }
            
                            
            List<File> _listfiles = client.getUsers().getById(_user.getId()).getDrives().getById(_drife.getId()).getFiles().read().get();
            File _file = _listfiles == null? null : _listfiles.get(0);
            
            if(_file == null){
                throw new Exception("File not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getUsers().getById(_user.getId()).getDrives().getById(_drife.getId()).getFiles().getById(_file.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersDrivesFilesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<Drive> _listdrives = client.getUsers().getById(_user.getId()).getDrives().read().get();
            Drive _drife = _listdrives == null? null : _listdrives.get(0);
            
            if(_drife == null){
                throw new Exception("Drife not available. Can't proceed with the test.");
            }
            
                            
            List<File> _listfiles = client.getUsers().getById(_user.getId()).getDrives().getById(_drife.getId()).getFiles().read().get();
            File _file = _listfiles == null? null : _listfiles.get(0);
            
            if(_file == null){
                throw new Exception("File not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getUsers().getById(_user.getId()).getDrives().getById(_drife.getId()).getFiles().getById(_file.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersWorkingWithEntities(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                List<WorkingWithEntity> _workingWithEntities = client.getUsers().getById(_user.getId()).getWorkingWithEntities().read().get();
                        
                        if (_workingWithEntities != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersWorkingWithEntities(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    WorkingWithEntity sampleWorkingWithEntity = getSampleWorkingWithEntity();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                                WorkingWithEntity _createdworkingWithEntity = client.getUsers().getById(_user.getId()).getWorkingWithEntities().add(sampleWorkingWithEntity).get();
                    
                    if (_createdworkingWithEntity != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetUsersWorkingWithEntitiesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<WorkingWithEntity> _listworkingWithEntities = client.getUsers().getById(_user.getId()).getWorkingWithEntities().read().get();
            WorkingWithEntity _workingWithEntity = _listworkingWithEntities == null? null : _listworkingWithEntities.get(0);
            
            if(_workingWithEntity == null){
                throw new Exception("WorkingWithEntity not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getUsers().getById(_user.getId()).getWorkingWithEntities().getById(_workingWithEntity.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateUsersWorkingWithEntitiesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<User> _listusers = client.getUsers().read().get();
            User _user = _listusers == null? null : _listusers.get(0);
            
            if(_user == null){
                throw new Exception("User not available. Can't proceed with the test.");
            }
            
                            
            List<WorkingWithEntity> _listworkingWithEntities = client.getUsers().getById(_user.getId()).getWorkingWithEntities().read().get();
            WorkingWithEntity _workingWithEntity = _listworkingWithEntities == null? null : _listworkingWithEntities.get(0);
            
            if(_workingWithEntity == null){
                throw new Exception("WorkingWithEntity not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getUsers().getById(_user.getId()).getWorkingWithEntities().getById(_workingWithEntity.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroups(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                    List<Group> _groups = client.getGroups().read().get();
                        
                        if (_groups != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroups(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Group sampleGroup = getSampleGroup();
                    Group _createdgroup = client.getGroups().add(sampleGroup).get();
                    
                    if (_createdgroup != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsThreads(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                                List<ConversationThread> _threads = client.getGroups().getById(_group.getId()).getThreads().read().get();
                        
                        if (_threads != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsThreads(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    ConversationThread sampleConversationThread = getSampleConversationThread();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                                ConversationThread _createdthread = client.getGroups().getById(_group.getId()).getThreads().add(sampleConversationThread).get();
                    
                    if (_createdthread != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsThreadsPosts(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getGroups().getById(_group.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                                List<Post> _posts = client.getGroups().getById(_group.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
                        
                        if (_posts != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsThreadsPosts(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Post samplePost = getSamplePost();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getGroups().getById(_group.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                                Post _createdpost = client.getGroups().getById(_group.getId()).getThreads().getById(_thread.getId()).getPosts().add(samplePost).get();
                    
                    if (_createdpost != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsThreadsPostsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getGroups().getById(_group.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getGroups().getById(_group.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getGroups().getById(_group.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsThreadsPostsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getGroups().getById(_group.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getGroups().getById(_group.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getGroups().getById(_group.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsThreadsPostsInReplyTo(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getGroups().getById(_group.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getGroups().getById(_group.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                Post _inReplyTo = client.getGroups().getById(_group.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().read().get();
                        
                        if (_inReplyTo != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsThreadsPostsInReplyToExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getGroups().getById(_group.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getGroups().getById(_group.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getGroups().getById(_group.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsThreadsPostsInReplyToExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getGroups().getById(_group.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getGroups().getById(_group.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getGroups().getById(_group.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsThreadsPostsInReplyToAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getGroups().getById(_group.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getGroups().getById(_group.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getGroups().getById(_group.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsThreadsPostsInReplyToAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getGroups().getById(_group.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getGroups().getById(_group.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getGroups().getById(_group.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsThreadsPostsInReplyToSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getGroups().getById(_group.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getGroups().getById(_group.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getGroups().getById(_group.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsThreadsPostsInReplyToSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getGroups().getById(_group.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getGroups().getById(_group.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getGroups().getById(_group.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsThreadsPostsInReplyToMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getGroups().getById(_group.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getGroups().getById(_group.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getGroups().getById(_group.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsThreadsPostsInReplyToMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getGroups().getById(_group.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getGroups().getById(_group.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getGroups().getById(_group.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsThreadsPostsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getGroups().getById(_group.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getGroups().getById(_group.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getGroups().getById(_group.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsThreadsPostsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getGroups().getById(_group.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getGroups().getById(_group.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getGroups().getById(_group.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsThreadsPostsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getGroups().getById(_group.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getGroups().getById(_group.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getGroups().getById(_group.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsThreadsPostsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getGroups().getById(_group.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getGroups().getById(_group.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getGroups().getById(_group.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsThreadsPostsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getGroups().getById(_group.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getGroups().getById(_group.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getGroups().getById(_group.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsThreadsPostsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getGroups().getById(_group.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getGroups().getById(_group.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getGroups().getById(_group.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                                Calendar _calendar = client.getGroups().getById(_group.getId()).getCalendar().read().get();
                        
                        if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsCalendarEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                                List<Event> _events = client.getGroups().getById(_group.getId()).getCalendar().getEvents().read().get();
                        
                        if (_events != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsCalendarEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                                Event _createdevent = client.getGroups().getById(_group.getId()).getCalendar().getEvents().add(sampleEvent).get();
                    
                    if (_createdevent != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsCalendarEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<Event> _instances = client.getGroups().getById(_group.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
                        
                        if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsCalendarEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Event _createdinstance = client.getGroups().getById(_group.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().add(sampleEvent).get();
                    
                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsCalendarEventsInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getGroups().getById(_group.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getGroups().getById(_group.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsCalendarEventsInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getGroups().getById(_group.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getGroups().getById(_group.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsCalendarEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getGroups().getById(_group.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getGroups().getById(_group.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsCalendarEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getGroups().getById(_group.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getGroups().getById(_group.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsCalendarEventsInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getGroups().getById(_group.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getGroups().getById(_group.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsCalendarEventsInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getGroups().getById(_group.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getGroups().getById(_group.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsCalendarEventsInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getGroups().getById(_group.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getGroups().getById(_group.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsCalendarEventsInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getGroups().getById(_group.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getGroups().getById(_group.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsCalendarEventsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getGroups().getById(_group.getId()).getCalendar().getEvents().getById(_event.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsCalendarEventsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getGroups().getById(_group.getId()).getCalendar().getEvents().getById(_event.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsCalendarEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getGroups().getById(_group.getId()).getCalendar().getEvents().getById(_event.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsCalendarEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getGroups().getById(_group.getId()).getCalendar().getEvents().getById(_event.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsCalendarEventsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getGroups().getById(_group.getId()).getCalendar().getEvents().getById(_event.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsCalendarEventsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getGroups().getById(_group.getId()).getCalendar().getEvents().getById(_event.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsCalendarEventsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getGroups().getById(_group.getId()).getCalendar().getEvents().getById(_event.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsCalendarEventsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getGroups().getById(_group.getId()).getCalendar().getEvents().getById(_event.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsCalendarCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                                List<Event> _calendarView = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().read().get();
                        
                        if (_calendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsCalendarCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                                Event _createdcalendarView = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().add(sampleEvent).get();
                    
                    if (_createdcalendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsCalendarCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<Event> _instances = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                        
                        if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsCalendarCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Event _createdinstance = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().add(sampleEvent).get();
                    
                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsCalendarCalendarViewInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsCalendarCalendarViewInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsCalendarCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsCalendarCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsCalendarCalendarViewInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsCalendarCalendarViewInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsCalendarCalendarViewInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsCalendarCalendarViewInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsCalendarCalendarViewExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsCalendarCalendarViewExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsCalendarCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsCalendarCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsCalendarCalendarViewSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsCalendarCalendarViewSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsCalendarCalendarViewMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsCalendarCalendarViewMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getGroups().getById(_group.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getGroups().getById(_group.getId()).getCalendar().getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getGroups().getById(_group.getId()).getCalendar().getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getGroups().getById(_group.getId()).getCalendar().getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getGroups().getById(_group.getId()).getCalendar().getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                                List<Event> _calendarView = client.getGroups().getById(_group.getId()).getCalendarView().read().get();
                        
                        if (_calendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                                Event _createdcalendarView = client.getGroups().getById(_group.getId()).getCalendarView().add(sampleEvent).get();
                    
                    if (_createdcalendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsCalendarViewCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Calendar _calendar = client.getGroups().getById(_group.getId()).getCalendarView().getById(_calendarView.getId()).getCalendar().read().get();
                        
                        if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsCalendarViewCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getGroups().getById(_group.getId()).getCalendarView().getById(_calendarView.getId()).getCalendar().getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsCalendarViewCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getGroups().getById(_group.getId()).getCalendarView().getById(_calendarView.getId()).getCalendar().getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsCalendarViewCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getGroups().getById(_group.getId()).getCalendarView().getById(_calendarView.getId()).getCalendar().getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsCalendarViewCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getGroups().getById(_group.getId()).getCalendarView().getById(_calendarView.getId()).getCalendar().getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<Event> _instances = client.getGroups().getById(_group.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                        
                        if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Event _createdinstance = client.getGroups().getById(_group.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().add(sampleEvent).get();
                    
                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsCalendarViewInstancesCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getGroups().getById(_group.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Calendar _calendar = client.getGroups().getById(_group.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getCalendar().read().get();
                        
                        if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsCalendarViewInstancesCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getGroups().getById(_group.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getGroups().getById(_group.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getCalendar().getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsCalendarViewInstancesCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getGroups().getById(_group.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getGroups().getById(_group.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getCalendar().getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsCalendarViewInstancesCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getGroups().getById(_group.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getGroups().getById(_group.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getCalendar().getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsCalendarViewInstancesCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getGroups().getById(_group.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getGroups().getById(_group.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getCalendar().getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsCalendarViewInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getGroups().getById(_group.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getGroups().getById(_group.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsCalendarViewInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getGroups().getById(_group.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getGroups().getById(_group.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getGroups().getById(_group.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getGroups().getById(_group.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getGroups().getById(_group.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getGroups().getById(_group.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsCalendarViewInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getGroups().getById(_group.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getGroups().getById(_group.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsCalendarViewInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getGroups().getById(_group.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getGroups().getById(_group.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsCalendarViewInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getGroups().getById(_group.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getGroups().getById(_group.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsCalendarViewInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getGroups().getById(_group.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getGroups().getById(_group.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsCalendarViewExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getGroups().getById(_group.getId()).getCalendarView().getById(_calendarView.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsCalendarViewExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getGroups().getById(_group.getId()).getCalendarView().getById(_calendarView.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getGroups().getById(_group.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getGroups().getById(_group.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsCalendarViewSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getGroups().getById(_group.getId()).getCalendarView().getById(_calendarView.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsCalendarViewSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getGroups().getById(_group.getId()).getCalendarView().getById(_calendarView.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsCalendarViewMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getGroups().getById(_group.getId()).getCalendarView().getById(_calendarView.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsCalendarViewMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getGroups().getById(_group.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getGroups().getById(_group.getId()).getCalendarView().getById(_calendarView.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                                List<Event> _events = client.getGroups().getById(_group.getId()).getEvents().read().get();
                        
                        if (_events != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                                Event _createdevent = client.getGroups().getById(_group.getId()).getEvents().add(sampleEvent).get();
                    
                    if (_createdevent != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsEventsCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Calendar _calendar = client.getGroups().getById(_group.getId()).getEvents().getById(_event.getId()).getCalendar().read().get();
                        
                        if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsEventsCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getGroups().getById(_group.getId()).getEvents().getById(_event.getId()).getCalendar().getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsEventsCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getGroups().getById(_group.getId()).getEvents().getById(_event.getId()).getCalendar().getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsEventsCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getGroups().getById(_group.getId()).getEvents().getById(_event.getId()).getCalendar().getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsEventsCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getGroups().getById(_group.getId()).getEvents().getById(_event.getId()).getCalendar().getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<Event> _instances = client.getGroups().getById(_group.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
                        
                        if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Event _createdinstance = client.getGroups().getById(_group.getId()).getEvents().getById(_event.getId()).getInstances().add(sampleEvent).get();
                    
                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsEventsInstancesCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getGroups().getById(_group.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Calendar _calendar = client.getGroups().getById(_group.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getCalendar().read().get();
                        
                        if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsEventsInstancesCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getGroups().getById(_group.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getGroups().getById(_group.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getCalendar().getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsEventsInstancesCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getGroups().getById(_group.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getGroups().getById(_group.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getCalendar().getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsEventsInstancesCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getGroups().getById(_group.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getGroups().getById(_group.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getCalendar().getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsEventsInstancesCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getGroups().getById(_group.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getGroups().getById(_group.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getCalendar().getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsEventsInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getGroups().getById(_group.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getGroups().getById(_group.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsEventsInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getGroups().getById(_group.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getGroups().getById(_group.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getGroups().getById(_group.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getGroups().getById(_group.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getGroups().getById(_group.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getGroups().getById(_group.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsEventsInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getGroups().getById(_group.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getGroups().getById(_group.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsEventsInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getGroups().getById(_group.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getGroups().getById(_group.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsEventsInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getGroups().getById(_group.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getGroups().getById(_group.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsEventsInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getGroups().getById(_group.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getGroups().getById(_group.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsEventsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getGroups().getById(_group.getId()).getEvents().getById(_event.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsEventsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getGroups().getById(_group.getId()).getEvents().getById(_event.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getGroups().getById(_group.getId()).getEvents().getById(_event.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getGroups().getById(_group.getId()).getEvents().getById(_event.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsEventsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getGroups().getById(_group.getId()).getEvents().getById(_event.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsEventsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getGroups().getById(_group.getId()).getEvents().getById(_event.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsEventsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getGroups().getById(_group.getId()).getEvents().getById(_event.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsEventsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getGroups().getById(_group.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getGroups().getById(_group.getId()).getEvents().getById(_event.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsConversations(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                                List<Conversation> _conversations = client.getGroups().getById(_group.getId()).getConversations().read().get();
                        
                        if (_conversations != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsConversations(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Conversation sampleConversation = getSampleConversation();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                                Conversation _createdconversation = client.getGroups().getById(_group.getId()).getConversations().add(sampleConversation).get();
                    
                    if (_createdconversation != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsConversationsThreads(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getGroups().getById(_group.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                                List<ConversationThread> _threads = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
                        
                        if (_threads != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsConversationsThreads(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    ConversationThread sampleConversationThread = getSampleConversationThread();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getGroups().getById(_group.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                                ConversationThread _createdthread = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().add(sampleConversationThread).get();
                    
                    if (_createdthread != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsConversationsThreadsPosts(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getGroups().getById(_group.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                                List<Post> _posts = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
                        
                        if (_posts != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsConversationsThreadsPosts(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Post samplePost = getSamplePost();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getGroups().getById(_group.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                                Post _createdpost = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().add(samplePost).get();
                    
                    if (_createdpost != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsConversationsThreadsPostsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getGroups().getById(_group.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsConversationsThreadsPostsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getGroups().getById(_group.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsConversationsThreadsPostsInReplyTo(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getGroups().getById(_group.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                Post _inReplyTo = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().read().get();
                        
                        if (_inReplyTo != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsConversationsThreadsPostsInReplyToExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getGroups().getById(_group.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsConversationsThreadsPostsInReplyToExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getGroups().getById(_group.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsConversationsThreadsPostsInReplyToAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getGroups().getById(_group.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsConversationsThreadsPostsInReplyToAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getGroups().getById(_group.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsConversationsThreadsPostsInReplyToSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getGroups().getById(_group.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsConversationsThreadsPostsInReplyToSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getGroups().getById(_group.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsConversationsThreadsPostsInReplyToMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getGroups().getById(_group.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsConversationsThreadsPostsInReplyToMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getGroups().getById(_group.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsConversationsThreadsPostsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getGroups().getById(_group.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsConversationsThreadsPostsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getGroups().getById(_group.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsConversationsThreadsPostsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getGroups().getById(_group.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsConversationsThreadsPostsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getGroups().getById(_group.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsConversationsThreadsPostsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getGroups().getById(_group.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsConversationsThreadsPostsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getGroups().getById(_group.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getGroups().getById(_group.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsSubscriptions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                                List<Subscription> _subscriptions = client.getGroups().getById(_group.getId()).getSubscriptions().read().get();
                        
                        if (_subscriptions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsSubscriptions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Subscription sampleSubscription = getSampleSubscription();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                                Subscription _createdsubscription = client.getGroups().getById(_group.getId()).getSubscriptions().add(sampleSubscription).get();
                    
                    if (_createdsubscription != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsPhoto(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                                Photo _photo = client.getGroups().getById(_group.getId()).getPhoto().read().get();
                        
                        if (_photo != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsPhotos(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                                List<Photo> _photos = client.getGroups().getById(_group.getId()).getPhotos().read().get();
                        
                        if (_photos != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsPhotos(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Photo samplePhoto = getSamplePhoto();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                                Photo _createdphoto = client.getGroups().getById(_group.getId()).getPhotos().add(samplePhoto).get();
                    
                    if (_createdphoto != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsAcceptedSenders(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                                List<DirectoryObject> _acceptedSenders = client.getGroups().getById(_group.getId()).getAcceptedSenders().read().get();
                        
                        if (_acceptedSenders != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsAcceptedSenders(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                                DirectoryObject _createdacceptedSender = client.getGroups().getById(_group.getId()).getAcceptedSenders().add(sampleDirectoryObject).get();
                    
                    if (_createdacceptedSender != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetGroupsRejectedSenders(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                                List<DirectoryObject> _rejectedSenders = client.getGroups().getById(_group.getId()).getRejectedSenders().read().get();
                        
                        if (_rejectedSenders != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateGroupsRejectedSenders(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();
                
            List<Group> _listgroups = client.getGroups().read().get();
            Group _group = _listgroups == null? null : _listgroups.get(0);
            
            if(_group == null){
                throw new Exception("Group not available. Can't proceed with the test.");
            }
            
                                DirectoryObject _createdrejectedSender = client.getGroups().getById(_group.getId()).getRejectedSenders().add(sampleDirectoryObject).get();
                    
                    if (_createdrejectedSender != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMe(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                    User _me = client.getMe().read().get();
                        
                        if (_me != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeSubscriptions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                    List<Subscription> _subscriptions = client.getMe().getSubscriptions().read().get();
                        
                        if (_subscriptions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeSubscriptions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Subscription sampleSubscription = getSampleSubscription();
                    Subscription _createdsubscription = client.getMe().getSubscriptions().add(sampleSubscription).get();
                    
                    if (_createdsubscription != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeMessages(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                    List<Message> _messages = client.getMe().getMessages().read().get();
                        
                        if (_messages != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeMessages(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Message sampleMessage = getSampleMessage();
                    Message _createdmessage = client.getMe().getMessages().add(sampleMessage).get();
                    
                    if (_createdmessage != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeMessagesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Message> _listmessages = client.getMe().getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getMe().getMessages().getById(_message.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeMessagesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<Message> _listmessages = client.getMe().getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getMe().getMessages().getById(_message.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeMessagesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Message> _listmessages = client.getMe().getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getMe().getMessages().getById(_message.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeMessagesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<Message> _listmessages = client.getMe().getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getMe().getMessages().getById(_message.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeMessagesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Message> _listmessages = client.getMe().getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getMessages().getById(_message.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeMessagesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Message> _listmessages = client.getMe().getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getMessages().getById(_message.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeMessagesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Message> _listmessages = client.getMe().getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getMessages().getById(_message.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeMessagesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Message> _listmessages = client.getMe().getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getMessages().getById(_message.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroups(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                    List<Group> _joinedGroups = client.getMe().getJoinedGroups().read().get();
                        
                        if (_joinedGroups != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroups(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Group sampleGroup = getSampleGroup();
                    Group _createdjoinedGroup = client.getMe().getJoinedGroups().add(sampleGroup).get();
                    
                    if (_createdjoinedGroup != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsThreads(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                List<ConversationThread> _threads = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().read().get();
                        
                        if (_threads != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsThreads(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    ConversationThread sampleConversationThread = getSampleConversationThread();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                ConversationThread _createdthread = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().add(sampleConversationThread).get();
                    
                    if (_createdthread != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsThreadsPosts(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                                List<Post> _posts = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
                        
                        if (_posts != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsThreadsPosts(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Post samplePost = getSamplePost();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                                Post _createdpost = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().add(samplePost).get();
                    
                    if (_createdpost != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsThreadsPostsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsThreadsPostsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsThreadsPostsInReplyTo(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                Post _inReplyTo = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().read().get();
                        
                        if (_inReplyTo != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsThreadsPostsInReplyToExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsThreadsPostsInReplyToExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsThreadsPostsInReplyToAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsThreadsPostsInReplyToAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsThreadsPostsInReplyToSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsThreadsPostsInReplyToSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsThreadsPostsInReplyToMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsThreadsPostsInReplyToMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsThreadsPostsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsThreadsPostsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsThreadsPostsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsThreadsPostsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsThreadsPostsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsThreadsPostsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                Calendar _calendar = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().read().get();
                        
                        if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsCalendarEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                List<Event> _events = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().read().get();
                        
                        if (_events != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsCalendarEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                Event _createdevent = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().add(sampleEvent).get();
                    
                    if (_createdevent != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsCalendarEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<Event> _instances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
                        
                        if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsCalendarEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Event _createdinstance = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().add(sampleEvent).get();
                    
                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsCalendarEventsInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsCalendarEventsInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsCalendarEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsCalendarEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsCalendarEventsInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsCalendarEventsInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsCalendarEventsInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsCalendarEventsInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsCalendarEventsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsCalendarEventsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsCalendarEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsCalendarEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsCalendarEventsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsCalendarEventsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsCalendarEventsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsCalendarEventsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getEvents().getById(_event.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsCalendarCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                List<Event> _calendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().read().get();
                        
                        if (_calendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsCalendarCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                Event _createdcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().add(sampleEvent).get();
                    
                    if (_createdcalendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsCalendarCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<Event> _instances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                        
                        if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsCalendarCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Event _createdinstance = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().add(sampleEvent).get();
                    
                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsCalendarCalendarViewInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsCalendarCalendarViewInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsCalendarCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsCalendarCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsCalendarCalendarViewInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsCalendarCalendarViewInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsCalendarCalendarViewInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsCalendarCalendarViewInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsCalendarCalendarViewExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsCalendarCalendarViewExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsCalendarCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsCalendarCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsCalendarCalendarViewSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsCalendarCalendarViewSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsCalendarCalendarViewMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsCalendarCalendarViewMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getCalendarView().getById(_calendarView.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendar().getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                List<Event> _calendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
                        
                        if (_calendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                Event _createdcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().add(sampleEvent).get();
                    
                    if (_createdcalendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsCalendarViewCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Calendar _calendar = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getCalendar().read().get();
                        
                        if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsCalendarViewCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getCalendar().getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsCalendarViewCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getCalendar().getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsCalendarViewCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getCalendar().getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsCalendarViewCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getCalendar().getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<Event> _instances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                        
                        if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Event _createdinstance = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().add(sampleEvent).get();
                    
                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsCalendarViewInstancesCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Calendar _calendar = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getCalendar().read().get();
                        
                        if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsCalendarViewInstancesCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getCalendar().getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsCalendarViewInstancesCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getCalendar().getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsCalendarViewInstancesCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getCalendar().getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsCalendarViewInstancesCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getCalendar().getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsCalendarViewInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsCalendarViewInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsCalendarViewInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsCalendarViewInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsCalendarViewInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsCalendarViewInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsCalendarViewExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsCalendarViewExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsCalendarViewSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsCalendarViewSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsCalendarViewMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsCalendarViewMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getCalendarView().getById(_calendarView.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                List<Event> _events = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
                        
                        if (_events != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                Event _createdevent = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().add(sampleEvent).get();
                    
                    if (_createdevent != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsEventsCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Calendar _calendar = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getCalendar().read().get();
                        
                        if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsEventsCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getCalendar().getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsEventsCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getCalendar().getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsEventsCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getCalendar().getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsEventsCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getCalendar().getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<Event> _instances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
                        
                        if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Event _createdinstance = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().add(sampleEvent).get();
                    
                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsEventsInstancesCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Calendar _calendar = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getCalendar().read().get();
                        
                        if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsEventsInstancesCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getCalendar().getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsEventsInstancesCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getCalendar().getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsEventsInstancesCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getCalendar().getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsEventsInstancesCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getCalendar().getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsEventsInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsEventsInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsEventsInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsEventsInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsEventsInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsEventsInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsEventsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsEventsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsEventsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsEventsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsEventsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsEventsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getEvents().getById(_event.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsConversations(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                List<Conversation> _conversations = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
                        
                        if (_conversations != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsConversations(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Conversation sampleConversation = getSampleConversation();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                Conversation _createdconversation = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().add(sampleConversation).get();
                    
                    if (_createdconversation != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsConversationsThreads(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                                List<ConversationThread> _threads = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
                        
                        if (_threads != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsConversationsThreads(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    ConversationThread sampleConversationThread = getSampleConversationThread();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                                ConversationThread _createdthread = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().add(sampleConversationThread).get();
                    
                    if (_createdthread != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsConversationsThreadsPosts(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                                List<Post> _posts = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
                        
                        if (_posts != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsConversationsThreadsPosts(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Post samplePost = getSamplePost();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                                Post _createdpost = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().add(samplePost).get();
                    
                    if (_createdpost != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsConversationsThreadsPostsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsConversationsThreadsPostsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsConversationsThreadsPostsInReplyTo(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                Post _inReplyTo = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().read().get();
                        
                        if (_inReplyTo != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsConversationsThreadsPostsInReplyToExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsConversationsThreadsPostsInReplyToExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsConversationsThreadsPostsInReplyToAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsConversationsThreadsPostsInReplyToAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsConversationsThreadsPostsInReplyToSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsConversationsThreadsPostsInReplyToSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsConversationsThreadsPostsInReplyToMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsConversationsThreadsPostsInReplyToMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getInReplyTo().getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsConversationsThreadsPostsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsConversationsThreadsPostsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsConversationsThreadsPostsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsConversationsThreadsPostsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsConversationsThreadsPostsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsConversationsThreadsPostsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Conversation> _listconversations = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().read().get();
            Conversation _conversation = _listconversations == null? null : _listconversations.get(0);
            
            if(_conversation == null){
                throw new Exception("Conversation not available. Can't proceed with the test.");
            }
            
                            
            List<ConversationThread> _listthreads = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().read().get();
            ConversationThread _thread = _listthreads == null? null : _listthreads.get(0);
            
            if(_thread == null){
                throw new Exception("Thread not available. Can't proceed with the test.");
            }
            
                            
            List<Post> _listposts = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().read().get();
            Post _post = _listposts == null? null : _listposts.get(0);
            
            if(_post == null){
                throw new Exception("Post not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getConversations().getById(_conversation.getId()).getThreads().getById(_thread.getId()).getPosts().getById(_post.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsSubscriptions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                List<Subscription> _subscriptions = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getSubscriptions().read().get();
                        
                        if (_subscriptions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsSubscriptions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Subscription sampleSubscription = getSampleSubscription();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                Subscription _createdsubscription = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getSubscriptions().add(sampleSubscription).get();
                    
                    if (_createdsubscription != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsPhoto(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                Photo _photo = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getPhoto().read().get();
                        
                        if (_photo != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsPhotos(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                List<Photo> _photos = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getPhotos().read().get();
                        
                        if (_photos != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsPhotos(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Photo samplePhoto = getSamplePhoto();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                Photo _createdphoto = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getPhotos().add(samplePhoto).get();
                    
                    if (_createdphoto != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsAcceptedSenders(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                List<DirectoryObject> _acceptedSenders = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getAcceptedSenders().read().get();
                        
                        if (_acceptedSenders != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsAcceptedSenders(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                DirectoryObject _createdacceptedSender = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getAcceptedSenders().add(sampleDirectoryObject).get();
                    
                    if (_createdacceptedSender != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeJoinedGroupsRejectedSenders(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                List<DirectoryObject> _rejectedSenders = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getRejectedSenders().read().get();
                        
                        if (_rejectedSenders != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeJoinedGroupsRejectedSenders(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    DirectoryObject sampleDirectoryObject = getSampleDirectoryObject();
                
            List<Group> _listjoinedGroups = client.getMe().getJoinedGroups().read().get();
            Group _joinedGroup = _listjoinedGroups == null? null : _listjoinedGroups.get(0);
            
            if(_joinedGroup == null){
                throw new Exception("JoinedGroup not available. Can't proceed with the test.");
            }
            
                                DirectoryObject _createdrejectedSender = client.getMe().getJoinedGroups().getById(_joinedGroup.getId()).getRejectedSenders().add(sampleDirectoryObject).get();
                    
                    if (_createdrejectedSender != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeMailFolders(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                    List<MailFolder> _mailFolders = client.getMe().getMailFolders().read().get();
                        
                        if (_mailFolders != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeMailFolders(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MailFolder sampleMailFolder = getSampleMailFolder();
                    MailFolder _createdmailFolder = client.getMe().getMailFolders().add(sampleMailFolder).get();
                    
                    if (_createdmailFolder != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeMailFoldersMessages(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<MailFolder> _listmailFolders = client.getMe().getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                                List<Message> _messages = client.getMe().getMailFolders().getById(_mailFolder.getId()).getMessages().read().get();
                        
                        if (_messages != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeMailFoldersMessages(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Message sampleMessage = getSampleMessage();
                
            List<MailFolder> _listmailFolders = client.getMe().getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                                Message _createdmessage = client.getMe().getMailFolders().getById(_mailFolder.getId()).getMessages().add(sampleMessage).get();
                    
                    if (_createdmessage != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeMailFoldersMessagesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<MailFolder> _listmailFolders = client.getMe().getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getMe().getMailFolders().getById(_mailFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getMe().getMailFolders().getById(_mailFolder.getId()).getMessages().getById(_message.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeMailFoldersMessagesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<MailFolder> _listmailFolders = client.getMe().getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getMe().getMailFolders().getById(_mailFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getMe().getMailFolders().getById(_mailFolder.getId()).getMessages().getById(_message.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeMailFoldersMessagesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<MailFolder> _listmailFolders = client.getMe().getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getMe().getMailFolders().getById(_mailFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getMe().getMailFolders().getById(_mailFolder.getId()).getMessages().getById(_message.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeMailFoldersMessagesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<MailFolder> _listmailFolders = client.getMe().getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getMe().getMailFolders().getById(_mailFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getMe().getMailFolders().getById(_mailFolder.getId()).getMessages().getById(_message.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeMailFoldersMessagesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<MailFolder> _listmailFolders = client.getMe().getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getMe().getMailFolders().getById(_mailFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getMailFolders().getById(_mailFolder.getId()).getMessages().getById(_message.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeMailFoldersMessagesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<MailFolder> _listmailFolders = client.getMe().getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getMe().getMailFolders().getById(_mailFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getMailFolders().getById(_mailFolder.getId()).getMessages().getById(_message.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeMailFoldersMessagesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<MailFolder> _listmailFolders = client.getMe().getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getMe().getMailFolders().getById(_mailFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getMailFolders().getById(_mailFolder.getId()).getMessages().getById(_message.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeMailFoldersMessagesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<MailFolder> _listmailFolders = client.getMe().getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getMe().getMailFolders().getById(_mailFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getMailFolders().getById(_mailFolder.getId()).getMessages().getById(_message.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeMailFoldersChildFolders(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<MailFolder> _listmailFolders = client.getMe().getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                                List<MailFolder> _childFolders = client.getMe().getMailFolders().getById(_mailFolder.getId()).getChildFolders().read().get();
                        
                        if (_childFolders != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeMailFoldersChildFolders(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MailFolder sampleMailFolder = getSampleMailFolder();
                
            List<MailFolder> _listmailFolders = client.getMe().getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                                MailFolder _createdchildFolder = client.getMe().getMailFolders().getById(_mailFolder.getId()).getChildFolders().add(sampleMailFolder).get();
                    
                    if (_createdchildFolder != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeMailFoldersChildFoldersMessages(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<MailFolder> _listmailFolders = client.getMe().getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listchildFolders = client.getMe().getMailFolders().getById(_mailFolder.getId()).getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                                List<Message> _messages = client.getMe().getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
                        
                        if (_messages != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeMailFoldersChildFoldersMessages(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Message sampleMessage = getSampleMessage();
                
            List<MailFolder> _listmailFolders = client.getMe().getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listchildFolders = client.getMe().getMailFolders().getById(_mailFolder.getId()).getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                                Message _createdmessage = client.getMe().getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().add(sampleMessage).get();
                    
                    if (_createdmessage != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeMailFoldersChildFoldersMessagesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<MailFolder> _listmailFolders = client.getMe().getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listchildFolders = client.getMe().getMailFolders().getById(_mailFolder.getId()).getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getMe().getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getMe().getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().getById(_message.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeMailFoldersChildFoldersMessagesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<MailFolder> _listmailFolders = client.getMe().getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listchildFolders = client.getMe().getMailFolders().getById(_mailFolder.getId()).getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getMe().getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getMe().getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().getById(_message.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeMailFoldersChildFoldersMessagesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<MailFolder> _listmailFolders = client.getMe().getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listchildFolders = client.getMe().getMailFolders().getById(_mailFolder.getId()).getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getMe().getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getMe().getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().getById(_message.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeMailFoldersChildFoldersMessagesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<MailFolder> _listmailFolders = client.getMe().getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listchildFolders = client.getMe().getMailFolders().getById(_mailFolder.getId()).getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getMe().getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getMe().getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().getById(_message.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeMailFoldersChildFoldersMessagesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<MailFolder> _listmailFolders = client.getMe().getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listchildFolders = client.getMe().getMailFolders().getById(_mailFolder.getId()).getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getMe().getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().getById(_message.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeMailFoldersChildFoldersMessagesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<MailFolder> _listmailFolders = client.getMe().getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listchildFolders = client.getMe().getMailFolders().getById(_mailFolder.getId()).getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getMe().getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().getById(_message.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeMailFoldersChildFoldersMessagesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<MailFolder> _listmailFolders = client.getMe().getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listchildFolders = client.getMe().getMailFolders().getById(_mailFolder.getId()).getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getMe().getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().getById(_message.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeMailFoldersChildFoldersMessagesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<MailFolder> _listmailFolders = client.getMe().getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listchildFolders = client.getMe().getMailFolders().getById(_mailFolder.getId()).getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getMe().getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().getById(_message.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeMailFoldersChildFoldersSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<MailFolder> _listmailFolders = client.getMe().getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listchildFolders = client.getMe().getMailFolders().getById(_mailFolder.getId()).getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeMailFoldersChildFoldersSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<MailFolder> _listmailFolders = client.getMe().getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listchildFolders = client.getMe().getMailFolders().getById(_mailFolder.getId()).getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeMailFoldersChildFoldersMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<MailFolder> _listmailFolders = client.getMe().getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listchildFolders = client.getMe().getMailFolders().getById(_mailFolder.getId()).getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeMailFoldersChildFoldersMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<MailFolder> _listmailFolders = client.getMe().getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                            
            List<MailFolder> _listchildFolders = client.getMe().getMailFolders().getById(_mailFolder.getId()).getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getMailFolders().getById(_mailFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeMailFoldersSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<MailFolder> _listmailFolders = client.getMe().getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getMailFolders().getById(_mailFolder.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeMailFoldersSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<MailFolder> _listmailFolders = client.getMe().getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getMailFolders().getById(_mailFolder.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeMailFoldersMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<MailFolder> _listmailFolders = client.getMe().getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getMailFolders().getById(_mailFolder.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeMailFoldersMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<MailFolder> _listmailFolders = client.getMe().getMailFolders().read().get();
            MailFolder _mailFolder = _listmailFolders == null? null : _listmailFolders.get(0);
            
            if(_mailFolder == null){
                throw new Exception("MailFolder not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getMailFolders().getById(_mailFolder.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                    Calendar _calendar = client.getMe().getCalendar().read().get();
                        
                        if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                    List<Event> _events = client.getMe().getCalendar().getEvents().read().get();
                        
                        if (_events != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                    Event _createdevent = client.getMe().getCalendar().getEvents().add(sampleEvent).get();
                    
                    if (_createdevent != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listevents = client.getMe().getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<Event> _instances = client.getMe().getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
                        
                        if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<Event> _listevents = client.getMe().getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Event _createdinstance = client.getMe().getCalendar().getEvents().getById(_event.getId()).getInstances().add(sampleEvent).get();
                    
                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarEventsInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listevents = client.getMe().getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getMe().getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarEventsInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<Event> _listevents = client.getMe().getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getMe().getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listevents = client.getMe().getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getMe().getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<Event> _listevents = client.getMe().getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getMe().getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarEventsInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listevents = client.getMe().getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarEventsInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Event> _listevents = client.getMe().getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarEventsInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listevents = client.getMe().getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarEventsInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Event> _listevents = client.getMe().getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarEventsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listevents = client.getMe().getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getMe().getCalendar().getEvents().getById(_event.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarEventsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<Event> _listevents = client.getMe().getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getMe().getCalendar().getEvents().getById(_event.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listevents = client.getMe().getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getMe().getCalendar().getEvents().getById(_event.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<Event> _listevents = client.getMe().getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getMe().getCalendar().getEvents().getById(_event.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarEventsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listevents = client.getMe().getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getCalendar().getEvents().getById(_event.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarEventsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Event> _listevents = client.getMe().getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getCalendar().getEvents().getById(_event.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarEventsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listevents = client.getMe().getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getCalendar().getEvents().getById(_event.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarEventsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Event> _listevents = client.getMe().getCalendar().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getCalendar().getEvents().getById(_event.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                    List<Event> _calendarView = client.getMe().getCalendar().getCalendarView().read().get();
                        
                        if (_calendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                    Event _createdcalendarView = client.getMe().getCalendar().getCalendarView().add(sampleEvent).get();
                    
                    if (_createdcalendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listcalendarView = client.getMe().getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<Event> _instances = client.getMe().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                        
                        if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<Event> _listcalendarView = client.getMe().getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Event _createdinstance = client.getMe().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().add(sampleEvent).get();
                    
                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarCalendarViewInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listcalendarView = client.getMe().getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getMe().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarCalendarViewInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<Event> _listcalendarView = client.getMe().getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getMe().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listcalendarView = client.getMe().getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getMe().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<Event> _listcalendarView = client.getMe().getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getMe().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarCalendarViewInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listcalendarView = client.getMe().getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarCalendarViewInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Event> _listcalendarView = client.getMe().getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarCalendarViewInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listcalendarView = client.getMe().getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarCalendarViewInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Event> _listcalendarView = client.getMe().getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarCalendarViewExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listcalendarView = client.getMe().getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getMe().getCalendar().getCalendarView().getById(_calendarView.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarCalendarViewExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<Event> _listcalendarView = client.getMe().getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getMe().getCalendar().getCalendarView().getById(_calendarView.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listcalendarView = client.getMe().getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getMe().getCalendar().getCalendarView().getById(_calendarView.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<Event> _listcalendarView = client.getMe().getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getMe().getCalendar().getCalendarView().getById(_calendarView.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarCalendarViewSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listcalendarView = client.getMe().getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getCalendar().getCalendarView().getById(_calendarView.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarCalendarViewSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Event> _listcalendarView = client.getMe().getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getCalendar().getCalendarView().getById(_calendarView.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarCalendarViewMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listcalendarView = client.getMe().getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getCalendar().getCalendarView().getById(_calendarView.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarCalendarViewMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Event> _listcalendarView = client.getMe().getCalendar().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getCalendar().getCalendarView().getById(_calendarView.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                    List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getCalendar().getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                    SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getCalendar().getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                    List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getCalendar().getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                    MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getCalendar().getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendars(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                    List<Calendar> _calendars = client.getMe().getCalendars().read().get();
                        
                        if (_calendars != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendars(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Calendar sampleCalendar = getSampleCalendar();
                    Calendar _createdcalendar = client.getMe().getCalendars().add(sampleCalendar).get();
                    
                    if (_createdcalendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarsEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                                List<Event> _events = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().read().get();
                        
                        if (_events != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarsEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                                Event _createdevent = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().add(sampleEvent).get();
                    
                    if (_createdevent != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarsEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<Event> _instances = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
                        
                        if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarsEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Event _createdinstance = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().add(sampleEvent).get();
                    
                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarsEventsInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarsEventsInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarsEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarsEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarsEventsInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarsEventsInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarsEventsInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarsEventsInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarsEventsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarsEventsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarsEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarsEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarsEventsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarsEventsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarsEventsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarsEventsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarsCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                                List<Event> _calendarView = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                        
                        if (_calendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarsCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                                Event _createdcalendarView = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().add(sampleEvent).get();
                    
                    if (_createdcalendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarsCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<Event> _instances = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                        
                        if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarsCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Event _createdinstance = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().add(sampleEvent).get();
                    
                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarsCalendarViewInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarsCalendarViewInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarsCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarsCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarsCalendarViewInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarsCalendarViewInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarsCalendarViewInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarsCalendarViewInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarsCalendarViewExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarsCalendarViewExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarsCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarsCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarsCalendarViewSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarsCalendarViewSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarsCalendarViewMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarsCalendarViewMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getCalendars().getById(_calendar.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getCalendars().getById(_calendar.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getCalendars().getById(_calendar.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getCalendars().getById(_calendar.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarGroups(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                    List<CalendarGroup> _calendarGroups = client.getMe().getCalendarGroups().read().get();
                        
                        if (_calendarGroups != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarGroups(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    CalendarGroup sampleCalendarGroup = getSampleCalendarGroup();
                    CalendarGroup _createdcalendarGroup = client.getMe().getCalendarGroups().add(sampleCalendarGroup).get();
                    
                    if (_createdcalendarGroup != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarGroupsCalendars(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                                List<Calendar> _calendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                        
                        if (_calendars != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarGroupsCalendars(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Calendar sampleCalendar = getSampleCalendar();
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                                Calendar _createdcalendar = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().add(sampleCalendar).get();
                    
                    if (_createdcalendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarGroupsCalendarsEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                                List<Event> _events = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                        
                        if (_events != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarGroupsCalendarsEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                                Event _createdevent = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().add(sampleEvent).get();
                    
                    if (_createdevent != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarGroupsCalendarsEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<Event> _instances = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
                        
                        if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarGroupsCalendarsEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Event _createdinstance = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().add(sampleEvent).get();
                    
                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarGroupsCalendarsEventsInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarGroupsCalendarsEventsInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarGroupsCalendarsEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarGroupsCalendarsEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarGroupsCalendarsEventsInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarGroupsCalendarsEventsInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarGroupsCalendarsEventsInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarGroupsCalendarsEventsInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarGroupsCalendarsEventsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarGroupsCalendarsEventsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarGroupsCalendarsEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarGroupsCalendarsEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarGroupsCalendarsEventsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarGroupsCalendarsEventsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarGroupsCalendarsEventsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarGroupsCalendarsEventsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listevents = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarGroupsCalendarsCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                                List<Event> _calendarView = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                        
                        if (_calendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarGroupsCalendarsCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                                Event _createdcalendarView = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().add(sampleEvent).get();
                    
                    if (_createdcalendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarGroupsCalendarsCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<Event> _instances = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                        
                        if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarGroupsCalendarsCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Event _createdinstance = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().add(sampleEvent).get();
                    
                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarGroupsCalendarsCalendarViewInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarGroupsCalendarsCalendarViewInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarGroupsCalendarsCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarGroupsCalendarsCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarGroupsCalendarsCalendarViewInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarGroupsCalendarsCalendarViewInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarGroupsCalendarsCalendarViewInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarGroupsCalendarsCalendarViewInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarGroupsCalendarsCalendarViewExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarGroupsCalendarsCalendarViewExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarGroupsCalendarsCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarGroupsCalendarsCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarGroupsCalendarsCalendarViewSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarGroupsCalendarsCalendarViewSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarGroupsCalendarsCalendarViewMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarGroupsCalendarsCalendarViewMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listcalendarView = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarGroupsCalendarsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarGroupsCalendarsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarGroupsCalendarsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarGroupsCalendarsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
            CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);
            
            if(_calendarGroup == null){
                throw new Exception("CalendarGroup not available. Can't proceed with the test.");
            }
            
                            
            List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
            Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);
            
            if(_calendar == null){
                throw new Exception("Calendar not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                    List<Event> _calendarView = client.getMe().getCalendarView().read().get();
                        
                        if (_calendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                    Event _createdcalendarView = client.getMe().getCalendarView().add(sampleEvent).get();
                    
                    if (_createdcalendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarViewCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Calendar _calendar = client.getMe().getCalendarView().getById(_calendarView.getId()).getCalendar().read().get();
                        
                        if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarViewCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getCalendarView().getById(_calendarView.getId()).getCalendar().getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarViewCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getCalendarView().getById(_calendarView.getId()).getCalendar().getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarViewCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getCalendarView().getById(_calendarView.getId()).getCalendar().getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarViewCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getCalendarView().getById(_calendarView.getId()).getCalendar().getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<Event> _instances = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                        
                        if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Event _createdinstance = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().add(sampleEvent).get();
                    
                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarViewInstancesCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Calendar _calendar = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getCalendar().read().get();
                        
                        if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarViewInstancesCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getCalendar().getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarViewInstancesCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getCalendar().getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarViewInstancesCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getCalendar().getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarViewInstancesCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getCalendar().getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarViewInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarViewInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarViewInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarViewInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarViewInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarViewInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarViewExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getMe().getCalendarView().getById(_calendarView.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarViewExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getMe().getCalendarView().getById(_calendarView.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getMe().getCalendarView().getById(_calendarView.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getMe().getCalendarView().getById(_calendarView.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarViewSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getCalendarView().getById(_calendarView.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarViewSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getCalendarView().getById(_calendarView.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeCalendarViewMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getCalendarView().getById(_calendarView.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeCalendarViewMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
            Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);
            
            if(_calendarView == null){
                throw new Exception("CalendarView not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getCalendarView().getById(_calendarView.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                    List<Event> _events = client.getMe().getEvents().read().get();
                        
                        if (_events != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                    Event _createdevent = client.getMe().getEvents().add(sampleEvent).get();
                    
                    if (_createdevent != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeEventsCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listevents = client.getMe().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Calendar _calendar = client.getMe().getEvents().getById(_event.getId()).getCalendar().read().get();
                        
                        if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeEventsCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listevents = client.getMe().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getEvents().getById(_event.getId()).getCalendar().getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeEventsCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Event> _listevents = client.getMe().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getEvents().getById(_event.getId()).getCalendar().getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeEventsCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listevents = client.getMe().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getEvents().getById(_event.getId()).getCalendar().getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeEventsCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Event> _listevents = client.getMe().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getEvents().getById(_event.getId()).getCalendar().getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listevents = client.getMe().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<Event> _instances = client.getMe().getEvents().getById(_event.getId()).getInstances().read().get();
                        
                        if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<Event> _listevents = client.getMe().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Event _createdinstance = client.getMe().getEvents().getById(_event.getId()).getInstances().add(sampleEvent).get();
                    
                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeEventsInstancesCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listevents = client.getMe().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Calendar _calendar = client.getMe().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getCalendar().read().get();
                        
                        if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeEventsInstancesCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listevents = client.getMe().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getCalendar().getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeEventsInstancesCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Event> _listevents = client.getMe().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getCalendar().getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeEventsInstancesCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listevents = client.getMe().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getCalendar().getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeEventsInstancesCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Event> _listevents = client.getMe().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getCalendar().getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeEventsInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listevents = client.getMe().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getMe().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeEventsInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<Event> _listevents = client.getMe().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getMe().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listevents = client.getMe().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getMe().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<Event> _listevents = client.getMe().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getMe().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeEventsInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listevents = client.getMe().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeEventsInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Event> _listevents = client.getMe().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeEventsInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listevents = client.getMe().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeEventsInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Event> _listevents = client.getMe().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getEvents().getById(_event.getId()).getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeEventsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listevents = client.getMe().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getMe().getEvents().getById(_event.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeEventsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<Event> _listevents = client.getMe().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getMe().getEvents().getById(_event.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listevents = client.getMe().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getMe().getEvents().getById(_event.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<Event> _listevents = client.getMe().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getMe().getEvents().getById(_event.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeEventsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listevents = client.getMe().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getEvents().getById(_event.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeEventsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Event> _listevents = client.getMe().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getEvents().getById(_event.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeEventsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Event> _listevents = client.getMe().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getEvents().getById(_event.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeEventsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Event> _listevents = client.getMe().getEvents().read().get();
            Event _event = _listevents == null? null : _listevents.get(0);
            
            if(_event == null){
                throw new Exception("Event not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getEvents().getById(_event.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMePeople(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                    List<Person> _people = client.getMe().getPeople().read().get();
                        
                        if (_people != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMePeople(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Person samplePerson = getSamplePerson();
                    Person _createdperson = client.getMe().getPeople().add(samplePerson).get();
                    
                    if (_createdperson != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeContacts(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                    List<Contact> _contacts = client.getMe().getContacts().read().get();
                        
                        if (_contacts != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeContacts(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Contact sampleContact = getSampleContact();
                    Contact _createdcontact = client.getMe().getContacts().add(sampleContact).get();
                    
                    if (_createdcontact != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeContactsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Contact> _listcontacts = client.getMe().getContacts().read().get();
            Contact _contact = _listcontacts == null? null : _listcontacts.get(0);
            
            if(_contact == null){
                throw new Exception("Contact not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getMe().getContacts().getById(_contact.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeContactsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<Contact> _listcontacts = client.getMe().getContacts().read().get();
            Contact _contact = _listcontacts == null? null : _listcontacts.get(0);
            
            if(_contact == null){
                throw new Exception("Contact not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getMe().getContacts().getById(_contact.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeContactsPhoto(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Contact> _listcontacts = client.getMe().getContacts().read().get();
            Contact _contact = _listcontacts == null? null : _listcontacts.get(0);
            
            if(_contact == null){
                throw new Exception("Contact not available. Can't proceed with the test.");
            }
            
                                Photo _photo = client.getMe().getContacts().getById(_contact.getId()).getPhoto().read().get();
                        
                        if (_photo != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeContactsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Contact> _listcontacts = client.getMe().getContacts().read().get();
            Contact _contact = _listcontacts == null? null : _listcontacts.get(0);
            
            if(_contact == null){
                throw new Exception("Contact not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getContacts().getById(_contact.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeContactsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Contact> _listcontacts = client.getMe().getContacts().read().get();
            Contact _contact = _listcontacts == null? null : _listcontacts.get(0);
            
            if(_contact == null){
                throw new Exception("Contact not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getContacts().getById(_contact.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeContactsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Contact> _listcontacts = client.getMe().getContacts().read().get();
            Contact _contact = _listcontacts == null? null : _listcontacts.get(0);
            
            if(_contact == null){
                throw new Exception("Contact not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getContacts().getById(_contact.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeContactsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Contact> _listcontacts = client.getMe().getContacts().read().get();
            Contact _contact = _listcontacts == null? null : _listcontacts.get(0);
            
            if(_contact == null){
                throw new Exception("Contact not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getContacts().getById(_contact.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeContactFolders(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                    List<ContactFolder> _contactFolders = client.getMe().getContactFolders().read().get();
                        
                        if (_contactFolders != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeContactFolders(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    ContactFolder sampleContactFolder = getSampleContactFolder();
                    ContactFolder _createdcontactFolder = client.getMe().getContactFolders().add(sampleContactFolder).get();
                    
                    if (_createdcontactFolder != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeContactFoldersContacts(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<ContactFolder> _listcontactFolders = client.getMe().getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                                List<Contact> _contacts = client.getMe().getContactFolders().getById(_contactFolder.getId()).getContacts().read().get();
                        
                        if (_contacts != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeContactFoldersContacts(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Contact sampleContact = getSampleContact();
                
            List<ContactFolder> _listcontactFolders = client.getMe().getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                                Contact _createdcontact = client.getMe().getContactFolders().getById(_contactFolder.getId()).getContacts().add(sampleContact).get();
                    
                    if (_createdcontact != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeContactFoldersContactsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<ContactFolder> _listcontactFolders = client.getMe().getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Contact> _listcontacts = client.getMe().getContactFolders().getById(_contactFolder.getId()).getContacts().read().get();
            Contact _contact = _listcontacts == null? null : _listcontacts.get(0);
            
            if(_contact == null){
                throw new Exception("Contact not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getMe().getContactFolders().getById(_contactFolder.getId()).getContacts().getById(_contact.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeContactFoldersContactsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<ContactFolder> _listcontactFolders = client.getMe().getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Contact> _listcontacts = client.getMe().getContactFolders().getById(_contactFolder.getId()).getContacts().read().get();
            Contact _contact = _listcontacts == null? null : _listcontacts.get(0);
            
            if(_contact == null){
                throw new Exception("Contact not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getMe().getContactFolders().getById(_contactFolder.getId()).getContacts().getById(_contact.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeContactFoldersContactsPhoto(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<ContactFolder> _listcontactFolders = client.getMe().getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Contact> _listcontacts = client.getMe().getContactFolders().getById(_contactFolder.getId()).getContacts().read().get();
            Contact _contact = _listcontacts == null? null : _listcontacts.get(0);
            
            if(_contact == null){
                throw new Exception("Contact not available. Can't proceed with the test.");
            }
            
                                Photo _photo = client.getMe().getContactFolders().getById(_contactFolder.getId()).getContacts().getById(_contact.getId()).getPhoto().read().get();
                        
                        if (_photo != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeContactFoldersContactsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<ContactFolder> _listcontactFolders = client.getMe().getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Contact> _listcontacts = client.getMe().getContactFolders().getById(_contactFolder.getId()).getContacts().read().get();
            Contact _contact = _listcontacts == null? null : _listcontacts.get(0);
            
            if(_contact == null){
                throw new Exception("Contact not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getContactFolders().getById(_contactFolder.getId()).getContacts().getById(_contact.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeContactFoldersContactsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<ContactFolder> _listcontactFolders = client.getMe().getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Contact> _listcontacts = client.getMe().getContactFolders().getById(_contactFolder.getId()).getContacts().read().get();
            Contact _contact = _listcontacts == null? null : _listcontacts.get(0);
            
            if(_contact == null){
                throw new Exception("Contact not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getContactFolders().getById(_contactFolder.getId()).getContacts().getById(_contact.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeContactFoldersContactsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<ContactFolder> _listcontactFolders = client.getMe().getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Contact> _listcontacts = client.getMe().getContactFolders().getById(_contactFolder.getId()).getContacts().read().get();
            Contact _contact = _listcontacts == null? null : _listcontacts.get(0);
            
            if(_contact == null){
                throw new Exception("Contact not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getContactFolders().getById(_contactFolder.getId()).getContacts().getById(_contact.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeContactFoldersContactsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<ContactFolder> _listcontactFolders = client.getMe().getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Contact> _listcontacts = client.getMe().getContactFolders().getById(_contactFolder.getId()).getContacts().read().get();
            Contact _contact = _listcontacts == null? null : _listcontacts.get(0);
            
            if(_contact == null){
                throw new Exception("Contact not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getContactFolders().getById(_contactFolder.getId()).getContacts().getById(_contact.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeContactFoldersChildFolders(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<ContactFolder> _listcontactFolders = client.getMe().getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                                List<ContactFolder> _childFolders = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().read().get();
                        
                        if (_childFolders != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeContactFoldersChildFolders(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    ContactFolder sampleContactFolder = getSampleContactFolder();
                
            List<ContactFolder> _listcontactFolders = client.getMe().getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                                ContactFolder _createdchildFolder = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().add(sampleContactFolder).get();
                    
                    if (_createdchildFolder != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeContactFoldersChildFoldersContacts(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<ContactFolder> _listcontactFolders = client.getMe().getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listchildFolders = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().read().get();
            ContactFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                                List<Contact> _contacts = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getContacts().read().get();
                        
                        if (_contacts != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeContactFoldersChildFoldersContacts(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Contact sampleContact = getSampleContact();
                
            List<ContactFolder> _listcontactFolders = client.getMe().getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listchildFolders = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().read().get();
            ContactFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                                Contact _createdcontact = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getContacts().add(sampleContact).get();
                    
                    if (_createdcontact != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeContactFoldersChildFoldersContactsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<ContactFolder> _listcontactFolders = client.getMe().getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listchildFolders = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().read().get();
            ContactFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Contact> _listcontacts = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getContacts().read().get();
            Contact _contact = _listcontacts == null? null : _listcontacts.get(0);
            
            if(_contact == null){
                throw new Exception("Contact not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getContacts().getById(_contact.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeContactFoldersChildFoldersContactsExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<ContactFolder> _listcontactFolders = client.getMe().getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listchildFolders = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().read().get();
            ContactFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Contact> _listcontacts = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getContacts().read().get();
            Contact _contact = _listcontacts == null? null : _listcontacts.get(0);
            
            if(_contact == null){
                throw new Exception("Contact not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getContacts().getById(_contact.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeContactFoldersChildFoldersContactsPhoto(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<ContactFolder> _listcontactFolders = client.getMe().getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listchildFolders = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().read().get();
            ContactFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Contact> _listcontacts = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getContacts().read().get();
            Contact _contact = _listcontacts == null? null : _listcontacts.get(0);
            
            if(_contact == null){
                throw new Exception("Contact not available. Can't proceed with the test.");
            }
            
                                Photo _photo = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getContacts().getById(_contact.getId()).getPhoto().read().get();
                        
                        if (_photo != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeContactFoldersChildFoldersContactsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<ContactFolder> _listcontactFolders = client.getMe().getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listchildFolders = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().read().get();
            ContactFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Contact> _listcontacts = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getContacts().read().get();
            Contact _contact = _listcontacts == null? null : _listcontacts.get(0);
            
            if(_contact == null){
                throw new Exception("Contact not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getContacts().getById(_contact.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeContactFoldersChildFoldersContactsSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<ContactFolder> _listcontactFolders = client.getMe().getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listchildFolders = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().read().get();
            ContactFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Contact> _listcontacts = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getContacts().read().get();
            Contact _contact = _listcontacts == null? null : _listcontacts.get(0);
            
            if(_contact == null){
                throw new Exception("Contact not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getContacts().getById(_contact.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeContactFoldersChildFoldersContactsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<ContactFolder> _listcontactFolders = client.getMe().getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listchildFolders = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().read().get();
            ContactFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Contact> _listcontacts = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getContacts().read().get();
            Contact _contact = _listcontacts == null? null : _listcontacts.get(0);
            
            if(_contact == null){
                throw new Exception("Contact not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getContacts().getById(_contact.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeContactFoldersChildFoldersContactsMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<ContactFolder> _listcontactFolders = client.getMe().getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listchildFolders = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().read().get();
            ContactFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Contact> _listcontacts = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getContacts().read().get();
            Contact _contact = _listcontacts == null? null : _listcontacts.get(0);
            
            if(_contact == null){
                throw new Exception("Contact not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getContacts().getById(_contact.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeContactFoldersChildFoldersSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<ContactFolder> _listcontactFolders = client.getMe().getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listchildFolders = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().read().get();
            ContactFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeContactFoldersChildFoldersSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<ContactFolder> _listcontactFolders = client.getMe().getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listchildFolders = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().read().get();
            ContactFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeContactFoldersChildFoldersMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<ContactFolder> _listcontactFolders = client.getMe().getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listchildFolders = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().read().get();
            ContactFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeContactFoldersChildFoldersMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<ContactFolder> _listcontactFolders = client.getMe().getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                            
            List<ContactFolder> _listchildFolders = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().read().get();
            ContactFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeContactFoldersSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<ContactFolder> _listcontactFolders = client.getMe().getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getContactFolders().getById(_contactFolder.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeContactFoldersSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<ContactFolder> _listcontactFolders = client.getMe().getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getContactFolders().getById(_contactFolder.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeContactFoldersMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<ContactFolder> _listcontactFolders = client.getMe().getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getContactFolders().getById(_contactFolder.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeContactFoldersMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<ContactFolder> _listcontactFolders = client.getMe().getContactFolders().read().get();
            ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);
            
            if(_contactFolder == null){
                throw new Exception("ContactFolder not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getContactFolders().getById(_contactFolder.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeInferenceClassification(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                    InferenceClassification _inferenceClassification = client.getMe().getInferenceClassification().read().get();
                        
                        if (_inferenceClassification != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeInferenceClassificationOverrides(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                    List<InferenceClassificationOverride> _overrides = client.getMe().getInferenceClassification().getOverrides().read().get();
                        
                        if (_overrides != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeInferenceClassificationOverrides(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    InferenceClassificationOverride sampleInferenceClassificationOverride = getSampleInferenceClassificationOverride();
                    InferenceClassificationOverride _createdoverride = client.getMe().getInferenceClassification().getOverrides().add(sampleInferenceClassificationOverride).get();
                    
                    if (_createdoverride != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeRootFolder(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                    MailFolder _rootFolder = client.getMe().getRootFolder().read().get();
                        
                        if (_rootFolder != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeRootFolderMessages(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                    List<Message> _messages = client.getMe().getRootFolder().getMessages().read().get();
                        
                        if (_messages != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeRootFolderMessages(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Message sampleMessage = getSampleMessage();
                    Message _createdmessage = client.getMe().getRootFolder().getMessages().add(sampleMessage).get();
                    
                    if (_createdmessage != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeRootFolderMessagesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Message> _listmessages = client.getMe().getRootFolder().getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getMe().getRootFolder().getMessages().getById(_message.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeRootFolderMessagesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<Message> _listmessages = client.getMe().getRootFolder().getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getMe().getRootFolder().getMessages().getById(_message.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeRootFolderMessagesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Message> _listmessages = client.getMe().getRootFolder().getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getMe().getRootFolder().getMessages().getById(_message.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeRootFolderMessagesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<Message> _listmessages = client.getMe().getRootFolder().getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getMe().getRootFolder().getMessages().getById(_message.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeRootFolderMessagesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Message> _listmessages = client.getMe().getRootFolder().getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getRootFolder().getMessages().getById(_message.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeRootFolderMessagesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<Message> _listmessages = client.getMe().getRootFolder().getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getRootFolder().getMessages().getById(_message.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeRootFolderMessagesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Message> _listmessages = client.getMe().getRootFolder().getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getRootFolder().getMessages().getById(_message.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeRootFolderMessagesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<Message> _listmessages = client.getMe().getRootFolder().getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getRootFolder().getMessages().getById(_message.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeRootFolderChildFolders(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                    List<MailFolder> _childFolders = client.getMe().getRootFolder().getChildFolders().read().get();
                        
                        if (_childFolders != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeRootFolderChildFolders(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MailFolder sampleMailFolder = getSampleMailFolder();
                    MailFolder _createdchildFolder = client.getMe().getRootFolder().getChildFolders().add(sampleMailFolder).get();
                    
                    if (_createdchildFolder != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeRootFolderChildFoldersMessages(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<MailFolder> _listchildFolders = client.getMe().getRootFolder().getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                                List<Message> _messages = client.getMe().getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
                        
                        if (_messages != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeRootFolderChildFoldersMessages(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Message sampleMessage = getSampleMessage();
                
            List<MailFolder> _listchildFolders = client.getMe().getRootFolder().getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                                Message _createdmessage = client.getMe().getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().add(sampleMessage).get();
                    
                    if (_createdmessage != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeRootFolderChildFoldersMessagesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<MailFolder> _listchildFolders = client.getMe().getRootFolder().getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getMe().getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getMe().getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().getById(_message.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeRootFolderChildFoldersMessagesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<MailFolder> _listchildFolders = client.getMe().getRootFolder().getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getMe().getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getMe().getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().getById(_message.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeRootFolderChildFoldersMessagesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<MailFolder> _listchildFolders = client.getMe().getRootFolder().getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getMe().getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getMe().getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().getById(_message.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeRootFolderChildFoldersMessagesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<MailFolder> _listchildFolders = client.getMe().getRootFolder().getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getMe().getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getMe().getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().getById(_message.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeRootFolderChildFoldersMessagesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<MailFolder> _listchildFolders = client.getMe().getRootFolder().getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getMe().getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().getById(_message.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeRootFolderChildFoldersMessagesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<MailFolder> _listchildFolders = client.getMe().getRootFolder().getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getMe().getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().getById(_message.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeRootFolderChildFoldersMessagesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<MailFolder> _listchildFolders = client.getMe().getRootFolder().getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getMe().getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().getById(_message.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeRootFolderChildFoldersMessagesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<MailFolder> _listchildFolders = client.getMe().getRootFolder().getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                            
            List<Message> _listmessages = client.getMe().getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
            Message _message = _listmessages == null? null : _listmessages.get(0);
            
            if(_message == null){
                throw new Exception("Message not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().getById(_message.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeRootFolderChildFoldersSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<MailFolder> _listchildFolders = client.getMe().getRootFolder().getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getRootFolder().getChildFolders().getById(_childFolder.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeRootFolderChildFoldersSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<MailFolder> _listchildFolders = client.getMe().getRootFolder().getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getRootFolder().getChildFolders().getById(_childFolder.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeRootFolderChildFoldersMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<MailFolder> _listchildFolders = client.getMe().getRootFolder().getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getRootFolder().getChildFolders().getById(_childFolder.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeRootFolderChildFoldersMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<MailFolder> _listchildFolders = client.getMe().getRootFolder().getChildFolders().read().get();
            MailFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);
            
            if(_childFolder == null){
                throw new Exception("ChildFolder not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getRootFolder().getChildFolders().getById(_childFolder.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeRootFolderSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                    List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getRootFolder().getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeRootFolderSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                    SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getRootFolder().getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeRootFolderMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                    List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getRootFolder().getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeRootFolderMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                    MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getRootFolder().getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeAggregatedSocialActivities(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                    List<AggregatedSocialActivity> _aggregatedSocialActivities = client.getMe().getAggregatedSocialActivities().read().get();
                        
                        if (_aggregatedSocialActivities != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeAggregatedSocialActivities(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    AggregatedSocialActivity sampleAggregatedSocialActivity = getSampleAggregatedSocialActivity();
                    AggregatedSocialActivity _createdaggregatedSocialActivity = client.getMe().getAggregatedSocialActivities().add(sampleAggregatedSocialActivity).get();
                    
                    if (_createdaggregatedSocialActivity != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeAggregatedSocialActivitiesItem(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getMe().getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                                Event _item = client.getMe().getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().read().get();
                        
                        if (_item != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeAggregatedSocialActivitiesItemCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getMe().getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                                Calendar _calendar = client.getMe().getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getCalendar().read().get();
                        
                        if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeAggregatedSocialActivitiesItemCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getMe().getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getCalendar().getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeAggregatedSocialActivitiesItemCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getMe().getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getCalendar().getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeAggregatedSocialActivitiesItemCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getMe().getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getCalendar().getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeAggregatedSocialActivitiesItemCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getMe().getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getCalendar().getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeAggregatedSocialActivitiesItemInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getMe().getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                                List<Event> _instances = client.getMe().getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().read().get();
                        
                        if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeAggregatedSocialActivitiesItemInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Event sampleEvent = getSampleEvent();
                
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getMe().getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                                Event _createdinstance = client.getMe().getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().add(sampleEvent).get();
                    
                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeAggregatedSocialActivitiesItemInstancesCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getMe().getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Calendar _calendar = client.getMe().getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().getById(_instance.getId()).getCalendar().read().get();
                        
                        if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeAggregatedSocialActivitiesItemInstancesCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getMe().getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().getById(_instance.getId()).getCalendar().getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeAggregatedSocialActivitiesItemInstancesCalendarSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getMe().getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().getById(_instance.getId()).getCalendar().getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeAggregatedSocialActivitiesItemInstancesCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getMe().getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().getById(_instance.getId()).getCalendar().getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeAggregatedSocialActivitiesItemInstancesCalendarMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getMe().getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().getById(_instance.getId()).getCalendar().getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeAggregatedSocialActivitiesItemInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getMe().getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getMe().getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().getById(_instance.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeAggregatedSocialActivitiesItemInstancesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getMe().getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getMe().getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().getById(_instance.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeAggregatedSocialActivitiesItemInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getMe().getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getMe().getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().getById(_instance.getId()).getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeAggregatedSocialActivitiesItemInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getMe().getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getMe().getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeAggregatedSocialActivitiesItemInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getMe().getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeAggregatedSocialActivitiesItemInstancesSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getMe().getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().getById(_instance.getId()).getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeAggregatedSocialActivitiesItemInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getMe().getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeAggregatedSocialActivitiesItemInstancesMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getMe().getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                            
            List<Event> _listinstances = client.getMe().getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().read().get();
            Event _instance = _listinstances == null? null : _listinstances.get(0);
            
            if(_instance == null){
                throw new Exception("Instance not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getInstances().getById(_instance.getId()).getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeAggregatedSocialActivitiesItemExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getMe().getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getMe().getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeAggregatedSocialActivitiesItemExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getMe().getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getMe().getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeAggregatedSocialActivitiesItemAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getMe().getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                                List<Attachment> _attachments = client.getMe().getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getAttachments().read().get();
                        
                        if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeAggregatedSocialActivitiesItemAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Attachment sampleAttachment = getSampleAttachment();
                
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getMe().getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                                Attachment _createdattachment = client.getMe().getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getAttachments().add(sampleAttachment).get();
                    
                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeAggregatedSocialActivitiesItemSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getMe().getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                                List<SingleValueLegacyExtendedProperty> _singleValueExtendedProperties = client.getMe().getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getSingleValueExtendedProperties().read().get();
                        
                        if (_singleValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeAggregatedSocialActivitiesItemSingleValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = getSampleSingleValueLegacyExtendedProperty();
                
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getMe().getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                                SingleValueLegacyExtendedProperty _createdsingleValueExtendedProperty = client.getMe().getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getSingleValueExtendedProperties().add(sampleSingleValueLegacyExtendedProperty).get();
                    
                    if (_createdsingleValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeAggregatedSocialActivitiesItemMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getMe().getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                                List<MultiValueLegacyExtendedProperty> _multiValueExtendedProperties = client.getMe().getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getMultiValueExtendedProperties().read().get();
                        
                        if (_multiValueExtendedProperties != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeAggregatedSocialActivitiesItemMultiValueExtendedProperties(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = getSampleMultiValueLegacyExtendedProperty();
                
            List<AggregatedSocialActivity> _listaggregatedSocialActivities = client.getMe().getAggregatedSocialActivities().read().get();
            AggregatedSocialActivity _aggregatedSocialActivity = _listaggregatedSocialActivities == null? null : _listaggregatedSocialActivities.get(0);
            
            if(_aggregatedSocialActivity == null){
                throw new Exception("AggregatedSocialActivity not available. Can't proceed with the test.");
            }
            
                                MultiValueLegacyExtendedProperty _createdmultiValueExtendedProperty = client.getMe().getAggregatedSocialActivities().getById(_aggregatedSocialActivity.getId()).getItem().getMultiValueExtendedProperties().add(sampleMultiValueLegacyExtendedProperty).get();
                    
                    if (_createdmultiValueExtendedProperty != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMePhoto(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                    Photo _photo = client.getMe().getPhoto().read().get();
                        
                        if (_photo != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMePhotos(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                    List<Photo> _photos = client.getMe().getPhotos().read().get();
                        
                        if (_photos != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMePhotos(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Photo samplePhoto = getSamplePhoto();
                    Photo _createdphoto = client.getMe().getPhotos().add(samplePhoto).get();
                    
                    if (_createdphoto != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeDrives(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                    List<Drive> _drives = client.getMe().getDrives().read().get();
                        
                        if (_drives != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeDrives(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Drive sampleDrive = getSampleDrive();
                    Drive _createddrife = client.getMe().getDrives().add(sampleDrive).get();
                    
                    if (_createddrife != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeDrivesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Drive> _listdrives = client.getMe().getDrives().read().get();
            Drive _drife = _listdrives == null? null : _listdrives.get(0);
            
            if(_drife == null){
                throw new Exception("Drife not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getMe().getDrives().getById(_drife.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeDrivesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<Drive> _listdrives = client.getMe().getDrives().read().get();
            Drive _drife = _listdrives == null? null : _listdrives.get(0);
            
            if(_drife == null){
                throw new Exception("Drife not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getMe().getDrives().getById(_drife.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeDrivesFiles(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Drive> _listdrives = client.getMe().getDrives().read().get();
            Drive _drife = _listdrives == null? null : _listdrives.get(0);
            
            if(_drife == null){
                throw new Exception("Drife not available. Can't proceed with the test.");
            }
            
                                List<File> _files = client.getMe().getDrives().getById(_drife.getId()).getFiles().read().get();
                        
                        if (_files != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeDrivesFiles(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    File sampleFile = getSampleFile();
                
            List<Drive> _listdrives = client.getMe().getDrives().read().get();
            Drive _drife = _listdrives == null? null : _listdrives.get(0);
            
            if(_drife == null){
                throw new Exception("Drife not available. Can't proceed with the test.");
            }
            
                                File _createdfile = client.getMe().getDrives().getById(_drife.getId()).getFiles().add(sampleFile).get();
                    
                    if (_createdfile != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeDrivesFilesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<Drive> _listdrives = client.getMe().getDrives().read().get();
            Drive _drife = _listdrives == null? null : _listdrives.get(0);
            
            if(_drife == null){
                throw new Exception("Drife not available. Can't proceed with the test.");
            }
            
                            
            List<File> _listfiles = client.getMe().getDrives().getById(_drife.getId()).getFiles().read().get();
            File _file = _listfiles == null? null : _listfiles.get(0);
            
            if(_file == null){
                throw new Exception("File not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getMe().getDrives().getById(_drife.getId()).getFiles().getById(_file.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeDrivesFilesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<Drive> _listdrives = client.getMe().getDrives().read().get();
            Drive _drife = _listdrives == null? null : _listdrives.get(0);
            
            if(_drife == null){
                throw new Exception("Drife not available. Can't proceed with the test.");
            }
            
                            
            List<File> _listfiles = client.getMe().getDrives().getById(_drife.getId()).getFiles().read().get();
            File _file = _listfiles == null? null : _listfiles.get(0);
            
            if(_file == null){
                throw new Exception("File not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getMe().getDrives().getById(_drife.getId()).getFiles().getById(_file.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeWorkingWithEntities(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                    List<WorkingWithEntity> _workingWithEntities = client.getMe().getWorkingWithEntities().read().get();
                        
                        if (_workingWithEntities != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeWorkingWithEntities(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    WorkingWithEntity sampleWorkingWithEntity = getSampleWorkingWithEntity();
                    WorkingWithEntity _createdworkingWithEntity = client.getMe().getWorkingWithEntities().add(sampleWorkingWithEntity).get();
                    
                    if (_createdworkingWithEntity != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canGetMeWorkingWithEntitiesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
   
                
            List<WorkingWithEntity> _listworkingWithEntities = client.getMe().getWorkingWithEntities().read().get();
            WorkingWithEntity _workingWithEntity = _listworkingWithEntities == null? null : _listworkingWithEntities.get(0);
            
            if(_workingWithEntity == null){
                throw new Exception("WorkingWithEntity not available. Can't proceed with the test.");
            }
            
                                List<Extension> _extensions = client.getMe().getWorkingWithEntities().getById(_workingWithEntity.getId()).getExtensions().read().get();
                        
                        if (_extensions != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
      private TestCase canCreateMeWorkingWithEntitiesExtensions(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();
                    
                    Extension sampleExtension = getSampleExtension();
                
            List<WorkingWithEntity> _listworkingWithEntities = client.getMe().getWorkingWithEntities().read().get();
            WorkingWithEntity _workingWithEntity = _listworkingWithEntities == null? null : _listworkingWithEntities.get(0);
            
            if(_workingWithEntity == null){
                throw new Exception("WorkingWithEntity not available. Can't proceed with the test.");
            }
            
                                Extension _createdextension = client.getMe().getWorkingWithEntities().getById(_workingWithEntity.getId()).getExtensions().add(sampleExtension).get();
                    
                    if (_createdextension != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }

     public OutlookClientTests() {
        super("Outlook Tests");
    }

    public OutlookClientTests(List<PropertyFilter> filters, Set<String> notSupportedTests ){
        this();
        mFiller = new ObjectFiller();
        mNotSupportedTests = notSupportedTests;

        for (PropertyFilter pf : filters) {
            mFiller.addPropertyFilter(pf);
        }

                this.addTest(canGetUsers("Can get Users", getTestStatus("canGetUsers")));
        this.addTest(canCreateUsers("Can create canCreateUsers", getTestStatus("canCreateUsers")));
        this.addTest(canGetUsersSubscriptions("Can get UsersSubscriptions", getTestStatus("canGetUsersSubscriptions")));
        this.addTest(canCreateUsersSubscriptions("Can create canCreateUsersSubscriptions", getTestStatus("canCreateUsersSubscriptions")));
        this.addTest(canGetUsersMessages("Can get UsersMessages", getTestStatus("canGetUsersMessages")));
        this.addTest(canCreateUsersMessages("Can create canCreateUsersMessages", getTestStatus("canCreateUsersMessages")));
        this.addTest(canGetUsersMessagesExtensions("Can get UsersMessagesExtensions", getTestStatus("canGetUsersMessagesExtensions")));
        this.addTest(canCreateUsersMessagesExtensions("Can create canCreateUsersMessagesExtensions", getTestStatus("canCreateUsersMessagesExtensions")));
        this.addTest(canGetUsersMessagesAttachments("Can get UsersMessagesAttachments", getTestStatus("canGetUsersMessagesAttachments")));
        this.addTest(canCreateUsersMessagesAttachments("Can create canCreateUsersMessagesAttachments", getTestStatus("canCreateUsersMessagesAttachments")));
        this.addTest(canGetUsersMessagesSingleValueExtendedProperties("Can get UsersMessagesSingleValueExtendedProperties", getTestStatus("canGetUsersMessagesSingleValueExtendedProperties")));
        this.addTest(canCreateUsersMessagesSingleValueExtendedProperties("Can create canCreateUsersMessagesSingleValueExtendedProperties", getTestStatus("canCreateUsersMessagesSingleValueExtendedProperties")));
        this.addTest(canGetUsersMessagesMultiValueExtendedProperties("Can get UsersMessagesMultiValueExtendedProperties", getTestStatus("canGetUsersMessagesMultiValueExtendedProperties")));
        this.addTest(canCreateUsersMessagesMultiValueExtendedProperties("Can create canCreateUsersMessagesMultiValueExtendedProperties", getTestStatus("canCreateUsersMessagesMultiValueExtendedProperties")));
        this.addTest(canGetUsersJoinedGroups("Can get UsersJoinedGroups", getTestStatus("canGetUsersJoinedGroups")));
        this.addTest(canCreateUsersJoinedGroups("Can create canCreateUsersJoinedGroups", getTestStatus("canCreateUsersJoinedGroups")));
        this.addTest(canGetUsersJoinedGroupsThreads("Can get UsersJoinedGroupsThreads", getTestStatus("canGetUsersJoinedGroupsThreads")));
        this.addTest(canCreateUsersJoinedGroupsThreads("Can create canCreateUsersJoinedGroupsThreads", getTestStatus("canCreateUsersJoinedGroupsThreads")));
        this.addTest(canGetUsersJoinedGroupsThreadsPosts("Can get UsersJoinedGroupsThreadsPosts", getTestStatus("canGetUsersJoinedGroupsThreadsPosts")));
        this.addTest(canCreateUsersJoinedGroupsThreadsPosts("Can create canCreateUsersJoinedGroupsThreadsPosts", getTestStatus("canCreateUsersJoinedGroupsThreadsPosts")));
        this.addTest(canGetUsersJoinedGroupsThreadsPostsExtensions("Can get UsersJoinedGroupsThreadsPostsExtensions", getTestStatus("canGetUsersJoinedGroupsThreadsPostsExtensions")));
        this.addTest(canCreateUsersJoinedGroupsThreadsPostsExtensions("Can create canCreateUsersJoinedGroupsThreadsPostsExtensions", getTestStatus("canCreateUsersJoinedGroupsThreadsPostsExtensions")));
        this.addTest(canGetUsersJoinedGroupsThreadsPostsInReplyTo("Can get UsersJoinedGroupsThreadsPostsInReplyTo", getTestStatus("canGetUsersJoinedGroupsThreadsPostsInReplyTo")));
        this.addTest(canGetUsersJoinedGroupsThreadsPostsInReplyToExtensions("Can get UsersJoinedGroupsThreadsPostsInReplyToExtensions", getTestStatus("canGetUsersJoinedGroupsThreadsPostsInReplyToExtensions")));
        this.addTest(canCreateUsersJoinedGroupsThreadsPostsInReplyToExtensions("Can create canCreateUsersJoinedGroupsThreadsPostsInReplyToExtensions", getTestStatus("canCreateUsersJoinedGroupsThreadsPostsInReplyToExtensions")));
        this.addTest(canGetUsersJoinedGroupsThreadsPostsInReplyToAttachments("Can get UsersJoinedGroupsThreadsPostsInReplyToAttachments", getTestStatus("canGetUsersJoinedGroupsThreadsPostsInReplyToAttachments")));
        this.addTest(canCreateUsersJoinedGroupsThreadsPostsInReplyToAttachments("Can create canCreateUsersJoinedGroupsThreadsPostsInReplyToAttachments", getTestStatus("canCreateUsersJoinedGroupsThreadsPostsInReplyToAttachments")));
        this.addTest(canGetUsersJoinedGroupsThreadsPostsInReplyToSingleValueExtendedProperties("Can get UsersJoinedGroupsThreadsPostsInReplyToSingleValueExtendedProperties", getTestStatus("canGetUsersJoinedGroupsThreadsPostsInReplyToSingleValueExtendedProperties")));
        this.addTest(canCreateUsersJoinedGroupsThreadsPostsInReplyToSingleValueExtendedProperties("Can create canCreateUsersJoinedGroupsThreadsPostsInReplyToSingleValueExtendedProperties", getTestStatus("canCreateUsersJoinedGroupsThreadsPostsInReplyToSingleValueExtendedProperties")));
        this.addTest(canGetUsersJoinedGroupsThreadsPostsInReplyToMultiValueExtendedProperties("Can get UsersJoinedGroupsThreadsPostsInReplyToMultiValueExtendedProperties", getTestStatus("canGetUsersJoinedGroupsThreadsPostsInReplyToMultiValueExtendedProperties")));
        this.addTest(canCreateUsersJoinedGroupsThreadsPostsInReplyToMultiValueExtendedProperties("Can create canCreateUsersJoinedGroupsThreadsPostsInReplyToMultiValueExtendedProperties", getTestStatus("canCreateUsersJoinedGroupsThreadsPostsInReplyToMultiValueExtendedProperties")));
        this.addTest(canGetUsersJoinedGroupsThreadsPostsAttachments("Can get UsersJoinedGroupsThreadsPostsAttachments", getTestStatus("canGetUsersJoinedGroupsThreadsPostsAttachments")));
        this.addTest(canCreateUsersJoinedGroupsThreadsPostsAttachments("Can create canCreateUsersJoinedGroupsThreadsPostsAttachments", getTestStatus("canCreateUsersJoinedGroupsThreadsPostsAttachments")));
        this.addTest(canGetUsersJoinedGroupsThreadsPostsSingleValueExtendedProperties("Can get UsersJoinedGroupsThreadsPostsSingleValueExtendedProperties", getTestStatus("canGetUsersJoinedGroupsThreadsPostsSingleValueExtendedProperties")));
        this.addTest(canCreateUsersJoinedGroupsThreadsPostsSingleValueExtendedProperties("Can create canCreateUsersJoinedGroupsThreadsPostsSingleValueExtendedProperties", getTestStatus("canCreateUsersJoinedGroupsThreadsPostsSingleValueExtendedProperties")));
        this.addTest(canGetUsersJoinedGroupsThreadsPostsMultiValueExtendedProperties("Can get UsersJoinedGroupsThreadsPostsMultiValueExtendedProperties", getTestStatus("canGetUsersJoinedGroupsThreadsPostsMultiValueExtendedProperties")));
        this.addTest(canCreateUsersJoinedGroupsThreadsPostsMultiValueExtendedProperties("Can create canCreateUsersJoinedGroupsThreadsPostsMultiValueExtendedProperties", getTestStatus("canCreateUsersJoinedGroupsThreadsPostsMultiValueExtendedProperties")));
        this.addTest(canGetUsersJoinedGroupsCalendar("Can get UsersJoinedGroupsCalendar", getTestStatus("canGetUsersJoinedGroupsCalendar")));
        this.addTest(canGetUsersJoinedGroupsCalendarEvents("Can get UsersJoinedGroupsCalendarEvents", getTestStatus("canGetUsersJoinedGroupsCalendarEvents")));
        this.addTest(canCreateUsersJoinedGroupsCalendarEvents("Can create canCreateUsersJoinedGroupsCalendarEvents", getTestStatus("canCreateUsersJoinedGroupsCalendarEvents")));
        this.addTest(canGetUsersJoinedGroupsCalendarEventsInstances("Can get UsersJoinedGroupsCalendarEventsInstances", getTestStatus("canGetUsersJoinedGroupsCalendarEventsInstances")));
        this.addTest(canCreateUsersJoinedGroupsCalendarEventsInstances("Can create canCreateUsersJoinedGroupsCalendarEventsInstances", getTestStatus("canCreateUsersJoinedGroupsCalendarEventsInstances")));
        this.addTest(canGetUsersJoinedGroupsCalendarEventsInstancesExtensions("Can get UsersJoinedGroupsCalendarEventsInstancesExtensions", getTestStatus("canGetUsersJoinedGroupsCalendarEventsInstancesExtensions")));
        this.addTest(canCreateUsersJoinedGroupsCalendarEventsInstancesExtensions("Can create canCreateUsersJoinedGroupsCalendarEventsInstancesExtensions", getTestStatus("canCreateUsersJoinedGroupsCalendarEventsInstancesExtensions")));
        this.addTest(canGetUsersJoinedGroupsCalendarEventsInstancesAttachments("Can get UsersJoinedGroupsCalendarEventsInstancesAttachments", getTestStatus("canGetUsersJoinedGroupsCalendarEventsInstancesAttachments")));
        this.addTest(canCreateUsersJoinedGroupsCalendarEventsInstancesAttachments("Can create canCreateUsersJoinedGroupsCalendarEventsInstancesAttachments", getTestStatus("canCreateUsersJoinedGroupsCalendarEventsInstancesAttachments")));
        this.addTest(canGetUsersJoinedGroupsCalendarEventsInstancesSingleValueExtendedProperties("Can get UsersJoinedGroupsCalendarEventsInstancesSingleValueExtendedProperties", getTestStatus("canGetUsersJoinedGroupsCalendarEventsInstancesSingleValueExtendedProperties")));
        this.addTest(canCreateUsersJoinedGroupsCalendarEventsInstancesSingleValueExtendedProperties("Can create canCreateUsersJoinedGroupsCalendarEventsInstancesSingleValueExtendedProperties", getTestStatus("canCreateUsersJoinedGroupsCalendarEventsInstancesSingleValueExtendedProperties")));
        this.addTest(canGetUsersJoinedGroupsCalendarEventsInstancesMultiValueExtendedProperties("Can get UsersJoinedGroupsCalendarEventsInstancesMultiValueExtendedProperties", getTestStatus("canGetUsersJoinedGroupsCalendarEventsInstancesMultiValueExtendedProperties")));
        this.addTest(canCreateUsersJoinedGroupsCalendarEventsInstancesMultiValueExtendedProperties("Can create canCreateUsersJoinedGroupsCalendarEventsInstancesMultiValueExtendedProperties", getTestStatus("canCreateUsersJoinedGroupsCalendarEventsInstancesMultiValueExtendedProperties")));
        this.addTest(canGetUsersJoinedGroupsCalendarEventsExtensions("Can get UsersJoinedGroupsCalendarEventsExtensions", getTestStatus("canGetUsersJoinedGroupsCalendarEventsExtensions")));
        this.addTest(canCreateUsersJoinedGroupsCalendarEventsExtensions("Can create canCreateUsersJoinedGroupsCalendarEventsExtensions", getTestStatus("canCreateUsersJoinedGroupsCalendarEventsExtensions")));
        this.addTest(canGetUsersJoinedGroupsCalendarEventsAttachments("Can get UsersJoinedGroupsCalendarEventsAttachments", getTestStatus("canGetUsersJoinedGroupsCalendarEventsAttachments")));
        this.addTest(canCreateUsersJoinedGroupsCalendarEventsAttachments("Can create canCreateUsersJoinedGroupsCalendarEventsAttachments", getTestStatus("canCreateUsersJoinedGroupsCalendarEventsAttachments")));
        this.addTest(canGetUsersJoinedGroupsCalendarEventsSingleValueExtendedProperties("Can get UsersJoinedGroupsCalendarEventsSingleValueExtendedProperties", getTestStatus("canGetUsersJoinedGroupsCalendarEventsSingleValueExtendedProperties")));
        this.addTest(canCreateUsersJoinedGroupsCalendarEventsSingleValueExtendedProperties("Can create canCreateUsersJoinedGroupsCalendarEventsSingleValueExtendedProperties", getTestStatus("canCreateUsersJoinedGroupsCalendarEventsSingleValueExtendedProperties")));
        this.addTest(canGetUsersJoinedGroupsCalendarEventsMultiValueExtendedProperties("Can get UsersJoinedGroupsCalendarEventsMultiValueExtendedProperties", getTestStatus("canGetUsersJoinedGroupsCalendarEventsMultiValueExtendedProperties")));
        this.addTest(canCreateUsersJoinedGroupsCalendarEventsMultiValueExtendedProperties("Can create canCreateUsersJoinedGroupsCalendarEventsMultiValueExtendedProperties", getTestStatus("canCreateUsersJoinedGroupsCalendarEventsMultiValueExtendedProperties")));
        this.addTest(canGetUsersJoinedGroupsCalendarCalendarView("Can get UsersJoinedGroupsCalendarCalendarView", getTestStatus("canGetUsersJoinedGroupsCalendarCalendarView")));
        this.addTest(canCreateUsersJoinedGroupsCalendarCalendarView("Can create canCreateUsersJoinedGroupsCalendarCalendarView", getTestStatus("canCreateUsersJoinedGroupsCalendarCalendarView")));
        this.addTest(canGetUsersJoinedGroupsCalendarCalendarViewInstances("Can get UsersJoinedGroupsCalendarCalendarViewInstances", getTestStatus("canGetUsersJoinedGroupsCalendarCalendarViewInstances")));
        this.addTest(canCreateUsersJoinedGroupsCalendarCalendarViewInstances("Can create canCreateUsersJoinedGroupsCalendarCalendarViewInstances", getTestStatus("canCreateUsersJoinedGroupsCalendarCalendarViewInstances")));
        this.addTest(canGetUsersJoinedGroupsCalendarCalendarViewInstancesExtensions("Can get UsersJoinedGroupsCalendarCalendarViewInstancesExtensions", getTestStatus("canGetUsersJoinedGroupsCalendarCalendarViewInstancesExtensions")));
        this.addTest(canCreateUsersJoinedGroupsCalendarCalendarViewInstancesExtensions("Can create canCreateUsersJoinedGroupsCalendarCalendarViewInstancesExtensions", getTestStatus("canCreateUsersJoinedGroupsCalendarCalendarViewInstancesExtensions")));
        this.addTest(canGetUsersJoinedGroupsCalendarCalendarViewInstancesAttachments("Can get UsersJoinedGroupsCalendarCalendarViewInstancesAttachments", getTestStatus("canGetUsersJoinedGroupsCalendarCalendarViewInstancesAttachments")));
        this.addTest(canCreateUsersJoinedGroupsCalendarCalendarViewInstancesAttachments("Can create canCreateUsersJoinedGroupsCalendarCalendarViewInstancesAttachments", getTestStatus("canCreateUsersJoinedGroupsCalendarCalendarViewInstancesAttachments")));
        this.addTest(canGetUsersJoinedGroupsCalendarCalendarViewInstancesSingleValueExtendedProperties("Can get UsersJoinedGroupsCalendarCalendarViewInstancesSingleValueExtendedProperties", getTestStatus("canGetUsersJoinedGroupsCalendarCalendarViewInstancesSingleValueExtendedProperties")));
        this.addTest(canCreateUsersJoinedGroupsCalendarCalendarViewInstancesSingleValueExtendedProperties("Can create canCreateUsersJoinedGroupsCalendarCalendarViewInstancesSingleValueExtendedProperties", getTestStatus("canCreateUsersJoinedGroupsCalendarCalendarViewInstancesSingleValueExtendedProperties")));
        this.addTest(canGetUsersJoinedGroupsCalendarCalendarViewInstancesMultiValueExtendedProperties("Can get UsersJoinedGroupsCalendarCalendarViewInstancesMultiValueExtendedProperties", getTestStatus("canGetUsersJoinedGroupsCalendarCalendarViewInstancesMultiValueExtendedProperties")));
        this.addTest(canCreateUsersJoinedGroupsCalendarCalendarViewInstancesMultiValueExtendedProperties("Can create canCreateUsersJoinedGroupsCalendarCalendarViewInstancesMultiValueExtendedProperties", getTestStatus("canCreateUsersJoinedGroupsCalendarCalendarViewInstancesMultiValueExtendedProperties")));
        this.addTest(canGetUsersJoinedGroupsCalendarCalendarViewExtensions("Can get UsersJoinedGroupsCalendarCalendarViewExtensions", getTestStatus("canGetUsersJoinedGroupsCalendarCalendarViewExtensions")));
        this.addTest(canCreateUsersJoinedGroupsCalendarCalendarViewExtensions("Can create canCreateUsersJoinedGroupsCalendarCalendarViewExtensions", getTestStatus("canCreateUsersJoinedGroupsCalendarCalendarViewExtensions")));
        this.addTest(canGetUsersJoinedGroupsCalendarCalendarViewAttachments("Can get UsersJoinedGroupsCalendarCalendarViewAttachments", getTestStatus("canGetUsersJoinedGroupsCalendarCalendarViewAttachments")));
        this.addTest(canCreateUsersJoinedGroupsCalendarCalendarViewAttachments("Can create canCreateUsersJoinedGroupsCalendarCalendarViewAttachments", getTestStatus("canCreateUsersJoinedGroupsCalendarCalendarViewAttachments")));
        this.addTest(canGetUsersJoinedGroupsCalendarCalendarViewSingleValueExtendedProperties("Can get UsersJoinedGroupsCalendarCalendarViewSingleValueExtendedProperties", getTestStatus("canGetUsersJoinedGroupsCalendarCalendarViewSingleValueExtendedProperties")));
        this.addTest(canCreateUsersJoinedGroupsCalendarCalendarViewSingleValueExtendedProperties("Can create canCreateUsersJoinedGroupsCalendarCalendarViewSingleValueExtendedProperties", getTestStatus("canCreateUsersJoinedGroupsCalendarCalendarViewSingleValueExtendedProperties")));
        this.addTest(canGetUsersJoinedGroupsCalendarCalendarViewMultiValueExtendedProperties("Can get UsersJoinedGroupsCalendarCalendarViewMultiValueExtendedProperties", getTestStatus("canGetUsersJoinedGroupsCalendarCalendarViewMultiValueExtendedProperties")));
        this.addTest(canCreateUsersJoinedGroupsCalendarCalendarViewMultiValueExtendedProperties("Can create canCreateUsersJoinedGroupsCalendarCalendarViewMultiValueExtendedProperties", getTestStatus("canCreateUsersJoinedGroupsCalendarCalendarViewMultiValueExtendedProperties")));
        this.addTest(canGetUsersJoinedGroupsCalendarSingleValueExtendedProperties("Can get UsersJoinedGroupsCalendarSingleValueExtendedProperties", getTestStatus("canGetUsersJoinedGroupsCalendarSingleValueExtendedProperties")));
        this.addTest(canCreateUsersJoinedGroupsCalendarSingleValueExtendedProperties("Can create canCreateUsersJoinedGroupsCalendarSingleValueExtendedProperties", getTestStatus("canCreateUsersJoinedGroupsCalendarSingleValueExtendedProperties")));
        this.addTest(canGetUsersJoinedGroupsCalendarMultiValueExtendedProperties("Can get UsersJoinedGroupsCalendarMultiValueExtendedProperties", getTestStatus("canGetUsersJoinedGroupsCalendarMultiValueExtendedProperties")));
        this.addTest(canCreateUsersJoinedGroupsCalendarMultiValueExtendedProperties("Can create canCreateUsersJoinedGroupsCalendarMultiValueExtendedProperties", getTestStatus("canCreateUsersJoinedGroupsCalendarMultiValueExtendedProperties")));
        this.addTest(canGetUsersJoinedGroupsCalendarView("Can get UsersJoinedGroupsCalendarView", getTestStatus("canGetUsersJoinedGroupsCalendarView")));
        this.addTest(canCreateUsersJoinedGroupsCalendarView("Can create canCreateUsersJoinedGroupsCalendarView", getTestStatus("canCreateUsersJoinedGroupsCalendarView")));
        this.addTest(canGetUsersJoinedGroupsCalendarViewCalendar("Can get UsersJoinedGroupsCalendarViewCalendar", getTestStatus("canGetUsersJoinedGroupsCalendarViewCalendar")));
        this.addTest(canGetUsersJoinedGroupsCalendarViewCalendarSingleValueExtendedProperties("Can get UsersJoinedGroupsCalendarViewCalendarSingleValueExtendedProperties", getTestStatus("canGetUsersJoinedGroupsCalendarViewCalendarSingleValueExtendedProperties")));
        this.addTest(canCreateUsersJoinedGroupsCalendarViewCalendarSingleValueExtendedProperties("Can create canCreateUsersJoinedGroupsCalendarViewCalendarSingleValueExtendedProperties", getTestStatus("canCreateUsersJoinedGroupsCalendarViewCalendarSingleValueExtendedProperties")));
        this.addTest(canGetUsersJoinedGroupsCalendarViewCalendarMultiValueExtendedProperties("Can get UsersJoinedGroupsCalendarViewCalendarMultiValueExtendedProperties", getTestStatus("canGetUsersJoinedGroupsCalendarViewCalendarMultiValueExtendedProperties")));
        this.addTest(canCreateUsersJoinedGroupsCalendarViewCalendarMultiValueExtendedProperties("Can create canCreateUsersJoinedGroupsCalendarViewCalendarMultiValueExtendedProperties", getTestStatus("canCreateUsersJoinedGroupsCalendarViewCalendarMultiValueExtendedProperties")));
        this.addTest(canGetUsersJoinedGroupsCalendarViewInstances("Can get UsersJoinedGroupsCalendarViewInstances", getTestStatus("canGetUsersJoinedGroupsCalendarViewInstances")));
        this.addTest(canCreateUsersJoinedGroupsCalendarViewInstances("Can create canCreateUsersJoinedGroupsCalendarViewInstances", getTestStatus("canCreateUsersJoinedGroupsCalendarViewInstances")));
        this.addTest(canGetUsersJoinedGroupsCalendarViewInstancesCalendar("Can get UsersJoinedGroupsCalendarViewInstancesCalendar", getTestStatus("canGetUsersJoinedGroupsCalendarViewInstancesCalendar")));
        this.addTest(canGetUsersJoinedGroupsCalendarViewInstancesCalendarSingleValueExtendedProperties("Can get UsersJoinedGroupsCalendarViewInstancesCalendarSingleValueExtendedProperties", getTestStatus("canGetUsersJoinedGroupsCalendarViewInstancesCalendarSingleValueExtendedProperties")));
        this.addTest(canCreateUsersJoinedGroupsCalendarViewInstancesCalendarSingleValueExtendedProperties("Can create canCreateUsersJoinedGroupsCalendarViewInstancesCalendarSingleValueExtendedProperties", getTestStatus("canCreateUsersJoinedGroupsCalendarViewInstancesCalendarSingleValueExtendedProperties")));
        this.addTest(canGetUsersJoinedGroupsCalendarViewInstancesCalendarMultiValueExtendedProperties("Can get UsersJoinedGroupsCalendarViewInstancesCalendarMultiValueExtendedProperties", getTestStatus("canGetUsersJoinedGroupsCalendarViewInstancesCalendarMultiValueExtendedProperties")));
        this.addTest(canCreateUsersJoinedGroupsCalendarViewInstancesCalendarMultiValueExtendedProperties("Can create canCreateUsersJoinedGroupsCalendarViewInstancesCalendarMultiValueExtendedProperties", getTestStatus("canCreateUsersJoinedGroupsCalendarViewInstancesCalendarMultiValueExtendedProperties")));
        this.addTest(canGetUsersJoinedGroupsCalendarViewInstancesExtensions("Can get UsersJoinedGroupsCalendarViewInstancesExtensions", getTestStatus("canGetUsersJoinedGroupsCalendarViewInstancesExtensions")));
        this.addTest(canCreateUsersJoinedGroupsCalendarViewInstancesExtensions("Can create canCreateUsersJoinedGroupsCalendarViewInstancesExtensions", getTestStatus("canCreateUsersJoinedGroupsCalendarViewInstancesExtensions")));
        this.addTest(canGetUsersJoinedGroupsCalendarViewInstancesAttachments("Can get UsersJoinedGroupsCalendarViewInstancesAttachments", getTestStatus("canGetUsersJoinedGroupsCalendarViewInstancesAttachments")));
        this.addTest(canCreateUsersJoinedGroupsCalendarViewInstancesAttachments("Can create canCreateUsersJoinedGroupsCalendarViewInstancesAttachments", getTestStatus("canCreateUsersJoinedGroupsCalendarViewInstancesAttachments")));
        this.addTest(canGetUsersJoinedGroupsCalendarViewInstancesSingleValueExtendedProperties("Can get UsersJoinedGroupsCalendarViewInstancesSingleValueExtendedProperties", getTestStatus("canGetUsersJoinedGroupsCalendarViewInstancesSingleValueExtendedProperties")));
        this.addTest(canCreateUsersJoinedGroupsCalendarViewInstancesSingleValueExtendedProperties("Can create canCreateUsersJoinedGroupsCalendarViewInstancesSingleValueExtendedProperties", getTestStatus("canCreateUsersJoinedGroupsCalendarViewInstancesSingleValueExtendedProperties")));
        this.addTest(canGetUsersJoinedGroupsCalendarViewInstancesMultiValueExtendedProperties("Can get UsersJoinedGroupsCalendarViewInstancesMultiValueExtendedProperties", getTestStatus("canGetUsersJoinedGroupsCalendarViewInstancesMultiValueExtendedProperties")));
        this.addTest(canCreateUsersJoinedGroupsCalendarViewInstancesMultiValueExtendedProperties("Can create canCreateUsersJoinedGroupsCalendarViewInstancesMultiValueExtendedProperties", getTestStatus("canCreateUsersJoinedGroupsCalendarViewInstancesMultiValueExtendedProperties")));
        this.addTest(canGetUsersJoinedGroupsCalendarViewExtensions("Can get UsersJoinedGroupsCalendarViewExtensions", getTestStatus("canGetUsersJoinedGroupsCalendarViewExtensions")));
        this.addTest(canCreateUsersJoinedGroupsCalendarViewExtensions("Can create canCreateUsersJoinedGroupsCalendarViewExtensions", getTestStatus("canCreateUsersJoinedGroupsCalendarViewExtensions")));
        this.addTest(canGetUsersJoinedGroupsCalendarViewAttachments("Can get UsersJoinedGroupsCalendarViewAttachments", getTestStatus("canGetUsersJoinedGroupsCalendarViewAttachments")));
        this.addTest(canCreateUsersJoinedGroupsCalendarViewAttachments("Can create canCreateUsersJoinedGroupsCalendarViewAttachments", getTestStatus("canCreateUsersJoinedGroupsCalendarViewAttachments")));
        this.addTest(canGetUsersJoinedGroupsCalendarViewSingleValueExtendedProperties("Can get UsersJoinedGroupsCalendarViewSingleValueExtendedProperties", getTestStatus("canGetUsersJoinedGroupsCalendarViewSingleValueExtendedProperties")));
        this.addTest(canCreateUsersJoinedGroupsCalendarViewSingleValueExtendedProperties("Can create canCreateUsersJoinedGroupsCalendarViewSingleValueExtendedProperties", getTestStatus("canCreateUsersJoinedGroupsCalendarViewSingleValueExtendedProperties")));
        this.addTest(canGetUsersJoinedGroupsCalendarViewMultiValueExtendedProperties("Can get UsersJoinedGroupsCalendarViewMultiValueExtendedProperties", getTestStatus("canGetUsersJoinedGroupsCalendarViewMultiValueExtendedProperties")));
        this.addTest(canCreateUsersJoinedGroupsCalendarViewMultiValueExtendedProperties("Can create canCreateUsersJoinedGroupsCalendarViewMultiValueExtendedProperties", getTestStatus("canCreateUsersJoinedGroupsCalendarViewMultiValueExtendedProperties")));
        this.addTest(canGetUsersJoinedGroupsEvents("Can get UsersJoinedGroupsEvents", getTestStatus("canGetUsersJoinedGroupsEvents")));
        this.addTest(canCreateUsersJoinedGroupsEvents("Can create canCreateUsersJoinedGroupsEvents", getTestStatus("canCreateUsersJoinedGroupsEvents")));
        this.addTest(canGetUsersJoinedGroupsEventsCalendar("Can get UsersJoinedGroupsEventsCalendar", getTestStatus("canGetUsersJoinedGroupsEventsCalendar")));
        this.addTest(canGetUsersJoinedGroupsEventsCalendarSingleValueExtendedProperties("Can get UsersJoinedGroupsEventsCalendarSingleValueExtendedProperties", getTestStatus("canGetUsersJoinedGroupsEventsCalendarSingleValueExtendedProperties")));
        this.addTest(canCreateUsersJoinedGroupsEventsCalendarSingleValueExtendedProperties("Can create canCreateUsersJoinedGroupsEventsCalendarSingleValueExtendedProperties", getTestStatus("canCreateUsersJoinedGroupsEventsCalendarSingleValueExtendedProperties")));
        this.addTest(canGetUsersJoinedGroupsEventsCalendarMultiValueExtendedProperties("Can get UsersJoinedGroupsEventsCalendarMultiValueExtendedProperties", getTestStatus("canGetUsersJoinedGroupsEventsCalendarMultiValueExtendedProperties")));
        this.addTest(canCreateUsersJoinedGroupsEventsCalendarMultiValueExtendedProperties("Can create canCreateUsersJoinedGroupsEventsCalendarMultiValueExtendedProperties", getTestStatus("canCreateUsersJoinedGroupsEventsCalendarMultiValueExtendedProperties")));
        this.addTest(canGetUsersJoinedGroupsEventsInstances("Can get UsersJoinedGroupsEventsInstances", getTestStatus("canGetUsersJoinedGroupsEventsInstances")));
        this.addTest(canCreateUsersJoinedGroupsEventsInstances("Can create canCreateUsersJoinedGroupsEventsInstances", getTestStatus("canCreateUsersJoinedGroupsEventsInstances")));
        this.addTest(canGetUsersJoinedGroupsEventsInstancesCalendar("Can get UsersJoinedGroupsEventsInstancesCalendar", getTestStatus("canGetUsersJoinedGroupsEventsInstancesCalendar")));
        this.addTest(canGetUsersJoinedGroupsEventsInstancesCalendarSingleValueExtendedProperties("Can get UsersJoinedGroupsEventsInstancesCalendarSingleValueExtendedProperties", getTestStatus("canGetUsersJoinedGroupsEventsInstancesCalendarSingleValueExtendedProperties")));
        this.addTest(canCreateUsersJoinedGroupsEventsInstancesCalendarSingleValueExtendedProperties("Can create canCreateUsersJoinedGroupsEventsInstancesCalendarSingleValueExtendedProperties", getTestStatus("canCreateUsersJoinedGroupsEventsInstancesCalendarSingleValueExtendedProperties")));
        this.addTest(canGetUsersJoinedGroupsEventsInstancesCalendarMultiValueExtendedProperties("Can get UsersJoinedGroupsEventsInstancesCalendarMultiValueExtendedProperties", getTestStatus("canGetUsersJoinedGroupsEventsInstancesCalendarMultiValueExtendedProperties")));
        this.addTest(canCreateUsersJoinedGroupsEventsInstancesCalendarMultiValueExtendedProperties("Can create canCreateUsersJoinedGroupsEventsInstancesCalendarMultiValueExtendedProperties", getTestStatus("canCreateUsersJoinedGroupsEventsInstancesCalendarMultiValueExtendedProperties")));
        this.addTest(canGetUsersJoinedGroupsEventsInstancesExtensions("Can get UsersJoinedGroupsEventsInstancesExtensions", getTestStatus("canGetUsersJoinedGroupsEventsInstancesExtensions")));
        this.addTest(canCreateUsersJoinedGroupsEventsInstancesExtensions("Can create canCreateUsersJoinedGroupsEventsInstancesExtensions", getTestStatus("canCreateUsersJoinedGroupsEventsInstancesExtensions")));
        this.addTest(canGetUsersJoinedGroupsEventsInstancesAttachments("Can get UsersJoinedGroupsEventsInstancesAttachments", getTestStatus("canGetUsersJoinedGroupsEventsInstancesAttachments")));
        this.addTest(canCreateUsersJoinedGroupsEventsInstancesAttachments("Can create canCreateUsersJoinedGroupsEventsInstancesAttachments", getTestStatus("canCreateUsersJoinedGroupsEventsInstancesAttachments")));
        this.addTest(canGetUsersJoinedGroupsEventsInstancesSingleValueExtendedProperties("Can get UsersJoinedGroupsEventsInstancesSingleValueExtendedProperties", getTestStatus("canGetUsersJoinedGroupsEventsInstancesSingleValueExtendedProperties")));
        this.addTest(canCreateUsersJoinedGroupsEventsInstancesSingleValueExtendedProperties("Can create canCreateUsersJoinedGroupsEventsInstancesSingleValueExtendedProperties", getTestStatus("canCreateUsersJoinedGroupsEventsInstancesSingleValueExtendedProperties")));
        this.addTest(canGetUsersJoinedGroupsEventsInstancesMultiValueExtendedProperties("Can get UsersJoinedGroupsEventsInstancesMultiValueExtendedProperties", getTestStatus("canGetUsersJoinedGroupsEventsInstancesMultiValueExtendedProperties")));
        this.addTest(canCreateUsersJoinedGroupsEventsInstancesMultiValueExtendedProperties("Can create canCreateUsersJoinedGroupsEventsInstancesMultiValueExtendedProperties", getTestStatus("canCreateUsersJoinedGroupsEventsInstancesMultiValueExtendedProperties")));
        this.addTest(canGetUsersJoinedGroupsEventsExtensions("Can get UsersJoinedGroupsEventsExtensions", getTestStatus("canGetUsersJoinedGroupsEventsExtensions")));
        this.addTest(canCreateUsersJoinedGroupsEventsExtensions("Can create canCreateUsersJoinedGroupsEventsExtensions", getTestStatus("canCreateUsersJoinedGroupsEventsExtensions")));
        this.addTest(canGetUsersJoinedGroupsEventsAttachments("Can get UsersJoinedGroupsEventsAttachments", getTestStatus("canGetUsersJoinedGroupsEventsAttachments")));
        this.addTest(canCreateUsersJoinedGroupsEventsAttachments("Can create canCreateUsersJoinedGroupsEventsAttachments", getTestStatus("canCreateUsersJoinedGroupsEventsAttachments")));
        this.addTest(canGetUsersJoinedGroupsEventsSingleValueExtendedProperties("Can get UsersJoinedGroupsEventsSingleValueExtendedProperties", getTestStatus("canGetUsersJoinedGroupsEventsSingleValueExtendedProperties")));
        this.addTest(canCreateUsersJoinedGroupsEventsSingleValueExtendedProperties("Can create canCreateUsersJoinedGroupsEventsSingleValueExtendedProperties", getTestStatus("canCreateUsersJoinedGroupsEventsSingleValueExtendedProperties")));
        this.addTest(canGetUsersJoinedGroupsEventsMultiValueExtendedProperties("Can get UsersJoinedGroupsEventsMultiValueExtendedProperties", getTestStatus("canGetUsersJoinedGroupsEventsMultiValueExtendedProperties")));
        this.addTest(canCreateUsersJoinedGroupsEventsMultiValueExtendedProperties("Can create canCreateUsersJoinedGroupsEventsMultiValueExtendedProperties", getTestStatus("canCreateUsersJoinedGroupsEventsMultiValueExtendedProperties")));
        this.addTest(canGetUsersJoinedGroupsConversations("Can get UsersJoinedGroupsConversations", getTestStatus("canGetUsersJoinedGroupsConversations")));
        this.addTest(canCreateUsersJoinedGroupsConversations("Can create canCreateUsersJoinedGroupsConversations", getTestStatus("canCreateUsersJoinedGroupsConversations")));
        this.addTest(canGetUsersJoinedGroupsConversationsThreads("Can get UsersJoinedGroupsConversationsThreads", getTestStatus("canGetUsersJoinedGroupsConversationsThreads")));
        this.addTest(canCreateUsersJoinedGroupsConversationsThreads("Can create canCreateUsersJoinedGroupsConversationsThreads", getTestStatus("canCreateUsersJoinedGroupsConversationsThreads")));
        this.addTest(canGetUsersJoinedGroupsConversationsThreadsPosts("Can get UsersJoinedGroupsConversationsThreadsPosts", getTestStatus("canGetUsersJoinedGroupsConversationsThreadsPosts")));
        this.addTest(canCreateUsersJoinedGroupsConversationsThreadsPosts("Can create canCreateUsersJoinedGroupsConversationsThreadsPosts", getTestStatus("canCreateUsersJoinedGroupsConversationsThreadsPosts")));
        this.addTest(canGetUsersJoinedGroupsConversationsThreadsPostsExtensions("Can get UsersJoinedGroupsConversationsThreadsPostsExtensions", getTestStatus("canGetUsersJoinedGroupsConversationsThreadsPostsExtensions")));
        this.addTest(canCreateUsersJoinedGroupsConversationsThreadsPostsExtensions("Can create canCreateUsersJoinedGroupsConversationsThreadsPostsExtensions", getTestStatus("canCreateUsersJoinedGroupsConversationsThreadsPostsExtensions")));
        this.addTest(canGetUsersJoinedGroupsConversationsThreadsPostsInReplyTo("Can get UsersJoinedGroupsConversationsThreadsPostsInReplyTo", getTestStatus("canGetUsersJoinedGroupsConversationsThreadsPostsInReplyTo")));
        this.addTest(canGetUsersJoinedGroupsConversationsThreadsPostsInReplyToExtensions("Can get UsersJoinedGroupsConversationsThreadsPostsInReplyToExtensions", getTestStatus("canGetUsersJoinedGroupsConversationsThreadsPostsInReplyToExtensions")));
        this.addTest(canCreateUsersJoinedGroupsConversationsThreadsPostsInReplyToExtensions("Can create canCreateUsersJoinedGroupsConversationsThreadsPostsInReplyToExtensions", getTestStatus("canCreateUsersJoinedGroupsConversationsThreadsPostsInReplyToExtensions")));
        this.addTest(canGetUsersJoinedGroupsConversationsThreadsPostsInReplyToAttachments("Can get UsersJoinedGroupsConversationsThreadsPostsInReplyToAttachments", getTestStatus("canGetUsersJoinedGroupsConversationsThreadsPostsInReplyToAttachments")));
        this.addTest(canCreateUsersJoinedGroupsConversationsThreadsPostsInReplyToAttachments("Can create canCreateUsersJoinedGroupsConversationsThreadsPostsInReplyToAttachments", getTestStatus("canCreateUsersJoinedGroupsConversationsThreadsPostsInReplyToAttachments")));
        this.addTest(canGetUsersJoinedGroupsConversationsThreadsPostsInReplyToSingleValueExtendedProperties("Can get UsersJoinedGroupsConversationsThreadsPostsInReplyToSingleValueExtendedProperties", getTestStatus("canGetUsersJoinedGroupsConversationsThreadsPostsInReplyToSingleValueExtendedProperties")));
        this.addTest(canCreateUsersJoinedGroupsConversationsThreadsPostsInReplyToSingleValueExtendedProperties("Can create canCreateUsersJoinedGroupsConversationsThreadsPostsInReplyToSingleValueExtendedProperties", getTestStatus("canCreateUsersJoinedGroupsConversationsThreadsPostsInReplyToSingleValueExtendedProperties")));
        this.addTest(canGetUsersJoinedGroupsConversationsThreadsPostsInReplyToMultiValueExtendedProperties("Can get UsersJoinedGroupsConversationsThreadsPostsInReplyToMultiValueExtendedProperties", getTestStatus("canGetUsersJoinedGroupsConversationsThreadsPostsInReplyToMultiValueExtendedProperties")));
        this.addTest(canCreateUsersJoinedGroupsConversationsThreadsPostsInReplyToMultiValueExtendedProperties("Can create canCreateUsersJoinedGroupsConversationsThreadsPostsInReplyToMultiValueExtendedProperties", getTestStatus("canCreateUsersJoinedGroupsConversationsThreadsPostsInReplyToMultiValueExtendedProperties")));
        this.addTest(canGetUsersJoinedGroupsConversationsThreadsPostsAttachments("Can get UsersJoinedGroupsConversationsThreadsPostsAttachments", getTestStatus("canGetUsersJoinedGroupsConversationsThreadsPostsAttachments")));
        this.addTest(canCreateUsersJoinedGroupsConversationsThreadsPostsAttachments("Can create canCreateUsersJoinedGroupsConversationsThreadsPostsAttachments", getTestStatus("canCreateUsersJoinedGroupsConversationsThreadsPostsAttachments")));
        this.addTest(canGetUsersJoinedGroupsConversationsThreadsPostsSingleValueExtendedProperties("Can get UsersJoinedGroupsConversationsThreadsPostsSingleValueExtendedProperties", getTestStatus("canGetUsersJoinedGroupsConversationsThreadsPostsSingleValueExtendedProperties")));
        this.addTest(canCreateUsersJoinedGroupsConversationsThreadsPostsSingleValueExtendedProperties("Can create canCreateUsersJoinedGroupsConversationsThreadsPostsSingleValueExtendedProperties", getTestStatus("canCreateUsersJoinedGroupsConversationsThreadsPostsSingleValueExtendedProperties")));
        this.addTest(canGetUsersJoinedGroupsConversationsThreadsPostsMultiValueExtendedProperties("Can get UsersJoinedGroupsConversationsThreadsPostsMultiValueExtendedProperties", getTestStatus("canGetUsersJoinedGroupsConversationsThreadsPostsMultiValueExtendedProperties")));
        this.addTest(canCreateUsersJoinedGroupsConversationsThreadsPostsMultiValueExtendedProperties("Can create canCreateUsersJoinedGroupsConversationsThreadsPostsMultiValueExtendedProperties", getTestStatus("canCreateUsersJoinedGroupsConversationsThreadsPostsMultiValueExtendedProperties")));
        this.addTest(canGetUsersJoinedGroupsSubscriptions("Can get UsersJoinedGroupsSubscriptions", getTestStatus("canGetUsersJoinedGroupsSubscriptions")));
        this.addTest(canCreateUsersJoinedGroupsSubscriptions("Can create canCreateUsersJoinedGroupsSubscriptions", getTestStatus("canCreateUsersJoinedGroupsSubscriptions")));
        this.addTest(canGetUsersJoinedGroupsPhoto("Can get UsersJoinedGroupsPhoto", getTestStatus("canGetUsersJoinedGroupsPhoto")));
        this.addTest(canGetUsersJoinedGroupsPhotos("Can get UsersJoinedGroupsPhotos", getTestStatus("canGetUsersJoinedGroupsPhotos")));
        this.addTest(canCreateUsersJoinedGroupsPhotos("Can create canCreateUsersJoinedGroupsPhotos", getTestStatus("canCreateUsersJoinedGroupsPhotos")));
        this.addTest(canGetUsersJoinedGroupsAcceptedSenders("Can get UsersJoinedGroupsAcceptedSenders", getTestStatus("canGetUsersJoinedGroupsAcceptedSenders")));
        this.addTest(canCreateUsersJoinedGroupsAcceptedSenders("Can create canCreateUsersJoinedGroupsAcceptedSenders", getTestStatus("canCreateUsersJoinedGroupsAcceptedSenders")));
        this.addTest(canGetUsersJoinedGroupsRejectedSenders("Can get UsersJoinedGroupsRejectedSenders", getTestStatus("canGetUsersJoinedGroupsRejectedSenders")));
        this.addTest(canCreateUsersJoinedGroupsRejectedSenders("Can create canCreateUsersJoinedGroupsRejectedSenders", getTestStatus("canCreateUsersJoinedGroupsRejectedSenders")));
        this.addTest(canGetUsersMailFolders("Can get UsersMailFolders", getTestStatus("canGetUsersMailFolders")));
        this.addTest(canCreateUsersMailFolders("Can create canCreateUsersMailFolders", getTestStatus("canCreateUsersMailFolders")));
        this.addTest(canGetUsersMailFoldersMessages("Can get UsersMailFoldersMessages", getTestStatus("canGetUsersMailFoldersMessages")));
        this.addTest(canCreateUsersMailFoldersMessages("Can create canCreateUsersMailFoldersMessages", getTestStatus("canCreateUsersMailFoldersMessages")));
        this.addTest(canGetUsersMailFoldersMessagesExtensions("Can get UsersMailFoldersMessagesExtensions", getTestStatus("canGetUsersMailFoldersMessagesExtensions")));
        this.addTest(canCreateUsersMailFoldersMessagesExtensions("Can create canCreateUsersMailFoldersMessagesExtensions", getTestStatus("canCreateUsersMailFoldersMessagesExtensions")));
        this.addTest(canGetUsersMailFoldersMessagesAttachments("Can get UsersMailFoldersMessagesAttachments", getTestStatus("canGetUsersMailFoldersMessagesAttachments")));
        this.addTest(canCreateUsersMailFoldersMessagesAttachments("Can create canCreateUsersMailFoldersMessagesAttachments", getTestStatus("canCreateUsersMailFoldersMessagesAttachments")));
        this.addTest(canGetUsersMailFoldersMessagesSingleValueExtendedProperties("Can get UsersMailFoldersMessagesSingleValueExtendedProperties", getTestStatus("canGetUsersMailFoldersMessagesSingleValueExtendedProperties")));
        this.addTest(canCreateUsersMailFoldersMessagesSingleValueExtendedProperties("Can create canCreateUsersMailFoldersMessagesSingleValueExtendedProperties", getTestStatus("canCreateUsersMailFoldersMessagesSingleValueExtendedProperties")));
        this.addTest(canGetUsersMailFoldersMessagesMultiValueExtendedProperties("Can get UsersMailFoldersMessagesMultiValueExtendedProperties", getTestStatus("canGetUsersMailFoldersMessagesMultiValueExtendedProperties")));
        this.addTest(canCreateUsersMailFoldersMessagesMultiValueExtendedProperties("Can create canCreateUsersMailFoldersMessagesMultiValueExtendedProperties", getTestStatus("canCreateUsersMailFoldersMessagesMultiValueExtendedProperties")));
        this.addTest(canGetUsersMailFoldersChildFolders("Can get UsersMailFoldersChildFolders", getTestStatus("canGetUsersMailFoldersChildFolders")));
        this.addTest(canCreateUsersMailFoldersChildFolders("Can create canCreateUsersMailFoldersChildFolders", getTestStatus("canCreateUsersMailFoldersChildFolders")));
        this.addTest(canGetUsersMailFoldersChildFoldersMessages("Can get UsersMailFoldersChildFoldersMessages", getTestStatus("canGetUsersMailFoldersChildFoldersMessages")));
        this.addTest(canCreateUsersMailFoldersChildFoldersMessages("Can create canCreateUsersMailFoldersChildFoldersMessages", getTestStatus("canCreateUsersMailFoldersChildFoldersMessages")));
        this.addTest(canGetUsersMailFoldersChildFoldersMessagesExtensions("Can get UsersMailFoldersChildFoldersMessagesExtensions", getTestStatus("canGetUsersMailFoldersChildFoldersMessagesExtensions")));
        this.addTest(canCreateUsersMailFoldersChildFoldersMessagesExtensions("Can create canCreateUsersMailFoldersChildFoldersMessagesExtensions", getTestStatus("canCreateUsersMailFoldersChildFoldersMessagesExtensions")));
        this.addTest(canGetUsersMailFoldersChildFoldersMessagesAttachments("Can get UsersMailFoldersChildFoldersMessagesAttachments", getTestStatus("canGetUsersMailFoldersChildFoldersMessagesAttachments")));
        this.addTest(canCreateUsersMailFoldersChildFoldersMessagesAttachments("Can create canCreateUsersMailFoldersChildFoldersMessagesAttachments", getTestStatus("canCreateUsersMailFoldersChildFoldersMessagesAttachments")));
        this.addTest(canGetUsersMailFoldersChildFoldersMessagesSingleValueExtendedProperties("Can get UsersMailFoldersChildFoldersMessagesSingleValueExtendedProperties", getTestStatus("canGetUsersMailFoldersChildFoldersMessagesSingleValueExtendedProperties")));
        this.addTest(canCreateUsersMailFoldersChildFoldersMessagesSingleValueExtendedProperties("Can create canCreateUsersMailFoldersChildFoldersMessagesSingleValueExtendedProperties", getTestStatus("canCreateUsersMailFoldersChildFoldersMessagesSingleValueExtendedProperties")));
        this.addTest(canGetUsersMailFoldersChildFoldersMessagesMultiValueExtendedProperties("Can get UsersMailFoldersChildFoldersMessagesMultiValueExtendedProperties", getTestStatus("canGetUsersMailFoldersChildFoldersMessagesMultiValueExtendedProperties")));
        this.addTest(canCreateUsersMailFoldersChildFoldersMessagesMultiValueExtendedProperties("Can create canCreateUsersMailFoldersChildFoldersMessagesMultiValueExtendedProperties", getTestStatus("canCreateUsersMailFoldersChildFoldersMessagesMultiValueExtendedProperties")));
        this.addTest(canGetUsersMailFoldersChildFoldersSingleValueExtendedProperties("Can get UsersMailFoldersChildFoldersSingleValueExtendedProperties", getTestStatus("canGetUsersMailFoldersChildFoldersSingleValueExtendedProperties")));
        this.addTest(canCreateUsersMailFoldersChildFoldersSingleValueExtendedProperties("Can create canCreateUsersMailFoldersChildFoldersSingleValueExtendedProperties", getTestStatus("canCreateUsersMailFoldersChildFoldersSingleValueExtendedProperties")));
        this.addTest(canGetUsersMailFoldersChildFoldersMultiValueExtendedProperties("Can get UsersMailFoldersChildFoldersMultiValueExtendedProperties", getTestStatus("canGetUsersMailFoldersChildFoldersMultiValueExtendedProperties")));
        this.addTest(canCreateUsersMailFoldersChildFoldersMultiValueExtendedProperties("Can create canCreateUsersMailFoldersChildFoldersMultiValueExtendedProperties", getTestStatus("canCreateUsersMailFoldersChildFoldersMultiValueExtendedProperties")));
        this.addTest(canGetUsersMailFoldersSingleValueExtendedProperties("Can get UsersMailFoldersSingleValueExtendedProperties", getTestStatus("canGetUsersMailFoldersSingleValueExtendedProperties")));
        this.addTest(canCreateUsersMailFoldersSingleValueExtendedProperties("Can create canCreateUsersMailFoldersSingleValueExtendedProperties", getTestStatus("canCreateUsersMailFoldersSingleValueExtendedProperties")));
        this.addTest(canGetUsersMailFoldersMultiValueExtendedProperties("Can get UsersMailFoldersMultiValueExtendedProperties", getTestStatus("canGetUsersMailFoldersMultiValueExtendedProperties")));
        this.addTest(canCreateUsersMailFoldersMultiValueExtendedProperties("Can create canCreateUsersMailFoldersMultiValueExtendedProperties", getTestStatus("canCreateUsersMailFoldersMultiValueExtendedProperties")));
        this.addTest(canGetUsersCalendar("Can get UsersCalendar", getTestStatus("canGetUsersCalendar")));
        this.addTest(canGetUsersCalendarEvents("Can get UsersCalendarEvents", getTestStatus("canGetUsersCalendarEvents")));
        this.addTest(canCreateUsersCalendarEvents("Can create canCreateUsersCalendarEvents", getTestStatus("canCreateUsersCalendarEvents")));
        this.addTest(canGetUsersCalendarEventsInstances("Can get UsersCalendarEventsInstances", getTestStatus("canGetUsersCalendarEventsInstances")));
        this.addTest(canCreateUsersCalendarEventsInstances("Can create canCreateUsersCalendarEventsInstances", getTestStatus("canCreateUsersCalendarEventsInstances")));
        this.addTest(canGetUsersCalendarEventsInstancesExtensions("Can get UsersCalendarEventsInstancesExtensions", getTestStatus("canGetUsersCalendarEventsInstancesExtensions")));
        this.addTest(canCreateUsersCalendarEventsInstancesExtensions("Can create canCreateUsersCalendarEventsInstancesExtensions", getTestStatus("canCreateUsersCalendarEventsInstancesExtensions")));
        this.addTest(canGetUsersCalendarEventsInstancesAttachments("Can get UsersCalendarEventsInstancesAttachments", getTestStatus("canGetUsersCalendarEventsInstancesAttachments")));
        this.addTest(canCreateUsersCalendarEventsInstancesAttachments("Can create canCreateUsersCalendarEventsInstancesAttachments", getTestStatus("canCreateUsersCalendarEventsInstancesAttachments")));
        this.addTest(canGetUsersCalendarEventsInstancesSingleValueExtendedProperties("Can get UsersCalendarEventsInstancesSingleValueExtendedProperties", getTestStatus("canGetUsersCalendarEventsInstancesSingleValueExtendedProperties")));
        this.addTest(canCreateUsersCalendarEventsInstancesSingleValueExtendedProperties("Can create canCreateUsersCalendarEventsInstancesSingleValueExtendedProperties", getTestStatus("canCreateUsersCalendarEventsInstancesSingleValueExtendedProperties")));
        this.addTest(canGetUsersCalendarEventsInstancesMultiValueExtendedProperties("Can get UsersCalendarEventsInstancesMultiValueExtendedProperties", getTestStatus("canGetUsersCalendarEventsInstancesMultiValueExtendedProperties")));
        this.addTest(canCreateUsersCalendarEventsInstancesMultiValueExtendedProperties("Can create canCreateUsersCalendarEventsInstancesMultiValueExtendedProperties", getTestStatus("canCreateUsersCalendarEventsInstancesMultiValueExtendedProperties")));
        this.addTest(canGetUsersCalendarEventsExtensions("Can get UsersCalendarEventsExtensions", getTestStatus("canGetUsersCalendarEventsExtensions")));
        this.addTest(canCreateUsersCalendarEventsExtensions("Can create canCreateUsersCalendarEventsExtensions", getTestStatus("canCreateUsersCalendarEventsExtensions")));
        this.addTest(canGetUsersCalendarEventsAttachments("Can get UsersCalendarEventsAttachments", getTestStatus("canGetUsersCalendarEventsAttachments")));
        this.addTest(canCreateUsersCalendarEventsAttachments("Can create canCreateUsersCalendarEventsAttachments", getTestStatus("canCreateUsersCalendarEventsAttachments")));
        this.addTest(canGetUsersCalendarEventsSingleValueExtendedProperties("Can get UsersCalendarEventsSingleValueExtendedProperties", getTestStatus("canGetUsersCalendarEventsSingleValueExtendedProperties")));
        this.addTest(canCreateUsersCalendarEventsSingleValueExtendedProperties("Can create canCreateUsersCalendarEventsSingleValueExtendedProperties", getTestStatus("canCreateUsersCalendarEventsSingleValueExtendedProperties")));
        this.addTest(canGetUsersCalendarEventsMultiValueExtendedProperties("Can get UsersCalendarEventsMultiValueExtendedProperties", getTestStatus("canGetUsersCalendarEventsMultiValueExtendedProperties")));
        this.addTest(canCreateUsersCalendarEventsMultiValueExtendedProperties("Can create canCreateUsersCalendarEventsMultiValueExtendedProperties", getTestStatus("canCreateUsersCalendarEventsMultiValueExtendedProperties")));
        this.addTest(canGetUsersCalendarCalendarView("Can get UsersCalendarCalendarView", getTestStatus("canGetUsersCalendarCalendarView")));
        this.addTest(canCreateUsersCalendarCalendarView("Can create canCreateUsersCalendarCalendarView", getTestStatus("canCreateUsersCalendarCalendarView")));
        this.addTest(canGetUsersCalendarCalendarViewInstances("Can get UsersCalendarCalendarViewInstances", getTestStatus("canGetUsersCalendarCalendarViewInstances")));
        this.addTest(canCreateUsersCalendarCalendarViewInstances("Can create canCreateUsersCalendarCalendarViewInstances", getTestStatus("canCreateUsersCalendarCalendarViewInstances")));
        this.addTest(canGetUsersCalendarCalendarViewInstancesExtensions("Can get UsersCalendarCalendarViewInstancesExtensions", getTestStatus("canGetUsersCalendarCalendarViewInstancesExtensions")));
        this.addTest(canCreateUsersCalendarCalendarViewInstancesExtensions("Can create canCreateUsersCalendarCalendarViewInstancesExtensions", getTestStatus("canCreateUsersCalendarCalendarViewInstancesExtensions")));
        this.addTest(canGetUsersCalendarCalendarViewInstancesAttachments("Can get UsersCalendarCalendarViewInstancesAttachments", getTestStatus("canGetUsersCalendarCalendarViewInstancesAttachments")));
        this.addTest(canCreateUsersCalendarCalendarViewInstancesAttachments("Can create canCreateUsersCalendarCalendarViewInstancesAttachments", getTestStatus("canCreateUsersCalendarCalendarViewInstancesAttachments")));
        this.addTest(canGetUsersCalendarCalendarViewInstancesSingleValueExtendedProperties("Can get UsersCalendarCalendarViewInstancesSingleValueExtendedProperties", getTestStatus("canGetUsersCalendarCalendarViewInstancesSingleValueExtendedProperties")));
        this.addTest(canCreateUsersCalendarCalendarViewInstancesSingleValueExtendedProperties("Can create canCreateUsersCalendarCalendarViewInstancesSingleValueExtendedProperties", getTestStatus("canCreateUsersCalendarCalendarViewInstancesSingleValueExtendedProperties")));
        this.addTest(canGetUsersCalendarCalendarViewInstancesMultiValueExtendedProperties("Can get UsersCalendarCalendarViewInstancesMultiValueExtendedProperties", getTestStatus("canGetUsersCalendarCalendarViewInstancesMultiValueExtendedProperties")));
        this.addTest(canCreateUsersCalendarCalendarViewInstancesMultiValueExtendedProperties("Can create canCreateUsersCalendarCalendarViewInstancesMultiValueExtendedProperties", getTestStatus("canCreateUsersCalendarCalendarViewInstancesMultiValueExtendedProperties")));
        this.addTest(canGetUsersCalendarCalendarViewExtensions("Can get UsersCalendarCalendarViewExtensions", getTestStatus("canGetUsersCalendarCalendarViewExtensions")));
        this.addTest(canCreateUsersCalendarCalendarViewExtensions("Can create canCreateUsersCalendarCalendarViewExtensions", getTestStatus("canCreateUsersCalendarCalendarViewExtensions")));
        this.addTest(canGetUsersCalendarCalendarViewAttachments("Can get UsersCalendarCalendarViewAttachments", getTestStatus("canGetUsersCalendarCalendarViewAttachments")));
        this.addTest(canCreateUsersCalendarCalendarViewAttachments("Can create canCreateUsersCalendarCalendarViewAttachments", getTestStatus("canCreateUsersCalendarCalendarViewAttachments")));
        this.addTest(canGetUsersCalendarCalendarViewSingleValueExtendedProperties("Can get UsersCalendarCalendarViewSingleValueExtendedProperties", getTestStatus("canGetUsersCalendarCalendarViewSingleValueExtendedProperties")));
        this.addTest(canCreateUsersCalendarCalendarViewSingleValueExtendedProperties("Can create canCreateUsersCalendarCalendarViewSingleValueExtendedProperties", getTestStatus("canCreateUsersCalendarCalendarViewSingleValueExtendedProperties")));
        this.addTest(canGetUsersCalendarCalendarViewMultiValueExtendedProperties("Can get UsersCalendarCalendarViewMultiValueExtendedProperties", getTestStatus("canGetUsersCalendarCalendarViewMultiValueExtendedProperties")));
        this.addTest(canCreateUsersCalendarCalendarViewMultiValueExtendedProperties("Can create canCreateUsersCalendarCalendarViewMultiValueExtendedProperties", getTestStatus("canCreateUsersCalendarCalendarViewMultiValueExtendedProperties")));
        this.addTest(canGetUsersCalendarSingleValueExtendedProperties("Can get UsersCalendarSingleValueExtendedProperties", getTestStatus("canGetUsersCalendarSingleValueExtendedProperties")));
        this.addTest(canCreateUsersCalendarSingleValueExtendedProperties("Can create canCreateUsersCalendarSingleValueExtendedProperties", getTestStatus("canCreateUsersCalendarSingleValueExtendedProperties")));
        this.addTest(canGetUsersCalendarMultiValueExtendedProperties("Can get UsersCalendarMultiValueExtendedProperties", getTestStatus("canGetUsersCalendarMultiValueExtendedProperties")));
        this.addTest(canCreateUsersCalendarMultiValueExtendedProperties("Can create canCreateUsersCalendarMultiValueExtendedProperties", getTestStatus("canCreateUsersCalendarMultiValueExtendedProperties")));
        this.addTest(canGetUsersCalendars("Can get UsersCalendars", getTestStatus("canGetUsersCalendars")));
        this.addTest(canCreateUsersCalendars("Can create canCreateUsersCalendars", getTestStatus("canCreateUsersCalendars")));
        this.addTest(canGetUsersCalendarsEvents("Can get UsersCalendarsEvents", getTestStatus("canGetUsersCalendarsEvents")));
        this.addTest(canCreateUsersCalendarsEvents("Can create canCreateUsersCalendarsEvents", getTestStatus("canCreateUsersCalendarsEvents")));
        this.addTest(canGetUsersCalendarsEventsInstances("Can get UsersCalendarsEventsInstances", getTestStatus("canGetUsersCalendarsEventsInstances")));
        this.addTest(canCreateUsersCalendarsEventsInstances("Can create canCreateUsersCalendarsEventsInstances", getTestStatus("canCreateUsersCalendarsEventsInstances")));
        this.addTest(canGetUsersCalendarsEventsInstancesExtensions("Can get UsersCalendarsEventsInstancesExtensions", getTestStatus("canGetUsersCalendarsEventsInstancesExtensions")));
        this.addTest(canCreateUsersCalendarsEventsInstancesExtensions("Can create canCreateUsersCalendarsEventsInstancesExtensions", getTestStatus("canCreateUsersCalendarsEventsInstancesExtensions")));
        this.addTest(canGetUsersCalendarsEventsInstancesAttachments("Can get UsersCalendarsEventsInstancesAttachments", getTestStatus("canGetUsersCalendarsEventsInstancesAttachments")));
        this.addTest(canCreateUsersCalendarsEventsInstancesAttachments("Can create canCreateUsersCalendarsEventsInstancesAttachments", getTestStatus("canCreateUsersCalendarsEventsInstancesAttachments")));
        this.addTest(canGetUsersCalendarsEventsInstancesSingleValueExtendedProperties("Can get UsersCalendarsEventsInstancesSingleValueExtendedProperties", getTestStatus("canGetUsersCalendarsEventsInstancesSingleValueExtendedProperties")));
        this.addTest(canCreateUsersCalendarsEventsInstancesSingleValueExtendedProperties("Can create canCreateUsersCalendarsEventsInstancesSingleValueExtendedProperties", getTestStatus("canCreateUsersCalendarsEventsInstancesSingleValueExtendedProperties")));
        this.addTest(canGetUsersCalendarsEventsInstancesMultiValueExtendedProperties("Can get UsersCalendarsEventsInstancesMultiValueExtendedProperties", getTestStatus("canGetUsersCalendarsEventsInstancesMultiValueExtendedProperties")));
        this.addTest(canCreateUsersCalendarsEventsInstancesMultiValueExtendedProperties("Can create canCreateUsersCalendarsEventsInstancesMultiValueExtendedProperties", getTestStatus("canCreateUsersCalendarsEventsInstancesMultiValueExtendedProperties")));
        this.addTest(canGetUsersCalendarsEventsExtensions("Can get UsersCalendarsEventsExtensions", getTestStatus("canGetUsersCalendarsEventsExtensions")));
        this.addTest(canCreateUsersCalendarsEventsExtensions("Can create canCreateUsersCalendarsEventsExtensions", getTestStatus("canCreateUsersCalendarsEventsExtensions")));
        this.addTest(canGetUsersCalendarsEventsAttachments("Can get UsersCalendarsEventsAttachments", getTestStatus("canGetUsersCalendarsEventsAttachments")));
        this.addTest(canCreateUsersCalendarsEventsAttachments("Can create canCreateUsersCalendarsEventsAttachments", getTestStatus("canCreateUsersCalendarsEventsAttachments")));
        this.addTest(canGetUsersCalendarsEventsSingleValueExtendedProperties("Can get UsersCalendarsEventsSingleValueExtendedProperties", getTestStatus("canGetUsersCalendarsEventsSingleValueExtendedProperties")));
        this.addTest(canCreateUsersCalendarsEventsSingleValueExtendedProperties("Can create canCreateUsersCalendarsEventsSingleValueExtendedProperties", getTestStatus("canCreateUsersCalendarsEventsSingleValueExtendedProperties")));
        this.addTest(canGetUsersCalendarsEventsMultiValueExtendedProperties("Can get UsersCalendarsEventsMultiValueExtendedProperties", getTestStatus("canGetUsersCalendarsEventsMultiValueExtendedProperties")));
        this.addTest(canCreateUsersCalendarsEventsMultiValueExtendedProperties("Can create canCreateUsersCalendarsEventsMultiValueExtendedProperties", getTestStatus("canCreateUsersCalendarsEventsMultiValueExtendedProperties")));
        this.addTest(canGetUsersCalendarsCalendarView("Can get UsersCalendarsCalendarView", getTestStatus("canGetUsersCalendarsCalendarView")));
        this.addTest(canCreateUsersCalendarsCalendarView("Can create canCreateUsersCalendarsCalendarView", getTestStatus("canCreateUsersCalendarsCalendarView")));
        this.addTest(canGetUsersCalendarsCalendarViewInstances("Can get UsersCalendarsCalendarViewInstances", getTestStatus("canGetUsersCalendarsCalendarViewInstances")));
        this.addTest(canCreateUsersCalendarsCalendarViewInstances("Can create canCreateUsersCalendarsCalendarViewInstances", getTestStatus("canCreateUsersCalendarsCalendarViewInstances")));
        this.addTest(canGetUsersCalendarsCalendarViewInstancesExtensions("Can get UsersCalendarsCalendarViewInstancesExtensions", getTestStatus("canGetUsersCalendarsCalendarViewInstancesExtensions")));
        this.addTest(canCreateUsersCalendarsCalendarViewInstancesExtensions("Can create canCreateUsersCalendarsCalendarViewInstancesExtensions", getTestStatus("canCreateUsersCalendarsCalendarViewInstancesExtensions")));
        this.addTest(canGetUsersCalendarsCalendarViewInstancesAttachments("Can get UsersCalendarsCalendarViewInstancesAttachments", getTestStatus("canGetUsersCalendarsCalendarViewInstancesAttachments")));
        this.addTest(canCreateUsersCalendarsCalendarViewInstancesAttachments("Can create canCreateUsersCalendarsCalendarViewInstancesAttachments", getTestStatus("canCreateUsersCalendarsCalendarViewInstancesAttachments")));
        this.addTest(canGetUsersCalendarsCalendarViewInstancesSingleValueExtendedProperties("Can get UsersCalendarsCalendarViewInstancesSingleValueExtendedProperties", getTestStatus("canGetUsersCalendarsCalendarViewInstancesSingleValueExtendedProperties")));
        this.addTest(canCreateUsersCalendarsCalendarViewInstancesSingleValueExtendedProperties("Can create canCreateUsersCalendarsCalendarViewInstancesSingleValueExtendedProperties", getTestStatus("canCreateUsersCalendarsCalendarViewInstancesSingleValueExtendedProperties")));
        this.addTest(canGetUsersCalendarsCalendarViewInstancesMultiValueExtendedProperties("Can get UsersCalendarsCalendarViewInstancesMultiValueExtendedProperties", getTestStatus("canGetUsersCalendarsCalendarViewInstancesMultiValueExtendedProperties")));
        this.addTest(canCreateUsersCalendarsCalendarViewInstancesMultiValueExtendedProperties("Can create canCreateUsersCalendarsCalendarViewInstancesMultiValueExtendedProperties", getTestStatus("canCreateUsersCalendarsCalendarViewInstancesMultiValueExtendedProperties")));
        this.addTest(canGetUsersCalendarsCalendarViewExtensions("Can get UsersCalendarsCalendarViewExtensions", getTestStatus("canGetUsersCalendarsCalendarViewExtensions")));
        this.addTest(canCreateUsersCalendarsCalendarViewExtensions("Can create canCreateUsersCalendarsCalendarViewExtensions", getTestStatus("canCreateUsersCalendarsCalendarViewExtensions")));
        this.addTest(canGetUsersCalendarsCalendarViewAttachments("Can get UsersCalendarsCalendarViewAttachments", getTestStatus("canGetUsersCalendarsCalendarViewAttachments")));
        this.addTest(canCreateUsersCalendarsCalendarViewAttachments("Can create canCreateUsersCalendarsCalendarViewAttachments", getTestStatus("canCreateUsersCalendarsCalendarViewAttachments")));
        this.addTest(canGetUsersCalendarsCalendarViewSingleValueExtendedProperties("Can get UsersCalendarsCalendarViewSingleValueExtendedProperties", getTestStatus("canGetUsersCalendarsCalendarViewSingleValueExtendedProperties")));
        this.addTest(canCreateUsersCalendarsCalendarViewSingleValueExtendedProperties("Can create canCreateUsersCalendarsCalendarViewSingleValueExtendedProperties", getTestStatus("canCreateUsersCalendarsCalendarViewSingleValueExtendedProperties")));
        this.addTest(canGetUsersCalendarsCalendarViewMultiValueExtendedProperties("Can get UsersCalendarsCalendarViewMultiValueExtendedProperties", getTestStatus("canGetUsersCalendarsCalendarViewMultiValueExtendedProperties")));
        this.addTest(canCreateUsersCalendarsCalendarViewMultiValueExtendedProperties("Can create canCreateUsersCalendarsCalendarViewMultiValueExtendedProperties", getTestStatus("canCreateUsersCalendarsCalendarViewMultiValueExtendedProperties")));
        this.addTest(canGetUsersCalendarsSingleValueExtendedProperties("Can get UsersCalendarsSingleValueExtendedProperties", getTestStatus("canGetUsersCalendarsSingleValueExtendedProperties")));
        this.addTest(canCreateUsersCalendarsSingleValueExtendedProperties("Can create canCreateUsersCalendarsSingleValueExtendedProperties", getTestStatus("canCreateUsersCalendarsSingleValueExtendedProperties")));
        this.addTest(canGetUsersCalendarsMultiValueExtendedProperties("Can get UsersCalendarsMultiValueExtendedProperties", getTestStatus("canGetUsersCalendarsMultiValueExtendedProperties")));
        this.addTest(canCreateUsersCalendarsMultiValueExtendedProperties("Can create canCreateUsersCalendarsMultiValueExtendedProperties", getTestStatus("canCreateUsersCalendarsMultiValueExtendedProperties")));
        this.addTest(canGetUsersCalendarGroups("Can get UsersCalendarGroups", getTestStatus("canGetUsersCalendarGroups")));
        this.addTest(canCreateUsersCalendarGroups("Can create canCreateUsersCalendarGroups", getTestStatus("canCreateUsersCalendarGroups")));
        this.addTest(canGetUsersCalendarGroupsCalendars("Can get UsersCalendarGroupsCalendars", getTestStatus("canGetUsersCalendarGroupsCalendars")));
        this.addTest(canCreateUsersCalendarGroupsCalendars("Can create canCreateUsersCalendarGroupsCalendars", getTestStatus("canCreateUsersCalendarGroupsCalendars")));
        this.addTest(canGetUsersCalendarGroupsCalendarsEvents("Can get UsersCalendarGroupsCalendarsEvents", getTestStatus("canGetUsersCalendarGroupsCalendarsEvents")));
        this.addTest(canCreateUsersCalendarGroupsCalendarsEvents("Can create canCreateUsersCalendarGroupsCalendarsEvents", getTestStatus("canCreateUsersCalendarGroupsCalendarsEvents")));
        this.addTest(canGetUsersCalendarGroupsCalendarsEventsInstances("Can get UsersCalendarGroupsCalendarsEventsInstances", getTestStatus("canGetUsersCalendarGroupsCalendarsEventsInstances")));
        this.addTest(canCreateUsersCalendarGroupsCalendarsEventsInstances("Can create canCreateUsersCalendarGroupsCalendarsEventsInstances", getTestStatus("canCreateUsersCalendarGroupsCalendarsEventsInstances")));
        this.addTest(canGetUsersCalendarGroupsCalendarsEventsInstancesExtensions("Can get UsersCalendarGroupsCalendarsEventsInstancesExtensions", getTestStatus("canGetUsersCalendarGroupsCalendarsEventsInstancesExtensions")));
        this.addTest(canCreateUsersCalendarGroupsCalendarsEventsInstancesExtensions("Can create canCreateUsersCalendarGroupsCalendarsEventsInstancesExtensions", getTestStatus("canCreateUsersCalendarGroupsCalendarsEventsInstancesExtensions")));
        this.addTest(canGetUsersCalendarGroupsCalendarsEventsInstancesAttachments("Can get UsersCalendarGroupsCalendarsEventsInstancesAttachments", getTestStatus("canGetUsersCalendarGroupsCalendarsEventsInstancesAttachments")));
        this.addTest(canCreateUsersCalendarGroupsCalendarsEventsInstancesAttachments("Can create canCreateUsersCalendarGroupsCalendarsEventsInstancesAttachments", getTestStatus("canCreateUsersCalendarGroupsCalendarsEventsInstancesAttachments")));
        this.addTest(canGetUsersCalendarGroupsCalendarsEventsInstancesSingleValueExtendedProperties("Can get UsersCalendarGroupsCalendarsEventsInstancesSingleValueExtendedProperties", getTestStatus("canGetUsersCalendarGroupsCalendarsEventsInstancesSingleValueExtendedProperties")));
        this.addTest(canCreateUsersCalendarGroupsCalendarsEventsInstancesSingleValueExtendedProperties("Can create canCreateUsersCalendarGroupsCalendarsEventsInstancesSingleValueExtendedProperties", getTestStatus("canCreateUsersCalendarGroupsCalendarsEventsInstancesSingleValueExtendedProperties")));
        this.addTest(canGetUsersCalendarGroupsCalendarsEventsInstancesMultiValueExtendedProperties("Can get UsersCalendarGroupsCalendarsEventsInstancesMultiValueExtendedProperties", getTestStatus("canGetUsersCalendarGroupsCalendarsEventsInstancesMultiValueExtendedProperties")));
        this.addTest(canCreateUsersCalendarGroupsCalendarsEventsInstancesMultiValueExtendedProperties("Can create canCreateUsersCalendarGroupsCalendarsEventsInstancesMultiValueExtendedProperties", getTestStatus("canCreateUsersCalendarGroupsCalendarsEventsInstancesMultiValueExtendedProperties")));
        this.addTest(canGetUsersCalendarGroupsCalendarsEventsExtensions("Can get UsersCalendarGroupsCalendarsEventsExtensions", getTestStatus("canGetUsersCalendarGroupsCalendarsEventsExtensions")));
        this.addTest(canCreateUsersCalendarGroupsCalendarsEventsExtensions("Can create canCreateUsersCalendarGroupsCalendarsEventsExtensions", getTestStatus("canCreateUsersCalendarGroupsCalendarsEventsExtensions")));
        this.addTest(canGetUsersCalendarGroupsCalendarsEventsAttachments("Can get UsersCalendarGroupsCalendarsEventsAttachments", getTestStatus("canGetUsersCalendarGroupsCalendarsEventsAttachments")));
        this.addTest(canCreateUsersCalendarGroupsCalendarsEventsAttachments("Can create canCreateUsersCalendarGroupsCalendarsEventsAttachments", getTestStatus("canCreateUsersCalendarGroupsCalendarsEventsAttachments")));
        this.addTest(canGetUsersCalendarGroupsCalendarsEventsSingleValueExtendedProperties("Can get UsersCalendarGroupsCalendarsEventsSingleValueExtendedProperties", getTestStatus("canGetUsersCalendarGroupsCalendarsEventsSingleValueExtendedProperties")));
        this.addTest(canCreateUsersCalendarGroupsCalendarsEventsSingleValueExtendedProperties("Can create canCreateUsersCalendarGroupsCalendarsEventsSingleValueExtendedProperties", getTestStatus("canCreateUsersCalendarGroupsCalendarsEventsSingleValueExtendedProperties")));
        this.addTest(canGetUsersCalendarGroupsCalendarsEventsMultiValueExtendedProperties("Can get UsersCalendarGroupsCalendarsEventsMultiValueExtendedProperties", getTestStatus("canGetUsersCalendarGroupsCalendarsEventsMultiValueExtendedProperties")));
        this.addTest(canCreateUsersCalendarGroupsCalendarsEventsMultiValueExtendedProperties("Can create canCreateUsersCalendarGroupsCalendarsEventsMultiValueExtendedProperties", getTestStatus("canCreateUsersCalendarGroupsCalendarsEventsMultiValueExtendedProperties")));
        this.addTest(canGetUsersCalendarGroupsCalendarsCalendarView("Can get UsersCalendarGroupsCalendarsCalendarView", getTestStatus("canGetUsersCalendarGroupsCalendarsCalendarView")));
        this.addTest(canCreateUsersCalendarGroupsCalendarsCalendarView("Can create canCreateUsersCalendarGroupsCalendarsCalendarView", getTestStatus("canCreateUsersCalendarGroupsCalendarsCalendarView")));
        this.addTest(canGetUsersCalendarGroupsCalendarsCalendarViewInstances("Can get UsersCalendarGroupsCalendarsCalendarViewInstances", getTestStatus("canGetUsersCalendarGroupsCalendarsCalendarViewInstances")));
        this.addTest(canCreateUsersCalendarGroupsCalendarsCalendarViewInstances("Can create canCreateUsersCalendarGroupsCalendarsCalendarViewInstances", getTestStatus("canCreateUsersCalendarGroupsCalendarsCalendarViewInstances")));
        this.addTest(canGetUsersCalendarGroupsCalendarsCalendarViewInstancesExtensions("Can get UsersCalendarGroupsCalendarsCalendarViewInstancesExtensions", getTestStatus("canGetUsersCalendarGroupsCalendarsCalendarViewInstancesExtensions")));
        this.addTest(canCreateUsersCalendarGroupsCalendarsCalendarViewInstancesExtensions("Can create canCreateUsersCalendarGroupsCalendarsCalendarViewInstancesExtensions", getTestStatus("canCreateUsersCalendarGroupsCalendarsCalendarViewInstancesExtensions")));
        this.addTest(canGetUsersCalendarGroupsCalendarsCalendarViewInstancesAttachments("Can get UsersCalendarGroupsCalendarsCalendarViewInstancesAttachments", getTestStatus("canGetUsersCalendarGroupsCalendarsCalendarViewInstancesAttachments")));
        this.addTest(canCreateUsersCalendarGroupsCalendarsCalendarViewInstancesAttachments("Can create canCreateUsersCalendarGroupsCalendarsCalendarViewInstancesAttachments", getTestStatus("canCreateUsersCalendarGroupsCalendarsCalendarViewInstancesAttachments")));
        this.addTest(canGetUsersCalendarGroupsCalendarsCalendarViewInstancesSingleValueExtendedProperties("Can get UsersCalendarGroupsCalendarsCalendarViewInstancesSingleValueExtendedProperties", getTestStatus("canGetUsersCalendarGroupsCalendarsCalendarViewInstancesSingleValueExtendedProperties")));
        this.addTest(canCreateUsersCalendarGroupsCalendarsCalendarViewInstancesSingleValueExtendedProperties("Can create canCreateUsersCalendarGroupsCalendarsCalendarViewInstancesSingleValueExtendedProperties", getTestStatus("canCreateUsersCalendarGroupsCalendarsCalendarViewInstancesSingleValueExtendedProperties")));
        this.addTest(canGetUsersCalendarGroupsCalendarsCalendarViewInstancesMultiValueExtendedProperties("Can get UsersCalendarGroupsCalendarsCalendarViewInstancesMultiValueExtendedProperties", getTestStatus("canGetUsersCalendarGroupsCalendarsCalendarViewInstancesMultiValueExtendedProperties")));
        this.addTest(canCreateUsersCalendarGroupsCalendarsCalendarViewInstancesMultiValueExtendedProperties("Can create canCreateUsersCalendarGroupsCalendarsCalendarViewInstancesMultiValueExtendedProperties", getTestStatus("canCreateUsersCalendarGroupsCalendarsCalendarViewInstancesMultiValueExtendedProperties")));
        this.addTest(canGetUsersCalendarGroupsCalendarsCalendarViewExtensions("Can get UsersCalendarGroupsCalendarsCalendarViewExtensions", getTestStatus("canGetUsersCalendarGroupsCalendarsCalendarViewExtensions")));
        this.addTest(canCreateUsersCalendarGroupsCalendarsCalendarViewExtensions("Can create canCreateUsersCalendarGroupsCalendarsCalendarViewExtensions", getTestStatus("canCreateUsersCalendarGroupsCalendarsCalendarViewExtensions")));
        this.addTest(canGetUsersCalendarGroupsCalendarsCalendarViewAttachments("Can get UsersCalendarGroupsCalendarsCalendarViewAttachments", getTestStatus("canGetUsersCalendarGroupsCalendarsCalendarViewAttachments")));
        this.addTest(canCreateUsersCalendarGroupsCalendarsCalendarViewAttachments("Can create canCreateUsersCalendarGroupsCalendarsCalendarViewAttachments", getTestStatus("canCreateUsersCalendarGroupsCalendarsCalendarViewAttachments")));
        this.addTest(canGetUsersCalendarGroupsCalendarsCalendarViewSingleValueExtendedProperties("Can get UsersCalendarGroupsCalendarsCalendarViewSingleValueExtendedProperties", getTestStatus("canGetUsersCalendarGroupsCalendarsCalendarViewSingleValueExtendedProperties")));
        this.addTest(canCreateUsersCalendarGroupsCalendarsCalendarViewSingleValueExtendedProperties("Can create canCreateUsersCalendarGroupsCalendarsCalendarViewSingleValueExtendedProperties", getTestStatus("canCreateUsersCalendarGroupsCalendarsCalendarViewSingleValueExtendedProperties")));
        this.addTest(canGetUsersCalendarGroupsCalendarsCalendarViewMultiValueExtendedProperties("Can get UsersCalendarGroupsCalendarsCalendarViewMultiValueExtendedProperties", getTestStatus("canGetUsersCalendarGroupsCalendarsCalendarViewMultiValueExtendedProperties")));
        this.addTest(canCreateUsersCalendarGroupsCalendarsCalendarViewMultiValueExtendedProperties("Can create canCreateUsersCalendarGroupsCalendarsCalendarViewMultiValueExtendedProperties", getTestStatus("canCreateUsersCalendarGroupsCalendarsCalendarViewMultiValueExtendedProperties")));
        this.addTest(canGetUsersCalendarGroupsCalendarsSingleValueExtendedProperties("Can get UsersCalendarGroupsCalendarsSingleValueExtendedProperties", getTestStatus("canGetUsersCalendarGroupsCalendarsSingleValueExtendedProperties")));
        this.addTest(canCreateUsersCalendarGroupsCalendarsSingleValueExtendedProperties("Can create canCreateUsersCalendarGroupsCalendarsSingleValueExtendedProperties", getTestStatus("canCreateUsersCalendarGroupsCalendarsSingleValueExtendedProperties")));
        this.addTest(canGetUsersCalendarGroupsCalendarsMultiValueExtendedProperties("Can get UsersCalendarGroupsCalendarsMultiValueExtendedProperties", getTestStatus("canGetUsersCalendarGroupsCalendarsMultiValueExtendedProperties")));
        this.addTest(canCreateUsersCalendarGroupsCalendarsMultiValueExtendedProperties("Can create canCreateUsersCalendarGroupsCalendarsMultiValueExtendedProperties", getTestStatus("canCreateUsersCalendarGroupsCalendarsMultiValueExtendedProperties")));
        this.addTest(canGetUsersCalendarView("Can get UsersCalendarView", getTestStatus("canGetUsersCalendarView")));
        this.addTest(canCreateUsersCalendarView("Can create canCreateUsersCalendarView", getTestStatus("canCreateUsersCalendarView")));
        this.addTest(canGetUsersCalendarViewCalendar("Can get UsersCalendarViewCalendar", getTestStatus("canGetUsersCalendarViewCalendar")));
        this.addTest(canGetUsersCalendarViewCalendarSingleValueExtendedProperties("Can get UsersCalendarViewCalendarSingleValueExtendedProperties", getTestStatus("canGetUsersCalendarViewCalendarSingleValueExtendedProperties")));
        this.addTest(canCreateUsersCalendarViewCalendarSingleValueExtendedProperties("Can create canCreateUsersCalendarViewCalendarSingleValueExtendedProperties", getTestStatus("canCreateUsersCalendarViewCalendarSingleValueExtendedProperties")));
        this.addTest(canGetUsersCalendarViewCalendarMultiValueExtendedProperties("Can get UsersCalendarViewCalendarMultiValueExtendedProperties", getTestStatus("canGetUsersCalendarViewCalendarMultiValueExtendedProperties")));
        this.addTest(canCreateUsersCalendarViewCalendarMultiValueExtendedProperties("Can create canCreateUsersCalendarViewCalendarMultiValueExtendedProperties", getTestStatus("canCreateUsersCalendarViewCalendarMultiValueExtendedProperties")));
        this.addTest(canGetUsersCalendarViewInstances("Can get UsersCalendarViewInstances", getTestStatus("canGetUsersCalendarViewInstances")));
        this.addTest(canCreateUsersCalendarViewInstances("Can create canCreateUsersCalendarViewInstances", getTestStatus("canCreateUsersCalendarViewInstances")));
        this.addTest(canGetUsersCalendarViewInstancesCalendar("Can get UsersCalendarViewInstancesCalendar", getTestStatus("canGetUsersCalendarViewInstancesCalendar")));
        this.addTest(canGetUsersCalendarViewInstancesCalendarSingleValueExtendedProperties("Can get UsersCalendarViewInstancesCalendarSingleValueExtendedProperties", getTestStatus("canGetUsersCalendarViewInstancesCalendarSingleValueExtendedProperties")));
        this.addTest(canCreateUsersCalendarViewInstancesCalendarSingleValueExtendedProperties("Can create canCreateUsersCalendarViewInstancesCalendarSingleValueExtendedProperties", getTestStatus("canCreateUsersCalendarViewInstancesCalendarSingleValueExtendedProperties")));
        this.addTest(canGetUsersCalendarViewInstancesCalendarMultiValueExtendedProperties("Can get UsersCalendarViewInstancesCalendarMultiValueExtendedProperties", getTestStatus("canGetUsersCalendarViewInstancesCalendarMultiValueExtendedProperties")));
        this.addTest(canCreateUsersCalendarViewInstancesCalendarMultiValueExtendedProperties("Can create canCreateUsersCalendarViewInstancesCalendarMultiValueExtendedProperties", getTestStatus("canCreateUsersCalendarViewInstancesCalendarMultiValueExtendedProperties")));
        this.addTest(canGetUsersCalendarViewInstancesExtensions("Can get UsersCalendarViewInstancesExtensions", getTestStatus("canGetUsersCalendarViewInstancesExtensions")));
        this.addTest(canCreateUsersCalendarViewInstancesExtensions("Can create canCreateUsersCalendarViewInstancesExtensions", getTestStatus("canCreateUsersCalendarViewInstancesExtensions")));
        this.addTest(canGetUsersCalendarViewInstancesAttachments("Can get UsersCalendarViewInstancesAttachments", getTestStatus("canGetUsersCalendarViewInstancesAttachments")));
        this.addTest(canCreateUsersCalendarViewInstancesAttachments("Can create canCreateUsersCalendarViewInstancesAttachments", getTestStatus("canCreateUsersCalendarViewInstancesAttachments")));
        this.addTest(canGetUsersCalendarViewInstancesSingleValueExtendedProperties("Can get UsersCalendarViewInstancesSingleValueExtendedProperties", getTestStatus("canGetUsersCalendarViewInstancesSingleValueExtendedProperties")));
        this.addTest(canCreateUsersCalendarViewInstancesSingleValueExtendedProperties("Can create canCreateUsersCalendarViewInstancesSingleValueExtendedProperties", getTestStatus("canCreateUsersCalendarViewInstancesSingleValueExtendedProperties")));
        this.addTest(canGetUsersCalendarViewInstancesMultiValueExtendedProperties("Can get UsersCalendarViewInstancesMultiValueExtendedProperties", getTestStatus("canGetUsersCalendarViewInstancesMultiValueExtendedProperties")));
        this.addTest(canCreateUsersCalendarViewInstancesMultiValueExtendedProperties("Can create canCreateUsersCalendarViewInstancesMultiValueExtendedProperties", getTestStatus("canCreateUsersCalendarViewInstancesMultiValueExtendedProperties")));
        this.addTest(canGetUsersCalendarViewExtensions("Can get UsersCalendarViewExtensions", getTestStatus("canGetUsersCalendarViewExtensions")));
        this.addTest(canCreateUsersCalendarViewExtensions("Can create canCreateUsersCalendarViewExtensions", getTestStatus("canCreateUsersCalendarViewExtensions")));
        this.addTest(canGetUsersCalendarViewAttachments("Can get UsersCalendarViewAttachments", getTestStatus("canGetUsersCalendarViewAttachments")));
        this.addTest(canCreateUsersCalendarViewAttachments("Can create canCreateUsersCalendarViewAttachments", getTestStatus("canCreateUsersCalendarViewAttachments")));
        this.addTest(canGetUsersCalendarViewSingleValueExtendedProperties("Can get UsersCalendarViewSingleValueExtendedProperties", getTestStatus("canGetUsersCalendarViewSingleValueExtendedProperties")));
        this.addTest(canCreateUsersCalendarViewSingleValueExtendedProperties("Can create canCreateUsersCalendarViewSingleValueExtendedProperties", getTestStatus("canCreateUsersCalendarViewSingleValueExtendedProperties")));
        this.addTest(canGetUsersCalendarViewMultiValueExtendedProperties("Can get UsersCalendarViewMultiValueExtendedProperties", getTestStatus("canGetUsersCalendarViewMultiValueExtendedProperties")));
        this.addTest(canCreateUsersCalendarViewMultiValueExtendedProperties("Can create canCreateUsersCalendarViewMultiValueExtendedProperties", getTestStatus("canCreateUsersCalendarViewMultiValueExtendedProperties")));
        this.addTest(canGetUsersEvents("Can get UsersEvents", getTestStatus("canGetUsersEvents")));
        this.addTest(canCreateUsersEvents("Can create canCreateUsersEvents", getTestStatus("canCreateUsersEvents")));
        this.addTest(canGetUsersEventsCalendar("Can get UsersEventsCalendar", getTestStatus("canGetUsersEventsCalendar")));
        this.addTest(canGetUsersEventsCalendarSingleValueExtendedProperties("Can get UsersEventsCalendarSingleValueExtendedProperties", getTestStatus("canGetUsersEventsCalendarSingleValueExtendedProperties")));
        this.addTest(canCreateUsersEventsCalendarSingleValueExtendedProperties("Can create canCreateUsersEventsCalendarSingleValueExtendedProperties", getTestStatus("canCreateUsersEventsCalendarSingleValueExtendedProperties")));
        this.addTest(canGetUsersEventsCalendarMultiValueExtendedProperties("Can get UsersEventsCalendarMultiValueExtendedProperties", getTestStatus("canGetUsersEventsCalendarMultiValueExtendedProperties")));
        this.addTest(canCreateUsersEventsCalendarMultiValueExtendedProperties("Can create canCreateUsersEventsCalendarMultiValueExtendedProperties", getTestStatus("canCreateUsersEventsCalendarMultiValueExtendedProperties")));
        this.addTest(canGetUsersEventsInstances("Can get UsersEventsInstances", getTestStatus("canGetUsersEventsInstances")));
        this.addTest(canCreateUsersEventsInstances("Can create canCreateUsersEventsInstances", getTestStatus("canCreateUsersEventsInstances")));
        this.addTest(canGetUsersEventsInstancesCalendar("Can get UsersEventsInstancesCalendar", getTestStatus("canGetUsersEventsInstancesCalendar")));
        this.addTest(canGetUsersEventsInstancesCalendarSingleValueExtendedProperties("Can get UsersEventsInstancesCalendarSingleValueExtendedProperties", getTestStatus("canGetUsersEventsInstancesCalendarSingleValueExtendedProperties")));
        this.addTest(canCreateUsersEventsInstancesCalendarSingleValueExtendedProperties("Can create canCreateUsersEventsInstancesCalendarSingleValueExtendedProperties", getTestStatus("canCreateUsersEventsInstancesCalendarSingleValueExtendedProperties")));
        this.addTest(canGetUsersEventsInstancesCalendarMultiValueExtendedProperties("Can get UsersEventsInstancesCalendarMultiValueExtendedProperties", getTestStatus("canGetUsersEventsInstancesCalendarMultiValueExtendedProperties")));
        this.addTest(canCreateUsersEventsInstancesCalendarMultiValueExtendedProperties("Can create canCreateUsersEventsInstancesCalendarMultiValueExtendedProperties", getTestStatus("canCreateUsersEventsInstancesCalendarMultiValueExtendedProperties")));
        this.addTest(canGetUsersEventsInstancesExtensions("Can get UsersEventsInstancesExtensions", getTestStatus("canGetUsersEventsInstancesExtensions")));
        this.addTest(canCreateUsersEventsInstancesExtensions("Can create canCreateUsersEventsInstancesExtensions", getTestStatus("canCreateUsersEventsInstancesExtensions")));
        this.addTest(canGetUsersEventsInstancesAttachments("Can get UsersEventsInstancesAttachments", getTestStatus("canGetUsersEventsInstancesAttachments")));
        this.addTest(canCreateUsersEventsInstancesAttachments("Can create canCreateUsersEventsInstancesAttachments", getTestStatus("canCreateUsersEventsInstancesAttachments")));
        this.addTest(canGetUsersEventsInstancesSingleValueExtendedProperties("Can get UsersEventsInstancesSingleValueExtendedProperties", getTestStatus("canGetUsersEventsInstancesSingleValueExtendedProperties")));
        this.addTest(canCreateUsersEventsInstancesSingleValueExtendedProperties("Can create canCreateUsersEventsInstancesSingleValueExtendedProperties", getTestStatus("canCreateUsersEventsInstancesSingleValueExtendedProperties")));
        this.addTest(canGetUsersEventsInstancesMultiValueExtendedProperties("Can get UsersEventsInstancesMultiValueExtendedProperties", getTestStatus("canGetUsersEventsInstancesMultiValueExtendedProperties")));
        this.addTest(canCreateUsersEventsInstancesMultiValueExtendedProperties("Can create canCreateUsersEventsInstancesMultiValueExtendedProperties", getTestStatus("canCreateUsersEventsInstancesMultiValueExtendedProperties")));
        this.addTest(canGetUsersEventsExtensions("Can get UsersEventsExtensions", getTestStatus("canGetUsersEventsExtensions")));
        this.addTest(canCreateUsersEventsExtensions("Can create canCreateUsersEventsExtensions", getTestStatus("canCreateUsersEventsExtensions")));
        this.addTest(canGetUsersEventsAttachments("Can get UsersEventsAttachments", getTestStatus("canGetUsersEventsAttachments")));
        this.addTest(canCreateUsersEventsAttachments("Can create canCreateUsersEventsAttachments", getTestStatus("canCreateUsersEventsAttachments")));
        this.addTest(canGetUsersEventsSingleValueExtendedProperties("Can get UsersEventsSingleValueExtendedProperties", getTestStatus("canGetUsersEventsSingleValueExtendedProperties")));
        this.addTest(canCreateUsersEventsSingleValueExtendedProperties("Can create canCreateUsersEventsSingleValueExtendedProperties", getTestStatus("canCreateUsersEventsSingleValueExtendedProperties")));
        this.addTest(canGetUsersEventsMultiValueExtendedProperties("Can get UsersEventsMultiValueExtendedProperties", getTestStatus("canGetUsersEventsMultiValueExtendedProperties")));
        this.addTest(canCreateUsersEventsMultiValueExtendedProperties("Can create canCreateUsersEventsMultiValueExtendedProperties", getTestStatus("canCreateUsersEventsMultiValueExtendedProperties")));
        this.addTest(canGetUsersPeople("Can get UsersPeople", getTestStatus("canGetUsersPeople")));
        this.addTest(canCreateUsersPeople("Can create canCreateUsersPeople", getTestStatus("canCreateUsersPeople")));
        this.addTest(canGetUsersContacts("Can get UsersContacts", getTestStatus("canGetUsersContacts")));
        this.addTest(canCreateUsersContacts("Can create canCreateUsersContacts", getTestStatus("canCreateUsersContacts")));
        this.addTest(canGetUsersContactsExtensions("Can get UsersContactsExtensions", getTestStatus("canGetUsersContactsExtensions")));
        this.addTest(canCreateUsersContactsExtensions("Can create canCreateUsersContactsExtensions", getTestStatus("canCreateUsersContactsExtensions")));
        this.addTest(canGetUsersContactsPhoto("Can get UsersContactsPhoto", getTestStatus("canGetUsersContactsPhoto")));
        this.addTest(canGetUsersContactsSingleValueExtendedProperties("Can get UsersContactsSingleValueExtendedProperties", getTestStatus("canGetUsersContactsSingleValueExtendedProperties")));
        this.addTest(canCreateUsersContactsSingleValueExtendedProperties("Can create canCreateUsersContactsSingleValueExtendedProperties", getTestStatus("canCreateUsersContactsSingleValueExtendedProperties")));
        this.addTest(canGetUsersContactsMultiValueExtendedProperties("Can get UsersContactsMultiValueExtendedProperties", getTestStatus("canGetUsersContactsMultiValueExtendedProperties")));
        this.addTest(canCreateUsersContactsMultiValueExtendedProperties("Can create canCreateUsersContactsMultiValueExtendedProperties", getTestStatus("canCreateUsersContactsMultiValueExtendedProperties")));
        this.addTest(canGetUsersContactFolders("Can get UsersContactFolders", getTestStatus("canGetUsersContactFolders")));
        this.addTest(canCreateUsersContactFolders("Can create canCreateUsersContactFolders", getTestStatus("canCreateUsersContactFolders")));
        this.addTest(canGetUsersContactFoldersContacts("Can get UsersContactFoldersContacts", getTestStatus("canGetUsersContactFoldersContacts")));
        this.addTest(canCreateUsersContactFoldersContacts("Can create canCreateUsersContactFoldersContacts", getTestStatus("canCreateUsersContactFoldersContacts")));
        this.addTest(canGetUsersContactFoldersContactsExtensions("Can get UsersContactFoldersContactsExtensions", getTestStatus("canGetUsersContactFoldersContactsExtensions")));
        this.addTest(canCreateUsersContactFoldersContactsExtensions("Can create canCreateUsersContactFoldersContactsExtensions", getTestStatus("canCreateUsersContactFoldersContactsExtensions")));
        this.addTest(canGetUsersContactFoldersContactsPhoto("Can get UsersContactFoldersContactsPhoto", getTestStatus("canGetUsersContactFoldersContactsPhoto")));
        this.addTest(canGetUsersContactFoldersContactsSingleValueExtendedProperties("Can get UsersContactFoldersContactsSingleValueExtendedProperties", getTestStatus("canGetUsersContactFoldersContactsSingleValueExtendedProperties")));
        this.addTest(canCreateUsersContactFoldersContactsSingleValueExtendedProperties("Can create canCreateUsersContactFoldersContactsSingleValueExtendedProperties", getTestStatus("canCreateUsersContactFoldersContactsSingleValueExtendedProperties")));
        this.addTest(canGetUsersContactFoldersContactsMultiValueExtendedProperties("Can get UsersContactFoldersContactsMultiValueExtendedProperties", getTestStatus("canGetUsersContactFoldersContactsMultiValueExtendedProperties")));
        this.addTest(canCreateUsersContactFoldersContactsMultiValueExtendedProperties("Can create canCreateUsersContactFoldersContactsMultiValueExtendedProperties", getTestStatus("canCreateUsersContactFoldersContactsMultiValueExtendedProperties")));
        this.addTest(canGetUsersContactFoldersChildFolders("Can get UsersContactFoldersChildFolders", getTestStatus("canGetUsersContactFoldersChildFolders")));
        this.addTest(canCreateUsersContactFoldersChildFolders("Can create canCreateUsersContactFoldersChildFolders", getTestStatus("canCreateUsersContactFoldersChildFolders")));
        this.addTest(canGetUsersContactFoldersChildFoldersContacts("Can get UsersContactFoldersChildFoldersContacts", getTestStatus("canGetUsersContactFoldersChildFoldersContacts")));
        this.addTest(canCreateUsersContactFoldersChildFoldersContacts("Can create canCreateUsersContactFoldersChildFoldersContacts", getTestStatus("canCreateUsersContactFoldersChildFoldersContacts")));
        this.addTest(canGetUsersContactFoldersChildFoldersContactsExtensions("Can get UsersContactFoldersChildFoldersContactsExtensions", getTestStatus("canGetUsersContactFoldersChildFoldersContactsExtensions")));
        this.addTest(canCreateUsersContactFoldersChildFoldersContactsExtensions("Can create canCreateUsersContactFoldersChildFoldersContactsExtensions", getTestStatus("canCreateUsersContactFoldersChildFoldersContactsExtensions")));
        this.addTest(canGetUsersContactFoldersChildFoldersContactsPhoto("Can get UsersContactFoldersChildFoldersContactsPhoto", getTestStatus("canGetUsersContactFoldersChildFoldersContactsPhoto")));
        this.addTest(canGetUsersContactFoldersChildFoldersContactsSingleValueExtendedProperties("Can get UsersContactFoldersChildFoldersContactsSingleValueExtendedProperties", getTestStatus("canGetUsersContactFoldersChildFoldersContactsSingleValueExtendedProperties")));
        this.addTest(canCreateUsersContactFoldersChildFoldersContactsSingleValueExtendedProperties("Can create canCreateUsersContactFoldersChildFoldersContactsSingleValueExtendedProperties", getTestStatus("canCreateUsersContactFoldersChildFoldersContactsSingleValueExtendedProperties")));
        this.addTest(canGetUsersContactFoldersChildFoldersContactsMultiValueExtendedProperties("Can get UsersContactFoldersChildFoldersContactsMultiValueExtendedProperties", getTestStatus("canGetUsersContactFoldersChildFoldersContactsMultiValueExtendedProperties")));
        this.addTest(canCreateUsersContactFoldersChildFoldersContactsMultiValueExtendedProperties("Can create canCreateUsersContactFoldersChildFoldersContactsMultiValueExtendedProperties", getTestStatus("canCreateUsersContactFoldersChildFoldersContactsMultiValueExtendedProperties")));
        this.addTest(canGetUsersContactFoldersChildFoldersSingleValueExtendedProperties("Can get UsersContactFoldersChildFoldersSingleValueExtendedProperties", getTestStatus("canGetUsersContactFoldersChildFoldersSingleValueExtendedProperties")));
        this.addTest(canCreateUsersContactFoldersChildFoldersSingleValueExtendedProperties("Can create canCreateUsersContactFoldersChildFoldersSingleValueExtendedProperties", getTestStatus("canCreateUsersContactFoldersChildFoldersSingleValueExtendedProperties")));
        this.addTest(canGetUsersContactFoldersChildFoldersMultiValueExtendedProperties("Can get UsersContactFoldersChildFoldersMultiValueExtendedProperties", getTestStatus("canGetUsersContactFoldersChildFoldersMultiValueExtendedProperties")));
        this.addTest(canCreateUsersContactFoldersChildFoldersMultiValueExtendedProperties("Can create canCreateUsersContactFoldersChildFoldersMultiValueExtendedProperties", getTestStatus("canCreateUsersContactFoldersChildFoldersMultiValueExtendedProperties")));
        this.addTest(canGetUsersContactFoldersSingleValueExtendedProperties("Can get UsersContactFoldersSingleValueExtendedProperties", getTestStatus("canGetUsersContactFoldersSingleValueExtendedProperties")));
        this.addTest(canCreateUsersContactFoldersSingleValueExtendedProperties("Can create canCreateUsersContactFoldersSingleValueExtendedProperties", getTestStatus("canCreateUsersContactFoldersSingleValueExtendedProperties")));
        this.addTest(canGetUsersContactFoldersMultiValueExtendedProperties("Can get UsersContactFoldersMultiValueExtendedProperties", getTestStatus("canGetUsersContactFoldersMultiValueExtendedProperties")));
        this.addTest(canCreateUsersContactFoldersMultiValueExtendedProperties("Can create canCreateUsersContactFoldersMultiValueExtendedProperties", getTestStatus("canCreateUsersContactFoldersMultiValueExtendedProperties")));
        this.addTest(canGetUsersInferenceClassification("Can get UsersInferenceClassification", getTestStatus("canGetUsersInferenceClassification")));
        this.addTest(canGetUsersInferenceClassificationOverrides("Can get UsersInferenceClassificationOverrides", getTestStatus("canGetUsersInferenceClassificationOverrides")));
        this.addTest(canCreateUsersInferenceClassificationOverrides("Can create canCreateUsersInferenceClassificationOverrides", getTestStatus("canCreateUsersInferenceClassificationOverrides")));
        this.addTest(canGetUsersRootFolder("Can get UsersRootFolder", getTestStatus("canGetUsersRootFolder")));
        this.addTest(canGetUsersRootFolderMessages("Can get UsersRootFolderMessages", getTestStatus("canGetUsersRootFolderMessages")));
        this.addTest(canCreateUsersRootFolderMessages("Can create canCreateUsersRootFolderMessages", getTestStatus("canCreateUsersRootFolderMessages")));
        this.addTest(canGetUsersRootFolderMessagesExtensions("Can get UsersRootFolderMessagesExtensions", getTestStatus("canGetUsersRootFolderMessagesExtensions")));
        this.addTest(canCreateUsersRootFolderMessagesExtensions("Can create canCreateUsersRootFolderMessagesExtensions", getTestStatus("canCreateUsersRootFolderMessagesExtensions")));
        this.addTest(canGetUsersRootFolderMessagesAttachments("Can get UsersRootFolderMessagesAttachments", getTestStatus("canGetUsersRootFolderMessagesAttachments")));
        this.addTest(canCreateUsersRootFolderMessagesAttachments("Can create canCreateUsersRootFolderMessagesAttachments", getTestStatus("canCreateUsersRootFolderMessagesAttachments")));
        this.addTest(canGetUsersRootFolderMessagesSingleValueExtendedProperties("Can get UsersRootFolderMessagesSingleValueExtendedProperties", getTestStatus("canGetUsersRootFolderMessagesSingleValueExtendedProperties")));
        this.addTest(canCreateUsersRootFolderMessagesSingleValueExtendedProperties("Can create canCreateUsersRootFolderMessagesSingleValueExtendedProperties", getTestStatus("canCreateUsersRootFolderMessagesSingleValueExtendedProperties")));
        this.addTest(canGetUsersRootFolderMessagesMultiValueExtendedProperties("Can get UsersRootFolderMessagesMultiValueExtendedProperties", getTestStatus("canGetUsersRootFolderMessagesMultiValueExtendedProperties")));
        this.addTest(canCreateUsersRootFolderMessagesMultiValueExtendedProperties("Can create canCreateUsersRootFolderMessagesMultiValueExtendedProperties", getTestStatus("canCreateUsersRootFolderMessagesMultiValueExtendedProperties")));
        this.addTest(canGetUsersRootFolderChildFolders("Can get UsersRootFolderChildFolders", getTestStatus("canGetUsersRootFolderChildFolders")));
        this.addTest(canCreateUsersRootFolderChildFolders("Can create canCreateUsersRootFolderChildFolders", getTestStatus("canCreateUsersRootFolderChildFolders")));
        this.addTest(canGetUsersRootFolderChildFoldersMessages("Can get UsersRootFolderChildFoldersMessages", getTestStatus("canGetUsersRootFolderChildFoldersMessages")));
        this.addTest(canCreateUsersRootFolderChildFoldersMessages("Can create canCreateUsersRootFolderChildFoldersMessages", getTestStatus("canCreateUsersRootFolderChildFoldersMessages")));
        this.addTest(canGetUsersRootFolderChildFoldersMessagesExtensions("Can get UsersRootFolderChildFoldersMessagesExtensions", getTestStatus("canGetUsersRootFolderChildFoldersMessagesExtensions")));
        this.addTest(canCreateUsersRootFolderChildFoldersMessagesExtensions("Can create canCreateUsersRootFolderChildFoldersMessagesExtensions", getTestStatus("canCreateUsersRootFolderChildFoldersMessagesExtensions")));
        this.addTest(canGetUsersRootFolderChildFoldersMessagesAttachments("Can get UsersRootFolderChildFoldersMessagesAttachments", getTestStatus("canGetUsersRootFolderChildFoldersMessagesAttachments")));
        this.addTest(canCreateUsersRootFolderChildFoldersMessagesAttachments("Can create canCreateUsersRootFolderChildFoldersMessagesAttachments", getTestStatus("canCreateUsersRootFolderChildFoldersMessagesAttachments")));
        this.addTest(canGetUsersRootFolderChildFoldersMessagesSingleValueExtendedProperties("Can get UsersRootFolderChildFoldersMessagesSingleValueExtendedProperties", getTestStatus("canGetUsersRootFolderChildFoldersMessagesSingleValueExtendedProperties")));
        this.addTest(canCreateUsersRootFolderChildFoldersMessagesSingleValueExtendedProperties("Can create canCreateUsersRootFolderChildFoldersMessagesSingleValueExtendedProperties", getTestStatus("canCreateUsersRootFolderChildFoldersMessagesSingleValueExtendedProperties")));
        this.addTest(canGetUsersRootFolderChildFoldersMessagesMultiValueExtendedProperties("Can get UsersRootFolderChildFoldersMessagesMultiValueExtendedProperties", getTestStatus("canGetUsersRootFolderChildFoldersMessagesMultiValueExtendedProperties")));
        this.addTest(canCreateUsersRootFolderChildFoldersMessagesMultiValueExtendedProperties("Can create canCreateUsersRootFolderChildFoldersMessagesMultiValueExtendedProperties", getTestStatus("canCreateUsersRootFolderChildFoldersMessagesMultiValueExtendedProperties")));
        this.addTest(canGetUsersRootFolderChildFoldersSingleValueExtendedProperties("Can get UsersRootFolderChildFoldersSingleValueExtendedProperties", getTestStatus("canGetUsersRootFolderChildFoldersSingleValueExtendedProperties")));
        this.addTest(canCreateUsersRootFolderChildFoldersSingleValueExtendedProperties("Can create canCreateUsersRootFolderChildFoldersSingleValueExtendedProperties", getTestStatus("canCreateUsersRootFolderChildFoldersSingleValueExtendedProperties")));
        this.addTest(canGetUsersRootFolderChildFoldersMultiValueExtendedProperties("Can get UsersRootFolderChildFoldersMultiValueExtendedProperties", getTestStatus("canGetUsersRootFolderChildFoldersMultiValueExtendedProperties")));
        this.addTest(canCreateUsersRootFolderChildFoldersMultiValueExtendedProperties("Can create canCreateUsersRootFolderChildFoldersMultiValueExtendedProperties", getTestStatus("canCreateUsersRootFolderChildFoldersMultiValueExtendedProperties")));
        this.addTest(canGetUsersRootFolderSingleValueExtendedProperties("Can get UsersRootFolderSingleValueExtendedProperties", getTestStatus("canGetUsersRootFolderSingleValueExtendedProperties")));
        this.addTest(canCreateUsersRootFolderSingleValueExtendedProperties("Can create canCreateUsersRootFolderSingleValueExtendedProperties", getTestStatus("canCreateUsersRootFolderSingleValueExtendedProperties")));
        this.addTest(canGetUsersRootFolderMultiValueExtendedProperties("Can get UsersRootFolderMultiValueExtendedProperties", getTestStatus("canGetUsersRootFolderMultiValueExtendedProperties")));
        this.addTest(canCreateUsersRootFolderMultiValueExtendedProperties("Can create canCreateUsersRootFolderMultiValueExtendedProperties", getTestStatus("canCreateUsersRootFolderMultiValueExtendedProperties")));
        this.addTest(canGetUsersAggregatedSocialActivities("Can get UsersAggregatedSocialActivities", getTestStatus("canGetUsersAggregatedSocialActivities")));
        this.addTest(canCreateUsersAggregatedSocialActivities("Can create canCreateUsersAggregatedSocialActivities", getTestStatus("canCreateUsersAggregatedSocialActivities")));
        this.addTest(canGetUsersAggregatedSocialActivitiesItem("Can get UsersAggregatedSocialActivitiesItem", getTestStatus("canGetUsersAggregatedSocialActivitiesItem")));
        this.addTest(canGetUsersAggregatedSocialActivitiesItemCalendar("Can get UsersAggregatedSocialActivitiesItemCalendar", getTestStatus("canGetUsersAggregatedSocialActivitiesItemCalendar")));
        this.addTest(canGetUsersAggregatedSocialActivitiesItemCalendarSingleValueExtendedProperties("Can get UsersAggregatedSocialActivitiesItemCalendarSingleValueExtendedProperties", getTestStatus("canGetUsersAggregatedSocialActivitiesItemCalendarSingleValueExtendedProperties")));
        this.addTest(canCreateUsersAggregatedSocialActivitiesItemCalendarSingleValueExtendedProperties("Can create canCreateUsersAggregatedSocialActivitiesItemCalendarSingleValueExtendedProperties", getTestStatus("canCreateUsersAggregatedSocialActivitiesItemCalendarSingleValueExtendedProperties")));
        this.addTest(canGetUsersAggregatedSocialActivitiesItemCalendarMultiValueExtendedProperties("Can get UsersAggregatedSocialActivitiesItemCalendarMultiValueExtendedProperties", getTestStatus("canGetUsersAggregatedSocialActivitiesItemCalendarMultiValueExtendedProperties")));
        this.addTest(canCreateUsersAggregatedSocialActivitiesItemCalendarMultiValueExtendedProperties("Can create canCreateUsersAggregatedSocialActivitiesItemCalendarMultiValueExtendedProperties", getTestStatus("canCreateUsersAggregatedSocialActivitiesItemCalendarMultiValueExtendedProperties")));
        this.addTest(canGetUsersAggregatedSocialActivitiesItemInstances("Can get UsersAggregatedSocialActivitiesItemInstances", getTestStatus("canGetUsersAggregatedSocialActivitiesItemInstances")));
        this.addTest(canCreateUsersAggregatedSocialActivitiesItemInstances("Can create canCreateUsersAggregatedSocialActivitiesItemInstances", getTestStatus("canCreateUsersAggregatedSocialActivitiesItemInstances")));
        this.addTest(canGetUsersAggregatedSocialActivitiesItemInstancesCalendar("Can get UsersAggregatedSocialActivitiesItemInstancesCalendar", getTestStatus("canGetUsersAggregatedSocialActivitiesItemInstancesCalendar")));
        this.addTest(canGetUsersAggregatedSocialActivitiesItemInstancesCalendarSingleValueExtendedProperties("Can get UsersAggregatedSocialActivitiesItemInstancesCalendarSingleValueExtendedProperties", getTestStatus("canGetUsersAggregatedSocialActivitiesItemInstancesCalendarSingleValueExtendedProperties")));
        this.addTest(canCreateUsersAggregatedSocialActivitiesItemInstancesCalendarSingleValueExtendedProperties("Can create canCreateUsersAggregatedSocialActivitiesItemInstancesCalendarSingleValueExtendedProperties", getTestStatus("canCreateUsersAggregatedSocialActivitiesItemInstancesCalendarSingleValueExtendedProperties")));
        this.addTest(canGetUsersAggregatedSocialActivitiesItemInstancesCalendarMultiValueExtendedProperties("Can get UsersAggregatedSocialActivitiesItemInstancesCalendarMultiValueExtendedProperties", getTestStatus("canGetUsersAggregatedSocialActivitiesItemInstancesCalendarMultiValueExtendedProperties")));
        this.addTest(canCreateUsersAggregatedSocialActivitiesItemInstancesCalendarMultiValueExtendedProperties("Can create canCreateUsersAggregatedSocialActivitiesItemInstancesCalendarMultiValueExtendedProperties", getTestStatus("canCreateUsersAggregatedSocialActivitiesItemInstancesCalendarMultiValueExtendedProperties")));
        this.addTest(canGetUsersAggregatedSocialActivitiesItemInstancesExtensions("Can get UsersAggregatedSocialActivitiesItemInstancesExtensions", getTestStatus("canGetUsersAggregatedSocialActivitiesItemInstancesExtensions")));
        this.addTest(canCreateUsersAggregatedSocialActivitiesItemInstancesExtensions("Can create canCreateUsersAggregatedSocialActivitiesItemInstancesExtensions", getTestStatus("canCreateUsersAggregatedSocialActivitiesItemInstancesExtensions")));
        this.addTest(canGetUsersAggregatedSocialActivitiesItemInstancesAttachments("Can get UsersAggregatedSocialActivitiesItemInstancesAttachments", getTestStatus("canGetUsersAggregatedSocialActivitiesItemInstancesAttachments")));
        this.addTest(canCreateUsersAggregatedSocialActivitiesItemInstancesAttachments("Can create canCreateUsersAggregatedSocialActivitiesItemInstancesAttachments", getTestStatus("canCreateUsersAggregatedSocialActivitiesItemInstancesAttachments")));
        this.addTest(canGetUsersAggregatedSocialActivitiesItemInstancesSingleValueExtendedProperties("Can get UsersAggregatedSocialActivitiesItemInstancesSingleValueExtendedProperties", getTestStatus("canGetUsersAggregatedSocialActivitiesItemInstancesSingleValueExtendedProperties")));
        this.addTest(canCreateUsersAggregatedSocialActivitiesItemInstancesSingleValueExtendedProperties("Can create canCreateUsersAggregatedSocialActivitiesItemInstancesSingleValueExtendedProperties", getTestStatus("canCreateUsersAggregatedSocialActivitiesItemInstancesSingleValueExtendedProperties")));
        this.addTest(canGetUsersAggregatedSocialActivitiesItemInstancesMultiValueExtendedProperties("Can get UsersAggregatedSocialActivitiesItemInstancesMultiValueExtendedProperties", getTestStatus("canGetUsersAggregatedSocialActivitiesItemInstancesMultiValueExtendedProperties")));
        this.addTest(canCreateUsersAggregatedSocialActivitiesItemInstancesMultiValueExtendedProperties("Can create canCreateUsersAggregatedSocialActivitiesItemInstancesMultiValueExtendedProperties", getTestStatus("canCreateUsersAggregatedSocialActivitiesItemInstancesMultiValueExtendedProperties")));
        this.addTest(canGetUsersAggregatedSocialActivitiesItemExtensions("Can get UsersAggregatedSocialActivitiesItemExtensions", getTestStatus("canGetUsersAggregatedSocialActivitiesItemExtensions")));
        this.addTest(canCreateUsersAggregatedSocialActivitiesItemExtensions("Can create canCreateUsersAggregatedSocialActivitiesItemExtensions", getTestStatus("canCreateUsersAggregatedSocialActivitiesItemExtensions")));
        this.addTest(canGetUsersAggregatedSocialActivitiesItemAttachments("Can get UsersAggregatedSocialActivitiesItemAttachments", getTestStatus("canGetUsersAggregatedSocialActivitiesItemAttachments")));
        this.addTest(canCreateUsersAggregatedSocialActivitiesItemAttachments("Can create canCreateUsersAggregatedSocialActivitiesItemAttachments", getTestStatus("canCreateUsersAggregatedSocialActivitiesItemAttachments")));
        this.addTest(canGetUsersAggregatedSocialActivitiesItemSingleValueExtendedProperties("Can get UsersAggregatedSocialActivitiesItemSingleValueExtendedProperties", getTestStatus("canGetUsersAggregatedSocialActivitiesItemSingleValueExtendedProperties")));
        this.addTest(canCreateUsersAggregatedSocialActivitiesItemSingleValueExtendedProperties("Can create canCreateUsersAggregatedSocialActivitiesItemSingleValueExtendedProperties", getTestStatus("canCreateUsersAggregatedSocialActivitiesItemSingleValueExtendedProperties")));
        this.addTest(canGetUsersAggregatedSocialActivitiesItemMultiValueExtendedProperties("Can get UsersAggregatedSocialActivitiesItemMultiValueExtendedProperties", getTestStatus("canGetUsersAggregatedSocialActivitiesItemMultiValueExtendedProperties")));
        this.addTest(canCreateUsersAggregatedSocialActivitiesItemMultiValueExtendedProperties("Can create canCreateUsersAggregatedSocialActivitiesItemMultiValueExtendedProperties", getTestStatus("canCreateUsersAggregatedSocialActivitiesItemMultiValueExtendedProperties")));
        this.addTest(canGetUsersPhoto("Can get UsersPhoto", getTestStatus("canGetUsersPhoto")));
        this.addTest(canGetUsersPhotos("Can get UsersPhotos", getTestStatus("canGetUsersPhotos")));
        this.addTest(canCreateUsersPhotos("Can create canCreateUsersPhotos", getTestStatus("canCreateUsersPhotos")));
        this.addTest(canGetUsersDrives("Can get UsersDrives", getTestStatus("canGetUsersDrives")));
        this.addTest(canCreateUsersDrives("Can create canCreateUsersDrives", getTestStatus("canCreateUsersDrives")));
        this.addTest(canGetUsersDrivesExtensions("Can get UsersDrivesExtensions", getTestStatus("canGetUsersDrivesExtensions")));
        this.addTest(canCreateUsersDrivesExtensions("Can create canCreateUsersDrivesExtensions", getTestStatus("canCreateUsersDrivesExtensions")));
        this.addTest(canGetUsersDrivesFiles("Can get UsersDrivesFiles", getTestStatus("canGetUsersDrivesFiles")));
        this.addTest(canCreateUsersDrivesFiles("Can create canCreateUsersDrivesFiles", getTestStatus("canCreateUsersDrivesFiles")));
        this.addTest(canGetUsersDrivesFilesExtensions("Can get UsersDrivesFilesExtensions", getTestStatus("canGetUsersDrivesFilesExtensions")));
        this.addTest(canCreateUsersDrivesFilesExtensions("Can create canCreateUsersDrivesFilesExtensions", getTestStatus("canCreateUsersDrivesFilesExtensions")));
        this.addTest(canGetUsersWorkingWithEntities("Can get UsersWorkingWithEntities", getTestStatus("canGetUsersWorkingWithEntities")));
        this.addTest(canCreateUsersWorkingWithEntities("Can create canCreateUsersWorkingWithEntities", getTestStatus("canCreateUsersWorkingWithEntities")));
        this.addTest(canGetUsersWorkingWithEntitiesExtensions("Can get UsersWorkingWithEntitiesExtensions", getTestStatus("canGetUsersWorkingWithEntitiesExtensions")));
        this.addTest(canCreateUsersWorkingWithEntitiesExtensions("Can create canCreateUsersWorkingWithEntitiesExtensions", getTestStatus("canCreateUsersWorkingWithEntitiesExtensions")));
        this.addTest(canGetGroups("Can get Groups", getTestStatus("canGetGroups")));
        this.addTest(canCreateGroups("Can create canCreateGroups", getTestStatus("canCreateGroups")));
        this.addTest(canGetGroupsThreads("Can get GroupsThreads", getTestStatus("canGetGroupsThreads")));
        this.addTest(canCreateGroupsThreads("Can create canCreateGroupsThreads", getTestStatus("canCreateGroupsThreads")));
        this.addTest(canGetGroupsThreadsPosts("Can get GroupsThreadsPosts", getTestStatus("canGetGroupsThreadsPosts")));
        this.addTest(canCreateGroupsThreadsPosts("Can create canCreateGroupsThreadsPosts", getTestStatus("canCreateGroupsThreadsPosts")));
        this.addTest(canGetGroupsThreadsPostsExtensions("Can get GroupsThreadsPostsExtensions", getTestStatus("canGetGroupsThreadsPostsExtensions")));
        this.addTest(canCreateGroupsThreadsPostsExtensions("Can create canCreateGroupsThreadsPostsExtensions", getTestStatus("canCreateGroupsThreadsPostsExtensions")));
        this.addTest(canGetGroupsThreadsPostsInReplyTo("Can get GroupsThreadsPostsInReplyTo", getTestStatus("canGetGroupsThreadsPostsInReplyTo")));
        this.addTest(canGetGroupsThreadsPostsInReplyToExtensions("Can get GroupsThreadsPostsInReplyToExtensions", getTestStatus("canGetGroupsThreadsPostsInReplyToExtensions")));
        this.addTest(canCreateGroupsThreadsPostsInReplyToExtensions("Can create canCreateGroupsThreadsPostsInReplyToExtensions", getTestStatus("canCreateGroupsThreadsPostsInReplyToExtensions")));
        this.addTest(canGetGroupsThreadsPostsInReplyToAttachments("Can get GroupsThreadsPostsInReplyToAttachments", getTestStatus("canGetGroupsThreadsPostsInReplyToAttachments")));
        this.addTest(canCreateGroupsThreadsPostsInReplyToAttachments("Can create canCreateGroupsThreadsPostsInReplyToAttachments", getTestStatus("canCreateGroupsThreadsPostsInReplyToAttachments")));
        this.addTest(canGetGroupsThreadsPostsInReplyToSingleValueExtendedProperties("Can get GroupsThreadsPostsInReplyToSingleValueExtendedProperties", getTestStatus("canGetGroupsThreadsPostsInReplyToSingleValueExtendedProperties")));
        this.addTest(canCreateGroupsThreadsPostsInReplyToSingleValueExtendedProperties("Can create canCreateGroupsThreadsPostsInReplyToSingleValueExtendedProperties", getTestStatus("canCreateGroupsThreadsPostsInReplyToSingleValueExtendedProperties")));
        this.addTest(canGetGroupsThreadsPostsInReplyToMultiValueExtendedProperties("Can get GroupsThreadsPostsInReplyToMultiValueExtendedProperties", getTestStatus("canGetGroupsThreadsPostsInReplyToMultiValueExtendedProperties")));
        this.addTest(canCreateGroupsThreadsPostsInReplyToMultiValueExtendedProperties("Can create canCreateGroupsThreadsPostsInReplyToMultiValueExtendedProperties", getTestStatus("canCreateGroupsThreadsPostsInReplyToMultiValueExtendedProperties")));
        this.addTest(canGetGroupsThreadsPostsAttachments("Can get GroupsThreadsPostsAttachments", getTestStatus("canGetGroupsThreadsPostsAttachments")));
        this.addTest(canCreateGroupsThreadsPostsAttachments("Can create canCreateGroupsThreadsPostsAttachments", getTestStatus("canCreateGroupsThreadsPostsAttachments")));
        this.addTest(canGetGroupsThreadsPostsSingleValueExtendedProperties("Can get GroupsThreadsPostsSingleValueExtendedProperties", getTestStatus("canGetGroupsThreadsPostsSingleValueExtendedProperties")));
        this.addTest(canCreateGroupsThreadsPostsSingleValueExtendedProperties("Can create canCreateGroupsThreadsPostsSingleValueExtendedProperties", getTestStatus("canCreateGroupsThreadsPostsSingleValueExtendedProperties")));
        this.addTest(canGetGroupsThreadsPostsMultiValueExtendedProperties("Can get GroupsThreadsPostsMultiValueExtendedProperties", getTestStatus("canGetGroupsThreadsPostsMultiValueExtendedProperties")));
        this.addTest(canCreateGroupsThreadsPostsMultiValueExtendedProperties("Can create canCreateGroupsThreadsPostsMultiValueExtendedProperties", getTestStatus("canCreateGroupsThreadsPostsMultiValueExtendedProperties")));
        this.addTest(canGetGroupsCalendar("Can get GroupsCalendar", getTestStatus("canGetGroupsCalendar")));
        this.addTest(canGetGroupsCalendarEvents("Can get GroupsCalendarEvents", getTestStatus("canGetGroupsCalendarEvents")));
        this.addTest(canCreateGroupsCalendarEvents("Can create canCreateGroupsCalendarEvents", getTestStatus("canCreateGroupsCalendarEvents")));
        this.addTest(canGetGroupsCalendarEventsInstances("Can get GroupsCalendarEventsInstances", getTestStatus("canGetGroupsCalendarEventsInstances")));
        this.addTest(canCreateGroupsCalendarEventsInstances("Can create canCreateGroupsCalendarEventsInstances", getTestStatus("canCreateGroupsCalendarEventsInstances")));
        this.addTest(canGetGroupsCalendarEventsInstancesExtensions("Can get GroupsCalendarEventsInstancesExtensions", getTestStatus("canGetGroupsCalendarEventsInstancesExtensions")));
        this.addTest(canCreateGroupsCalendarEventsInstancesExtensions("Can create canCreateGroupsCalendarEventsInstancesExtensions", getTestStatus("canCreateGroupsCalendarEventsInstancesExtensions")));
        this.addTest(canGetGroupsCalendarEventsInstancesAttachments("Can get GroupsCalendarEventsInstancesAttachments", getTestStatus("canGetGroupsCalendarEventsInstancesAttachments")));
        this.addTest(canCreateGroupsCalendarEventsInstancesAttachments("Can create canCreateGroupsCalendarEventsInstancesAttachments", getTestStatus("canCreateGroupsCalendarEventsInstancesAttachments")));
        this.addTest(canGetGroupsCalendarEventsInstancesSingleValueExtendedProperties("Can get GroupsCalendarEventsInstancesSingleValueExtendedProperties", getTestStatus("canGetGroupsCalendarEventsInstancesSingleValueExtendedProperties")));
        this.addTest(canCreateGroupsCalendarEventsInstancesSingleValueExtendedProperties("Can create canCreateGroupsCalendarEventsInstancesSingleValueExtendedProperties", getTestStatus("canCreateGroupsCalendarEventsInstancesSingleValueExtendedProperties")));
        this.addTest(canGetGroupsCalendarEventsInstancesMultiValueExtendedProperties("Can get GroupsCalendarEventsInstancesMultiValueExtendedProperties", getTestStatus("canGetGroupsCalendarEventsInstancesMultiValueExtendedProperties")));
        this.addTest(canCreateGroupsCalendarEventsInstancesMultiValueExtendedProperties("Can create canCreateGroupsCalendarEventsInstancesMultiValueExtendedProperties", getTestStatus("canCreateGroupsCalendarEventsInstancesMultiValueExtendedProperties")));
        this.addTest(canGetGroupsCalendarEventsExtensions("Can get GroupsCalendarEventsExtensions", getTestStatus("canGetGroupsCalendarEventsExtensions")));
        this.addTest(canCreateGroupsCalendarEventsExtensions("Can create canCreateGroupsCalendarEventsExtensions", getTestStatus("canCreateGroupsCalendarEventsExtensions")));
        this.addTest(canGetGroupsCalendarEventsAttachments("Can get GroupsCalendarEventsAttachments", getTestStatus("canGetGroupsCalendarEventsAttachments")));
        this.addTest(canCreateGroupsCalendarEventsAttachments("Can create canCreateGroupsCalendarEventsAttachments", getTestStatus("canCreateGroupsCalendarEventsAttachments")));
        this.addTest(canGetGroupsCalendarEventsSingleValueExtendedProperties("Can get GroupsCalendarEventsSingleValueExtendedProperties", getTestStatus("canGetGroupsCalendarEventsSingleValueExtendedProperties")));
        this.addTest(canCreateGroupsCalendarEventsSingleValueExtendedProperties("Can create canCreateGroupsCalendarEventsSingleValueExtendedProperties", getTestStatus("canCreateGroupsCalendarEventsSingleValueExtendedProperties")));
        this.addTest(canGetGroupsCalendarEventsMultiValueExtendedProperties("Can get GroupsCalendarEventsMultiValueExtendedProperties", getTestStatus("canGetGroupsCalendarEventsMultiValueExtendedProperties")));
        this.addTest(canCreateGroupsCalendarEventsMultiValueExtendedProperties("Can create canCreateGroupsCalendarEventsMultiValueExtendedProperties", getTestStatus("canCreateGroupsCalendarEventsMultiValueExtendedProperties")));
        this.addTest(canGetGroupsCalendarCalendarView("Can get GroupsCalendarCalendarView", getTestStatus("canGetGroupsCalendarCalendarView")));
        this.addTest(canCreateGroupsCalendarCalendarView("Can create canCreateGroupsCalendarCalendarView", getTestStatus("canCreateGroupsCalendarCalendarView")));
        this.addTest(canGetGroupsCalendarCalendarViewInstances("Can get GroupsCalendarCalendarViewInstances", getTestStatus("canGetGroupsCalendarCalendarViewInstances")));
        this.addTest(canCreateGroupsCalendarCalendarViewInstances("Can create canCreateGroupsCalendarCalendarViewInstances", getTestStatus("canCreateGroupsCalendarCalendarViewInstances")));
        this.addTest(canGetGroupsCalendarCalendarViewInstancesExtensions("Can get GroupsCalendarCalendarViewInstancesExtensions", getTestStatus("canGetGroupsCalendarCalendarViewInstancesExtensions")));
        this.addTest(canCreateGroupsCalendarCalendarViewInstancesExtensions("Can create canCreateGroupsCalendarCalendarViewInstancesExtensions", getTestStatus("canCreateGroupsCalendarCalendarViewInstancesExtensions")));
        this.addTest(canGetGroupsCalendarCalendarViewInstancesAttachments("Can get GroupsCalendarCalendarViewInstancesAttachments", getTestStatus("canGetGroupsCalendarCalendarViewInstancesAttachments")));
        this.addTest(canCreateGroupsCalendarCalendarViewInstancesAttachments("Can create canCreateGroupsCalendarCalendarViewInstancesAttachments", getTestStatus("canCreateGroupsCalendarCalendarViewInstancesAttachments")));
        this.addTest(canGetGroupsCalendarCalendarViewInstancesSingleValueExtendedProperties("Can get GroupsCalendarCalendarViewInstancesSingleValueExtendedProperties", getTestStatus("canGetGroupsCalendarCalendarViewInstancesSingleValueExtendedProperties")));
        this.addTest(canCreateGroupsCalendarCalendarViewInstancesSingleValueExtendedProperties("Can create canCreateGroupsCalendarCalendarViewInstancesSingleValueExtendedProperties", getTestStatus("canCreateGroupsCalendarCalendarViewInstancesSingleValueExtendedProperties")));
        this.addTest(canGetGroupsCalendarCalendarViewInstancesMultiValueExtendedProperties("Can get GroupsCalendarCalendarViewInstancesMultiValueExtendedProperties", getTestStatus("canGetGroupsCalendarCalendarViewInstancesMultiValueExtendedProperties")));
        this.addTest(canCreateGroupsCalendarCalendarViewInstancesMultiValueExtendedProperties("Can create canCreateGroupsCalendarCalendarViewInstancesMultiValueExtendedProperties", getTestStatus("canCreateGroupsCalendarCalendarViewInstancesMultiValueExtendedProperties")));
        this.addTest(canGetGroupsCalendarCalendarViewExtensions("Can get GroupsCalendarCalendarViewExtensions", getTestStatus("canGetGroupsCalendarCalendarViewExtensions")));
        this.addTest(canCreateGroupsCalendarCalendarViewExtensions("Can create canCreateGroupsCalendarCalendarViewExtensions", getTestStatus("canCreateGroupsCalendarCalendarViewExtensions")));
        this.addTest(canGetGroupsCalendarCalendarViewAttachments("Can get GroupsCalendarCalendarViewAttachments", getTestStatus("canGetGroupsCalendarCalendarViewAttachments")));
        this.addTest(canCreateGroupsCalendarCalendarViewAttachments("Can create canCreateGroupsCalendarCalendarViewAttachments", getTestStatus("canCreateGroupsCalendarCalendarViewAttachments")));
        this.addTest(canGetGroupsCalendarCalendarViewSingleValueExtendedProperties("Can get GroupsCalendarCalendarViewSingleValueExtendedProperties", getTestStatus("canGetGroupsCalendarCalendarViewSingleValueExtendedProperties")));
        this.addTest(canCreateGroupsCalendarCalendarViewSingleValueExtendedProperties("Can create canCreateGroupsCalendarCalendarViewSingleValueExtendedProperties", getTestStatus("canCreateGroupsCalendarCalendarViewSingleValueExtendedProperties")));
        this.addTest(canGetGroupsCalendarCalendarViewMultiValueExtendedProperties("Can get GroupsCalendarCalendarViewMultiValueExtendedProperties", getTestStatus("canGetGroupsCalendarCalendarViewMultiValueExtendedProperties")));
        this.addTest(canCreateGroupsCalendarCalendarViewMultiValueExtendedProperties("Can create canCreateGroupsCalendarCalendarViewMultiValueExtendedProperties", getTestStatus("canCreateGroupsCalendarCalendarViewMultiValueExtendedProperties")));
        this.addTest(canGetGroupsCalendarSingleValueExtendedProperties("Can get GroupsCalendarSingleValueExtendedProperties", getTestStatus("canGetGroupsCalendarSingleValueExtendedProperties")));
        this.addTest(canCreateGroupsCalendarSingleValueExtendedProperties("Can create canCreateGroupsCalendarSingleValueExtendedProperties", getTestStatus("canCreateGroupsCalendarSingleValueExtendedProperties")));
        this.addTest(canGetGroupsCalendarMultiValueExtendedProperties("Can get GroupsCalendarMultiValueExtendedProperties", getTestStatus("canGetGroupsCalendarMultiValueExtendedProperties")));
        this.addTest(canCreateGroupsCalendarMultiValueExtendedProperties("Can create canCreateGroupsCalendarMultiValueExtendedProperties", getTestStatus("canCreateGroupsCalendarMultiValueExtendedProperties")));
        this.addTest(canGetGroupsCalendarView("Can get GroupsCalendarView", getTestStatus("canGetGroupsCalendarView")));
        this.addTest(canCreateGroupsCalendarView("Can create canCreateGroupsCalendarView", getTestStatus("canCreateGroupsCalendarView")));
        this.addTest(canGetGroupsCalendarViewCalendar("Can get GroupsCalendarViewCalendar", getTestStatus("canGetGroupsCalendarViewCalendar")));
        this.addTest(canGetGroupsCalendarViewCalendarSingleValueExtendedProperties("Can get GroupsCalendarViewCalendarSingleValueExtendedProperties", getTestStatus("canGetGroupsCalendarViewCalendarSingleValueExtendedProperties")));
        this.addTest(canCreateGroupsCalendarViewCalendarSingleValueExtendedProperties("Can create canCreateGroupsCalendarViewCalendarSingleValueExtendedProperties", getTestStatus("canCreateGroupsCalendarViewCalendarSingleValueExtendedProperties")));
        this.addTest(canGetGroupsCalendarViewCalendarMultiValueExtendedProperties("Can get GroupsCalendarViewCalendarMultiValueExtendedProperties", getTestStatus("canGetGroupsCalendarViewCalendarMultiValueExtendedProperties")));
        this.addTest(canCreateGroupsCalendarViewCalendarMultiValueExtendedProperties("Can create canCreateGroupsCalendarViewCalendarMultiValueExtendedProperties", getTestStatus("canCreateGroupsCalendarViewCalendarMultiValueExtendedProperties")));
        this.addTest(canGetGroupsCalendarViewInstances("Can get GroupsCalendarViewInstances", getTestStatus("canGetGroupsCalendarViewInstances")));
        this.addTest(canCreateGroupsCalendarViewInstances("Can create canCreateGroupsCalendarViewInstances", getTestStatus("canCreateGroupsCalendarViewInstances")));
        this.addTest(canGetGroupsCalendarViewInstancesCalendar("Can get GroupsCalendarViewInstancesCalendar", getTestStatus("canGetGroupsCalendarViewInstancesCalendar")));
        this.addTest(canGetGroupsCalendarViewInstancesCalendarSingleValueExtendedProperties("Can get GroupsCalendarViewInstancesCalendarSingleValueExtendedProperties", getTestStatus("canGetGroupsCalendarViewInstancesCalendarSingleValueExtendedProperties")));
        this.addTest(canCreateGroupsCalendarViewInstancesCalendarSingleValueExtendedProperties("Can create canCreateGroupsCalendarViewInstancesCalendarSingleValueExtendedProperties", getTestStatus("canCreateGroupsCalendarViewInstancesCalendarSingleValueExtendedProperties")));
        this.addTest(canGetGroupsCalendarViewInstancesCalendarMultiValueExtendedProperties("Can get GroupsCalendarViewInstancesCalendarMultiValueExtendedProperties", getTestStatus("canGetGroupsCalendarViewInstancesCalendarMultiValueExtendedProperties")));
        this.addTest(canCreateGroupsCalendarViewInstancesCalendarMultiValueExtendedProperties("Can create canCreateGroupsCalendarViewInstancesCalendarMultiValueExtendedProperties", getTestStatus("canCreateGroupsCalendarViewInstancesCalendarMultiValueExtendedProperties")));
        this.addTest(canGetGroupsCalendarViewInstancesExtensions("Can get GroupsCalendarViewInstancesExtensions", getTestStatus("canGetGroupsCalendarViewInstancesExtensions")));
        this.addTest(canCreateGroupsCalendarViewInstancesExtensions("Can create canCreateGroupsCalendarViewInstancesExtensions", getTestStatus("canCreateGroupsCalendarViewInstancesExtensions")));
        this.addTest(canGetGroupsCalendarViewInstancesAttachments("Can get GroupsCalendarViewInstancesAttachments", getTestStatus("canGetGroupsCalendarViewInstancesAttachments")));
        this.addTest(canCreateGroupsCalendarViewInstancesAttachments("Can create canCreateGroupsCalendarViewInstancesAttachments", getTestStatus("canCreateGroupsCalendarViewInstancesAttachments")));
        this.addTest(canGetGroupsCalendarViewInstancesSingleValueExtendedProperties("Can get GroupsCalendarViewInstancesSingleValueExtendedProperties", getTestStatus("canGetGroupsCalendarViewInstancesSingleValueExtendedProperties")));
        this.addTest(canCreateGroupsCalendarViewInstancesSingleValueExtendedProperties("Can create canCreateGroupsCalendarViewInstancesSingleValueExtendedProperties", getTestStatus("canCreateGroupsCalendarViewInstancesSingleValueExtendedProperties")));
        this.addTest(canGetGroupsCalendarViewInstancesMultiValueExtendedProperties("Can get GroupsCalendarViewInstancesMultiValueExtendedProperties", getTestStatus("canGetGroupsCalendarViewInstancesMultiValueExtendedProperties")));
        this.addTest(canCreateGroupsCalendarViewInstancesMultiValueExtendedProperties("Can create canCreateGroupsCalendarViewInstancesMultiValueExtendedProperties", getTestStatus("canCreateGroupsCalendarViewInstancesMultiValueExtendedProperties")));
        this.addTest(canGetGroupsCalendarViewExtensions("Can get GroupsCalendarViewExtensions", getTestStatus("canGetGroupsCalendarViewExtensions")));
        this.addTest(canCreateGroupsCalendarViewExtensions("Can create canCreateGroupsCalendarViewExtensions", getTestStatus("canCreateGroupsCalendarViewExtensions")));
        this.addTest(canGetGroupsCalendarViewAttachments("Can get GroupsCalendarViewAttachments", getTestStatus("canGetGroupsCalendarViewAttachments")));
        this.addTest(canCreateGroupsCalendarViewAttachments("Can create canCreateGroupsCalendarViewAttachments", getTestStatus("canCreateGroupsCalendarViewAttachments")));
        this.addTest(canGetGroupsCalendarViewSingleValueExtendedProperties("Can get GroupsCalendarViewSingleValueExtendedProperties", getTestStatus("canGetGroupsCalendarViewSingleValueExtendedProperties")));
        this.addTest(canCreateGroupsCalendarViewSingleValueExtendedProperties("Can create canCreateGroupsCalendarViewSingleValueExtendedProperties", getTestStatus("canCreateGroupsCalendarViewSingleValueExtendedProperties")));
        this.addTest(canGetGroupsCalendarViewMultiValueExtendedProperties("Can get GroupsCalendarViewMultiValueExtendedProperties", getTestStatus("canGetGroupsCalendarViewMultiValueExtendedProperties")));
        this.addTest(canCreateGroupsCalendarViewMultiValueExtendedProperties("Can create canCreateGroupsCalendarViewMultiValueExtendedProperties", getTestStatus("canCreateGroupsCalendarViewMultiValueExtendedProperties")));
        this.addTest(canGetGroupsEvents("Can get GroupsEvents", getTestStatus("canGetGroupsEvents")));
        this.addTest(canCreateGroupsEvents("Can create canCreateGroupsEvents", getTestStatus("canCreateGroupsEvents")));
        this.addTest(canGetGroupsEventsCalendar("Can get GroupsEventsCalendar", getTestStatus("canGetGroupsEventsCalendar")));
        this.addTest(canGetGroupsEventsCalendarSingleValueExtendedProperties("Can get GroupsEventsCalendarSingleValueExtendedProperties", getTestStatus("canGetGroupsEventsCalendarSingleValueExtendedProperties")));
        this.addTest(canCreateGroupsEventsCalendarSingleValueExtendedProperties("Can create canCreateGroupsEventsCalendarSingleValueExtendedProperties", getTestStatus("canCreateGroupsEventsCalendarSingleValueExtendedProperties")));
        this.addTest(canGetGroupsEventsCalendarMultiValueExtendedProperties("Can get GroupsEventsCalendarMultiValueExtendedProperties", getTestStatus("canGetGroupsEventsCalendarMultiValueExtendedProperties")));
        this.addTest(canCreateGroupsEventsCalendarMultiValueExtendedProperties("Can create canCreateGroupsEventsCalendarMultiValueExtendedProperties", getTestStatus("canCreateGroupsEventsCalendarMultiValueExtendedProperties")));
        this.addTest(canGetGroupsEventsInstances("Can get GroupsEventsInstances", getTestStatus("canGetGroupsEventsInstances")));
        this.addTest(canCreateGroupsEventsInstances("Can create canCreateGroupsEventsInstances", getTestStatus("canCreateGroupsEventsInstances")));
        this.addTest(canGetGroupsEventsInstancesCalendar("Can get GroupsEventsInstancesCalendar", getTestStatus("canGetGroupsEventsInstancesCalendar")));
        this.addTest(canGetGroupsEventsInstancesCalendarSingleValueExtendedProperties("Can get GroupsEventsInstancesCalendarSingleValueExtendedProperties", getTestStatus("canGetGroupsEventsInstancesCalendarSingleValueExtendedProperties")));
        this.addTest(canCreateGroupsEventsInstancesCalendarSingleValueExtendedProperties("Can create canCreateGroupsEventsInstancesCalendarSingleValueExtendedProperties", getTestStatus("canCreateGroupsEventsInstancesCalendarSingleValueExtendedProperties")));
        this.addTest(canGetGroupsEventsInstancesCalendarMultiValueExtendedProperties("Can get GroupsEventsInstancesCalendarMultiValueExtendedProperties", getTestStatus("canGetGroupsEventsInstancesCalendarMultiValueExtendedProperties")));
        this.addTest(canCreateGroupsEventsInstancesCalendarMultiValueExtendedProperties("Can create canCreateGroupsEventsInstancesCalendarMultiValueExtendedProperties", getTestStatus("canCreateGroupsEventsInstancesCalendarMultiValueExtendedProperties")));
        this.addTest(canGetGroupsEventsInstancesExtensions("Can get GroupsEventsInstancesExtensions", getTestStatus("canGetGroupsEventsInstancesExtensions")));
        this.addTest(canCreateGroupsEventsInstancesExtensions("Can create canCreateGroupsEventsInstancesExtensions", getTestStatus("canCreateGroupsEventsInstancesExtensions")));
        this.addTest(canGetGroupsEventsInstancesAttachments("Can get GroupsEventsInstancesAttachments", getTestStatus("canGetGroupsEventsInstancesAttachments")));
        this.addTest(canCreateGroupsEventsInstancesAttachments("Can create canCreateGroupsEventsInstancesAttachments", getTestStatus("canCreateGroupsEventsInstancesAttachments")));
        this.addTest(canGetGroupsEventsInstancesSingleValueExtendedProperties("Can get GroupsEventsInstancesSingleValueExtendedProperties", getTestStatus("canGetGroupsEventsInstancesSingleValueExtendedProperties")));
        this.addTest(canCreateGroupsEventsInstancesSingleValueExtendedProperties("Can create canCreateGroupsEventsInstancesSingleValueExtendedProperties", getTestStatus("canCreateGroupsEventsInstancesSingleValueExtendedProperties")));
        this.addTest(canGetGroupsEventsInstancesMultiValueExtendedProperties("Can get GroupsEventsInstancesMultiValueExtendedProperties", getTestStatus("canGetGroupsEventsInstancesMultiValueExtendedProperties")));
        this.addTest(canCreateGroupsEventsInstancesMultiValueExtendedProperties("Can create canCreateGroupsEventsInstancesMultiValueExtendedProperties", getTestStatus("canCreateGroupsEventsInstancesMultiValueExtendedProperties")));
        this.addTest(canGetGroupsEventsExtensions("Can get GroupsEventsExtensions", getTestStatus("canGetGroupsEventsExtensions")));
        this.addTest(canCreateGroupsEventsExtensions("Can create canCreateGroupsEventsExtensions", getTestStatus("canCreateGroupsEventsExtensions")));
        this.addTest(canGetGroupsEventsAttachments("Can get GroupsEventsAttachments", getTestStatus("canGetGroupsEventsAttachments")));
        this.addTest(canCreateGroupsEventsAttachments("Can create canCreateGroupsEventsAttachments", getTestStatus("canCreateGroupsEventsAttachments")));
        this.addTest(canGetGroupsEventsSingleValueExtendedProperties("Can get GroupsEventsSingleValueExtendedProperties", getTestStatus("canGetGroupsEventsSingleValueExtendedProperties")));
        this.addTest(canCreateGroupsEventsSingleValueExtendedProperties("Can create canCreateGroupsEventsSingleValueExtendedProperties", getTestStatus("canCreateGroupsEventsSingleValueExtendedProperties")));
        this.addTest(canGetGroupsEventsMultiValueExtendedProperties("Can get GroupsEventsMultiValueExtendedProperties", getTestStatus("canGetGroupsEventsMultiValueExtendedProperties")));
        this.addTest(canCreateGroupsEventsMultiValueExtendedProperties("Can create canCreateGroupsEventsMultiValueExtendedProperties", getTestStatus("canCreateGroupsEventsMultiValueExtendedProperties")));
        this.addTest(canGetGroupsConversations("Can get GroupsConversations", getTestStatus("canGetGroupsConversations")));
        this.addTest(canCreateGroupsConversations("Can create canCreateGroupsConversations", getTestStatus("canCreateGroupsConversations")));
        this.addTest(canGetGroupsConversationsThreads("Can get GroupsConversationsThreads", getTestStatus("canGetGroupsConversationsThreads")));
        this.addTest(canCreateGroupsConversationsThreads("Can create canCreateGroupsConversationsThreads", getTestStatus("canCreateGroupsConversationsThreads")));
        this.addTest(canGetGroupsConversationsThreadsPosts("Can get GroupsConversationsThreadsPosts", getTestStatus("canGetGroupsConversationsThreadsPosts")));
        this.addTest(canCreateGroupsConversationsThreadsPosts("Can create canCreateGroupsConversationsThreadsPosts", getTestStatus("canCreateGroupsConversationsThreadsPosts")));
        this.addTest(canGetGroupsConversationsThreadsPostsExtensions("Can get GroupsConversationsThreadsPostsExtensions", getTestStatus("canGetGroupsConversationsThreadsPostsExtensions")));
        this.addTest(canCreateGroupsConversationsThreadsPostsExtensions("Can create canCreateGroupsConversationsThreadsPostsExtensions", getTestStatus("canCreateGroupsConversationsThreadsPostsExtensions")));
        this.addTest(canGetGroupsConversationsThreadsPostsInReplyTo("Can get GroupsConversationsThreadsPostsInReplyTo", getTestStatus("canGetGroupsConversationsThreadsPostsInReplyTo")));
        this.addTest(canGetGroupsConversationsThreadsPostsInReplyToExtensions("Can get GroupsConversationsThreadsPostsInReplyToExtensions", getTestStatus("canGetGroupsConversationsThreadsPostsInReplyToExtensions")));
        this.addTest(canCreateGroupsConversationsThreadsPostsInReplyToExtensions("Can create canCreateGroupsConversationsThreadsPostsInReplyToExtensions", getTestStatus("canCreateGroupsConversationsThreadsPostsInReplyToExtensions")));
        this.addTest(canGetGroupsConversationsThreadsPostsInReplyToAttachments("Can get GroupsConversationsThreadsPostsInReplyToAttachments", getTestStatus("canGetGroupsConversationsThreadsPostsInReplyToAttachments")));
        this.addTest(canCreateGroupsConversationsThreadsPostsInReplyToAttachments("Can create canCreateGroupsConversationsThreadsPostsInReplyToAttachments", getTestStatus("canCreateGroupsConversationsThreadsPostsInReplyToAttachments")));
        this.addTest(canGetGroupsConversationsThreadsPostsInReplyToSingleValueExtendedProperties("Can get GroupsConversationsThreadsPostsInReplyToSingleValueExtendedProperties", getTestStatus("canGetGroupsConversationsThreadsPostsInReplyToSingleValueExtendedProperties")));
        this.addTest(canCreateGroupsConversationsThreadsPostsInReplyToSingleValueExtendedProperties("Can create canCreateGroupsConversationsThreadsPostsInReplyToSingleValueExtendedProperties", getTestStatus("canCreateGroupsConversationsThreadsPostsInReplyToSingleValueExtendedProperties")));
        this.addTest(canGetGroupsConversationsThreadsPostsInReplyToMultiValueExtendedProperties("Can get GroupsConversationsThreadsPostsInReplyToMultiValueExtendedProperties", getTestStatus("canGetGroupsConversationsThreadsPostsInReplyToMultiValueExtendedProperties")));
        this.addTest(canCreateGroupsConversationsThreadsPostsInReplyToMultiValueExtendedProperties("Can create canCreateGroupsConversationsThreadsPostsInReplyToMultiValueExtendedProperties", getTestStatus("canCreateGroupsConversationsThreadsPostsInReplyToMultiValueExtendedProperties")));
        this.addTest(canGetGroupsConversationsThreadsPostsAttachments("Can get GroupsConversationsThreadsPostsAttachments", getTestStatus("canGetGroupsConversationsThreadsPostsAttachments")));
        this.addTest(canCreateGroupsConversationsThreadsPostsAttachments("Can create canCreateGroupsConversationsThreadsPostsAttachments", getTestStatus("canCreateGroupsConversationsThreadsPostsAttachments")));
        this.addTest(canGetGroupsConversationsThreadsPostsSingleValueExtendedProperties("Can get GroupsConversationsThreadsPostsSingleValueExtendedProperties", getTestStatus("canGetGroupsConversationsThreadsPostsSingleValueExtendedProperties")));
        this.addTest(canCreateGroupsConversationsThreadsPostsSingleValueExtendedProperties("Can create canCreateGroupsConversationsThreadsPostsSingleValueExtendedProperties", getTestStatus("canCreateGroupsConversationsThreadsPostsSingleValueExtendedProperties")));
        this.addTest(canGetGroupsConversationsThreadsPostsMultiValueExtendedProperties("Can get GroupsConversationsThreadsPostsMultiValueExtendedProperties", getTestStatus("canGetGroupsConversationsThreadsPostsMultiValueExtendedProperties")));
        this.addTest(canCreateGroupsConversationsThreadsPostsMultiValueExtendedProperties("Can create canCreateGroupsConversationsThreadsPostsMultiValueExtendedProperties", getTestStatus("canCreateGroupsConversationsThreadsPostsMultiValueExtendedProperties")));
        this.addTest(canGetGroupsSubscriptions("Can get GroupsSubscriptions", getTestStatus("canGetGroupsSubscriptions")));
        this.addTest(canCreateGroupsSubscriptions("Can create canCreateGroupsSubscriptions", getTestStatus("canCreateGroupsSubscriptions")));
        this.addTest(canGetGroupsPhoto("Can get GroupsPhoto", getTestStatus("canGetGroupsPhoto")));
        this.addTest(canGetGroupsPhotos("Can get GroupsPhotos", getTestStatus("canGetGroupsPhotos")));
        this.addTest(canCreateGroupsPhotos("Can create canCreateGroupsPhotos", getTestStatus("canCreateGroupsPhotos")));
        this.addTest(canGetGroupsAcceptedSenders("Can get GroupsAcceptedSenders", getTestStatus("canGetGroupsAcceptedSenders")));
        this.addTest(canCreateGroupsAcceptedSenders("Can create canCreateGroupsAcceptedSenders", getTestStatus("canCreateGroupsAcceptedSenders")));
        this.addTest(canGetGroupsRejectedSenders("Can get GroupsRejectedSenders", getTestStatus("canGetGroupsRejectedSenders")));
        this.addTest(canCreateGroupsRejectedSenders("Can create canCreateGroupsRejectedSenders", getTestStatus("canCreateGroupsRejectedSenders")));
        this.addTest(canGetMe("Can get Me", getTestStatus("canGetMe")));
        this.addTest(canGetMeSubscriptions("Can get MeSubscriptions", getTestStatus("canGetMeSubscriptions")));
        this.addTest(canCreateMeSubscriptions("Can create canCreateMeSubscriptions", getTestStatus("canCreateMeSubscriptions")));
        this.addTest(canGetMeMessages("Can get MeMessages", getTestStatus("canGetMeMessages")));
        this.addTest(canCreateMeMessages("Can create canCreateMeMessages", getTestStatus("canCreateMeMessages")));
        this.addTest(canGetMeMessagesExtensions("Can get MeMessagesExtensions", getTestStatus("canGetMeMessagesExtensions")));
        this.addTest(canCreateMeMessagesExtensions("Can create canCreateMeMessagesExtensions", getTestStatus("canCreateMeMessagesExtensions")));
        this.addTest(canGetMeMessagesAttachments("Can get MeMessagesAttachments", getTestStatus("canGetMeMessagesAttachments")));
        this.addTest(canCreateMeMessagesAttachments("Can create canCreateMeMessagesAttachments", getTestStatus("canCreateMeMessagesAttachments")));
        this.addTest(canGetMeMessagesSingleValueExtendedProperties("Can get MeMessagesSingleValueExtendedProperties", getTestStatus("canGetMeMessagesSingleValueExtendedProperties")));
        this.addTest(canCreateMeMessagesSingleValueExtendedProperties("Can create canCreateMeMessagesSingleValueExtendedProperties", getTestStatus("canCreateMeMessagesSingleValueExtendedProperties")));
        this.addTest(canGetMeMessagesMultiValueExtendedProperties("Can get MeMessagesMultiValueExtendedProperties", getTestStatus("canGetMeMessagesMultiValueExtendedProperties")));
        this.addTest(canCreateMeMessagesMultiValueExtendedProperties("Can create canCreateMeMessagesMultiValueExtendedProperties", getTestStatus("canCreateMeMessagesMultiValueExtendedProperties")));
        this.addTest(canGetMeJoinedGroups("Can get MeJoinedGroups", getTestStatus("canGetMeJoinedGroups")));
        this.addTest(canCreateMeJoinedGroups("Can create canCreateMeJoinedGroups", getTestStatus("canCreateMeJoinedGroups")));
        this.addTest(canGetMeJoinedGroupsThreads("Can get MeJoinedGroupsThreads", getTestStatus("canGetMeJoinedGroupsThreads")));
        this.addTest(canCreateMeJoinedGroupsThreads("Can create canCreateMeJoinedGroupsThreads", getTestStatus("canCreateMeJoinedGroupsThreads")));
        this.addTest(canGetMeJoinedGroupsThreadsPosts("Can get MeJoinedGroupsThreadsPosts", getTestStatus("canGetMeJoinedGroupsThreadsPosts")));
        this.addTest(canCreateMeJoinedGroupsThreadsPosts("Can create canCreateMeJoinedGroupsThreadsPosts", getTestStatus("canCreateMeJoinedGroupsThreadsPosts")));
        this.addTest(canGetMeJoinedGroupsThreadsPostsExtensions("Can get MeJoinedGroupsThreadsPostsExtensions", getTestStatus("canGetMeJoinedGroupsThreadsPostsExtensions")));
        this.addTest(canCreateMeJoinedGroupsThreadsPostsExtensions("Can create canCreateMeJoinedGroupsThreadsPostsExtensions", getTestStatus("canCreateMeJoinedGroupsThreadsPostsExtensions")));
        this.addTest(canGetMeJoinedGroupsThreadsPostsInReplyTo("Can get MeJoinedGroupsThreadsPostsInReplyTo", getTestStatus("canGetMeJoinedGroupsThreadsPostsInReplyTo")));
        this.addTest(canGetMeJoinedGroupsThreadsPostsInReplyToExtensions("Can get MeJoinedGroupsThreadsPostsInReplyToExtensions", getTestStatus("canGetMeJoinedGroupsThreadsPostsInReplyToExtensions")));
        this.addTest(canCreateMeJoinedGroupsThreadsPostsInReplyToExtensions("Can create canCreateMeJoinedGroupsThreadsPostsInReplyToExtensions", getTestStatus("canCreateMeJoinedGroupsThreadsPostsInReplyToExtensions")));
        this.addTest(canGetMeJoinedGroupsThreadsPostsInReplyToAttachments("Can get MeJoinedGroupsThreadsPostsInReplyToAttachments", getTestStatus("canGetMeJoinedGroupsThreadsPostsInReplyToAttachments")));
        this.addTest(canCreateMeJoinedGroupsThreadsPostsInReplyToAttachments("Can create canCreateMeJoinedGroupsThreadsPostsInReplyToAttachments", getTestStatus("canCreateMeJoinedGroupsThreadsPostsInReplyToAttachments")));
        this.addTest(canGetMeJoinedGroupsThreadsPostsInReplyToSingleValueExtendedProperties("Can get MeJoinedGroupsThreadsPostsInReplyToSingleValueExtendedProperties", getTestStatus("canGetMeJoinedGroupsThreadsPostsInReplyToSingleValueExtendedProperties")));
        this.addTest(canCreateMeJoinedGroupsThreadsPostsInReplyToSingleValueExtendedProperties("Can create canCreateMeJoinedGroupsThreadsPostsInReplyToSingleValueExtendedProperties", getTestStatus("canCreateMeJoinedGroupsThreadsPostsInReplyToSingleValueExtendedProperties")));
        this.addTest(canGetMeJoinedGroupsThreadsPostsInReplyToMultiValueExtendedProperties("Can get MeJoinedGroupsThreadsPostsInReplyToMultiValueExtendedProperties", getTestStatus("canGetMeJoinedGroupsThreadsPostsInReplyToMultiValueExtendedProperties")));
        this.addTest(canCreateMeJoinedGroupsThreadsPostsInReplyToMultiValueExtendedProperties("Can create canCreateMeJoinedGroupsThreadsPostsInReplyToMultiValueExtendedProperties", getTestStatus("canCreateMeJoinedGroupsThreadsPostsInReplyToMultiValueExtendedProperties")));
        this.addTest(canGetMeJoinedGroupsThreadsPostsAttachments("Can get MeJoinedGroupsThreadsPostsAttachments", getTestStatus("canGetMeJoinedGroupsThreadsPostsAttachments")));
        this.addTest(canCreateMeJoinedGroupsThreadsPostsAttachments("Can create canCreateMeJoinedGroupsThreadsPostsAttachments", getTestStatus("canCreateMeJoinedGroupsThreadsPostsAttachments")));
        this.addTest(canGetMeJoinedGroupsThreadsPostsSingleValueExtendedProperties("Can get MeJoinedGroupsThreadsPostsSingleValueExtendedProperties", getTestStatus("canGetMeJoinedGroupsThreadsPostsSingleValueExtendedProperties")));
        this.addTest(canCreateMeJoinedGroupsThreadsPostsSingleValueExtendedProperties("Can create canCreateMeJoinedGroupsThreadsPostsSingleValueExtendedProperties", getTestStatus("canCreateMeJoinedGroupsThreadsPostsSingleValueExtendedProperties")));
        this.addTest(canGetMeJoinedGroupsThreadsPostsMultiValueExtendedProperties("Can get MeJoinedGroupsThreadsPostsMultiValueExtendedProperties", getTestStatus("canGetMeJoinedGroupsThreadsPostsMultiValueExtendedProperties")));
        this.addTest(canCreateMeJoinedGroupsThreadsPostsMultiValueExtendedProperties("Can create canCreateMeJoinedGroupsThreadsPostsMultiValueExtendedProperties", getTestStatus("canCreateMeJoinedGroupsThreadsPostsMultiValueExtendedProperties")));
        this.addTest(canGetMeJoinedGroupsCalendar("Can get MeJoinedGroupsCalendar", getTestStatus("canGetMeJoinedGroupsCalendar")));
        this.addTest(canGetMeJoinedGroupsCalendarEvents("Can get MeJoinedGroupsCalendarEvents", getTestStatus("canGetMeJoinedGroupsCalendarEvents")));
        this.addTest(canCreateMeJoinedGroupsCalendarEvents("Can create canCreateMeJoinedGroupsCalendarEvents", getTestStatus("canCreateMeJoinedGroupsCalendarEvents")));
        this.addTest(canGetMeJoinedGroupsCalendarEventsInstances("Can get MeJoinedGroupsCalendarEventsInstances", getTestStatus("canGetMeJoinedGroupsCalendarEventsInstances")));
        this.addTest(canCreateMeJoinedGroupsCalendarEventsInstances("Can create canCreateMeJoinedGroupsCalendarEventsInstances", getTestStatus("canCreateMeJoinedGroupsCalendarEventsInstances")));
        this.addTest(canGetMeJoinedGroupsCalendarEventsInstancesExtensions("Can get MeJoinedGroupsCalendarEventsInstancesExtensions", getTestStatus("canGetMeJoinedGroupsCalendarEventsInstancesExtensions")));
        this.addTest(canCreateMeJoinedGroupsCalendarEventsInstancesExtensions("Can create canCreateMeJoinedGroupsCalendarEventsInstancesExtensions", getTestStatus("canCreateMeJoinedGroupsCalendarEventsInstancesExtensions")));
        this.addTest(canGetMeJoinedGroupsCalendarEventsInstancesAttachments("Can get MeJoinedGroupsCalendarEventsInstancesAttachments", getTestStatus("canGetMeJoinedGroupsCalendarEventsInstancesAttachments")));
        this.addTest(canCreateMeJoinedGroupsCalendarEventsInstancesAttachments("Can create canCreateMeJoinedGroupsCalendarEventsInstancesAttachments", getTestStatus("canCreateMeJoinedGroupsCalendarEventsInstancesAttachments")));
        this.addTest(canGetMeJoinedGroupsCalendarEventsInstancesSingleValueExtendedProperties("Can get MeJoinedGroupsCalendarEventsInstancesSingleValueExtendedProperties", getTestStatus("canGetMeJoinedGroupsCalendarEventsInstancesSingleValueExtendedProperties")));
        this.addTest(canCreateMeJoinedGroupsCalendarEventsInstancesSingleValueExtendedProperties("Can create canCreateMeJoinedGroupsCalendarEventsInstancesSingleValueExtendedProperties", getTestStatus("canCreateMeJoinedGroupsCalendarEventsInstancesSingleValueExtendedProperties")));
        this.addTest(canGetMeJoinedGroupsCalendarEventsInstancesMultiValueExtendedProperties("Can get MeJoinedGroupsCalendarEventsInstancesMultiValueExtendedProperties", getTestStatus("canGetMeJoinedGroupsCalendarEventsInstancesMultiValueExtendedProperties")));
        this.addTest(canCreateMeJoinedGroupsCalendarEventsInstancesMultiValueExtendedProperties("Can create canCreateMeJoinedGroupsCalendarEventsInstancesMultiValueExtendedProperties", getTestStatus("canCreateMeJoinedGroupsCalendarEventsInstancesMultiValueExtendedProperties")));
        this.addTest(canGetMeJoinedGroupsCalendarEventsExtensions("Can get MeJoinedGroupsCalendarEventsExtensions", getTestStatus("canGetMeJoinedGroupsCalendarEventsExtensions")));
        this.addTest(canCreateMeJoinedGroupsCalendarEventsExtensions("Can create canCreateMeJoinedGroupsCalendarEventsExtensions", getTestStatus("canCreateMeJoinedGroupsCalendarEventsExtensions")));
        this.addTest(canGetMeJoinedGroupsCalendarEventsAttachments("Can get MeJoinedGroupsCalendarEventsAttachments", getTestStatus("canGetMeJoinedGroupsCalendarEventsAttachments")));
        this.addTest(canCreateMeJoinedGroupsCalendarEventsAttachments("Can create canCreateMeJoinedGroupsCalendarEventsAttachments", getTestStatus("canCreateMeJoinedGroupsCalendarEventsAttachments")));
        this.addTest(canGetMeJoinedGroupsCalendarEventsSingleValueExtendedProperties("Can get MeJoinedGroupsCalendarEventsSingleValueExtendedProperties", getTestStatus("canGetMeJoinedGroupsCalendarEventsSingleValueExtendedProperties")));
        this.addTest(canCreateMeJoinedGroupsCalendarEventsSingleValueExtendedProperties("Can create canCreateMeJoinedGroupsCalendarEventsSingleValueExtendedProperties", getTestStatus("canCreateMeJoinedGroupsCalendarEventsSingleValueExtendedProperties")));
        this.addTest(canGetMeJoinedGroupsCalendarEventsMultiValueExtendedProperties("Can get MeJoinedGroupsCalendarEventsMultiValueExtendedProperties", getTestStatus("canGetMeJoinedGroupsCalendarEventsMultiValueExtendedProperties")));
        this.addTest(canCreateMeJoinedGroupsCalendarEventsMultiValueExtendedProperties("Can create canCreateMeJoinedGroupsCalendarEventsMultiValueExtendedProperties", getTestStatus("canCreateMeJoinedGroupsCalendarEventsMultiValueExtendedProperties")));
        this.addTest(canGetMeJoinedGroupsCalendarCalendarView("Can get MeJoinedGroupsCalendarCalendarView", getTestStatus("canGetMeJoinedGroupsCalendarCalendarView")));
        this.addTest(canCreateMeJoinedGroupsCalendarCalendarView("Can create canCreateMeJoinedGroupsCalendarCalendarView", getTestStatus("canCreateMeJoinedGroupsCalendarCalendarView")));
        this.addTest(canGetMeJoinedGroupsCalendarCalendarViewInstances("Can get MeJoinedGroupsCalendarCalendarViewInstances", getTestStatus("canGetMeJoinedGroupsCalendarCalendarViewInstances")));
        this.addTest(canCreateMeJoinedGroupsCalendarCalendarViewInstances("Can create canCreateMeJoinedGroupsCalendarCalendarViewInstances", getTestStatus("canCreateMeJoinedGroupsCalendarCalendarViewInstances")));
        this.addTest(canGetMeJoinedGroupsCalendarCalendarViewInstancesExtensions("Can get MeJoinedGroupsCalendarCalendarViewInstancesExtensions", getTestStatus("canGetMeJoinedGroupsCalendarCalendarViewInstancesExtensions")));
        this.addTest(canCreateMeJoinedGroupsCalendarCalendarViewInstancesExtensions("Can create canCreateMeJoinedGroupsCalendarCalendarViewInstancesExtensions", getTestStatus("canCreateMeJoinedGroupsCalendarCalendarViewInstancesExtensions")));
        this.addTest(canGetMeJoinedGroupsCalendarCalendarViewInstancesAttachments("Can get MeJoinedGroupsCalendarCalendarViewInstancesAttachments", getTestStatus("canGetMeJoinedGroupsCalendarCalendarViewInstancesAttachments")));
        this.addTest(canCreateMeJoinedGroupsCalendarCalendarViewInstancesAttachments("Can create canCreateMeJoinedGroupsCalendarCalendarViewInstancesAttachments", getTestStatus("canCreateMeJoinedGroupsCalendarCalendarViewInstancesAttachments")));
        this.addTest(canGetMeJoinedGroupsCalendarCalendarViewInstancesSingleValueExtendedProperties("Can get MeJoinedGroupsCalendarCalendarViewInstancesSingleValueExtendedProperties", getTestStatus("canGetMeJoinedGroupsCalendarCalendarViewInstancesSingleValueExtendedProperties")));
        this.addTest(canCreateMeJoinedGroupsCalendarCalendarViewInstancesSingleValueExtendedProperties("Can create canCreateMeJoinedGroupsCalendarCalendarViewInstancesSingleValueExtendedProperties", getTestStatus("canCreateMeJoinedGroupsCalendarCalendarViewInstancesSingleValueExtendedProperties")));
        this.addTest(canGetMeJoinedGroupsCalendarCalendarViewInstancesMultiValueExtendedProperties("Can get MeJoinedGroupsCalendarCalendarViewInstancesMultiValueExtendedProperties", getTestStatus("canGetMeJoinedGroupsCalendarCalendarViewInstancesMultiValueExtendedProperties")));
        this.addTest(canCreateMeJoinedGroupsCalendarCalendarViewInstancesMultiValueExtendedProperties("Can create canCreateMeJoinedGroupsCalendarCalendarViewInstancesMultiValueExtendedProperties", getTestStatus("canCreateMeJoinedGroupsCalendarCalendarViewInstancesMultiValueExtendedProperties")));
        this.addTest(canGetMeJoinedGroupsCalendarCalendarViewExtensions("Can get MeJoinedGroupsCalendarCalendarViewExtensions", getTestStatus("canGetMeJoinedGroupsCalendarCalendarViewExtensions")));
        this.addTest(canCreateMeJoinedGroupsCalendarCalendarViewExtensions("Can create canCreateMeJoinedGroupsCalendarCalendarViewExtensions", getTestStatus("canCreateMeJoinedGroupsCalendarCalendarViewExtensions")));
        this.addTest(canGetMeJoinedGroupsCalendarCalendarViewAttachments("Can get MeJoinedGroupsCalendarCalendarViewAttachments", getTestStatus("canGetMeJoinedGroupsCalendarCalendarViewAttachments")));
        this.addTest(canCreateMeJoinedGroupsCalendarCalendarViewAttachments("Can create canCreateMeJoinedGroupsCalendarCalendarViewAttachments", getTestStatus("canCreateMeJoinedGroupsCalendarCalendarViewAttachments")));
        this.addTest(canGetMeJoinedGroupsCalendarCalendarViewSingleValueExtendedProperties("Can get MeJoinedGroupsCalendarCalendarViewSingleValueExtendedProperties", getTestStatus("canGetMeJoinedGroupsCalendarCalendarViewSingleValueExtendedProperties")));
        this.addTest(canCreateMeJoinedGroupsCalendarCalendarViewSingleValueExtendedProperties("Can create canCreateMeJoinedGroupsCalendarCalendarViewSingleValueExtendedProperties", getTestStatus("canCreateMeJoinedGroupsCalendarCalendarViewSingleValueExtendedProperties")));
        this.addTest(canGetMeJoinedGroupsCalendarCalendarViewMultiValueExtendedProperties("Can get MeJoinedGroupsCalendarCalendarViewMultiValueExtendedProperties", getTestStatus("canGetMeJoinedGroupsCalendarCalendarViewMultiValueExtendedProperties")));
        this.addTest(canCreateMeJoinedGroupsCalendarCalendarViewMultiValueExtendedProperties("Can create canCreateMeJoinedGroupsCalendarCalendarViewMultiValueExtendedProperties", getTestStatus("canCreateMeJoinedGroupsCalendarCalendarViewMultiValueExtendedProperties")));
        this.addTest(canGetMeJoinedGroupsCalendarSingleValueExtendedProperties("Can get MeJoinedGroupsCalendarSingleValueExtendedProperties", getTestStatus("canGetMeJoinedGroupsCalendarSingleValueExtendedProperties")));
        this.addTest(canCreateMeJoinedGroupsCalendarSingleValueExtendedProperties("Can create canCreateMeJoinedGroupsCalendarSingleValueExtendedProperties", getTestStatus("canCreateMeJoinedGroupsCalendarSingleValueExtendedProperties")));
        this.addTest(canGetMeJoinedGroupsCalendarMultiValueExtendedProperties("Can get MeJoinedGroupsCalendarMultiValueExtendedProperties", getTestStatus("canGetMeJoinedGroupsCalendarMultiValueExtendedProperties")));
        this.addTest(canCreateMeJoinedGroupsCalendarMultiValueExtendedProperties("Can create canCreateMeJoinedGroupsCalendarMultiValueExtendedProperties", getTestStatus("canCreateMeJoinedGroupsCalendarMultiValueExtendedProperties")));
        this.addTest(canGetMeJoinedGroupsCalendarView("Can get MeJoinedGroupsCalendarView", getTestStatus("canGetMeJoinedGroupsCalendarView")));
        this.addTest(canCreateMeJoinedGroupsCalendarView("Can create canCreateMeJoinedGroupsCalendarView", getTestStatus("canCreateMeJoinedGroupsCalendarView")));
        this.addTest(canGetMeJoinedGroupsCalendarViewCalendar("Can get MeJoinedGroupsCalendarViewCalendar", getTestStatus("canGetMeJoinedGroupsCalendarViewCalendar")));
        this.addTest(canGetMeJoinedGroupsCalendarViewCalendarSingleValueExtendedProperties("Can get MeJoinedGroupsCalendarViewCalendarSingleValueExtendedProperties", getTestStatus("canGetMeJoinedGroupsCalendarViewCalendarSingleValueExtendedProperties")));
        this.addTest(canCreateMeJoinedGroupsCalendarViewCalendarSingleValueExtendedProperties("Can create canCreateMeJoinedGroupsCalendarViewCalendarSingleValueExtendedProperties", getTestStatus("canCreateMeJoinedGroupsCalendarViewCalendarSingleValueExtendedProperties")));
        this.addTest(canGetMeJoinedGroupsCalendarViewCalendarMultiValueExtendedProperties("Can get MeJoinedGroupsCalendarViewCalendarMultiValueExtendedProperties", getTestStatus("canGetMeJoinedGroupsCalendarViewCalendarMultiValueExtendedProperties")));
        this.addTest(canCreateMeJoinedGroupsCalendarViewCalendarMultiValueExtendedProperties("Can create canCreateMeJoinedGroupsCalendarViewCalendarMultiValueExtendedProperties", getTestStatus("canCreateMeJoinedGroupsCalendarViewCalendarMultiValueExtendedProperties")));
        this.addTest(canGetMeJoinedGroupsCalendarViewInstances("Can get MeJoinedGroupsCalendarViewInstances", getTestStatus("canGetMeJoinedGroupsCalendarViewInstances")));
        this.addTest(canCreateMeJoinedGroupsCalendarViewInstances("Can create canCreateMeJoinedGroupsCalendarViewInstances", getTestStatus("canCreateMeJoinedGroupsCalendarViewInstances")));
        this.addTest(canGetMeJoinedGroupsCalendarViewInstancesCalendar("Can get MeJoinedGroupsCalendarViewInstancesCalendar", getTestStatus("canGetMeJoinedGroupsCalendarViewInstancesCalendar")));
        this.addTest(canGetMeJoinedGroupsCalendarViewInstancesCalendarSingleValueExtendedProperties("Can get MeJoinedGroupsCalendarViewInstancesCalendarSingleValueExtendedProperties", getTestStatus("canGetMeJoinedGroupsCalendarViewInstancesCalendarSingleValueExtendedProperties")));
        this.addTest(canCreateMeJoinedGroupsCalendarViewInstancesCalendarSingleValueExtendedProperties("Can create canCreateMeJoinedGroupsCalendarViewInstancesCalendarSingleValueExtendedProperties", getTestStatus("canCreateMeJoinedGroupsCalendarViewInstancesCalendarSingleValueExtendedProperties")));
        this.addTest(canGetMeJoinedGroupsCalendarViewInstancesCalendarMultiValueExtendedProperties("Can get MeJoinedGroupsCalendarViewInstancesCalendarMultiValueExtendedProperties", getTestStatus("canGetMeJoinedGroupsCalendarViewInstancesCalendarMultiValueExtendedProperties")));
        this.addTest(canCreateMeJoinedGroupsCalendarViewInstancesCalendarMultiValueExtendedProperties("Can create canCreateMeJoinedGroupsCalendarViewInstancesCalendarMultiValueExtendedProperties", getTestStatus("canCreateMeJoinedGroupsCalendarViewInstancesCalendarMultiValueExtendedProperties")));
        this.addTest(canGetMeJoinedGroupsCalendarViewInstancesExtensions("Can get MeJoinedGroupsCalendarViewInstancesExtensions", getTestStatus("canGetMeJoinedGroupsCalendarViewInstancesExtensions")));
        this.addTest(canCreateMeJoinedGroupsCalendarViewInstancesExtensions("Can create canCreateMeJoinedGroupsCalendarViewInstancesExtensions", getTestStatus("canCreateMeJoinedGroupsCalendarViewInstancesExtensions")));
        this.addTest(canGetMeJoinedGroupsCalendarViewInstancesAttachments("Can get MeJoinedGroupsCalendarViewInstancesAttachments", getTestStatus("canGetMeJoinedGroupsCalendarViewInstancesAttachments")));
        this.addTest(canCreateMeJoinedGroupsCalendarViewInstancesAttachments("Can create canCreateMeJoinedGroupsCalendarViewInstancesAttachments", getTestStatus("canCreateMeJoinedGroupsCalendarViewInstancesAttachments")));
        this.addTest(canGetMeJoinedGroupsCalendarViewInstancesSingleValueExtendedProperties("Can get MeJoinedGroupsCalendarViewInstancesSingleValueExtendedProperties", getTestStatus("canGetMeJoinedGroupsCalendarViewInstancesSingleValueExtendedProperties")));
        this.addTest(canCreateMeJoinedGroupsCalendarViewInstancesSingleValueExtendedProperties("Can create canCreateMeJoinedGroupsCalendarViewInstancesSingleValueExtendedProperties", getTestStatus("canCreateMeJoinedGroupsCalendarViewInstancesSingleValueExtendedProperties")));
        this.addTest(canGetMeJoinedGroupsCalendarViewInstancesMultiValueExtendedProperties("Can get MeJoinedGroupsCalendarViewInstancesMultiValueExtendedProperties", getTestStatus("canGetMeJoinedGroupsCalendarViewInstancesMultiValueExtendedProperties")));
        this.addTest(canCreateMeJoinedGroupsCalendarViewInstancesMultiValueExtendedProperties("Can create canCreateMeJoinedGroupsCalendarViewInstancesMultiValueExtendedProperties", getTestStatus("canCreateMeJoinedGroupsCalendarViewInstancesMultiValueExtendedProperties")));
        this.addTest(canGetMeJoinedGroupsCalendarViewExtensions("Can get MeJoinedGroupsCalendarViewExtensions", getTestStatus("canGetMeJoinedGroupsCalendarViewExtensions")));
        this.addTest(canCreateMeJoinedGroupsCalendarViewExtensions("Can create canCreateMeJoinedGroupsCalendarViewExtensions", getTestStatus("canCreateMeJoinedGroupsCalendarViewExtensions")));
        this.addTest(canGetMeJoinedGroupsCalendarViewAttachments("Can get MeJoinedGroupsCalendarViewAttachments", getTestStatus("canGetMeJoinedGroupsCalendarViewAttachments")));
        this.addTest(canCreateMeJoinedGroupsCalendarViewAttachments("Can create canCreateMeJoinedGroupsCalendarViewAttachments", getTestStatus("canCreateMeJoinedGroupsCalendarViewAttachments")));
        this.addTest(canGetMeJoinedGroupsCalendarViewSingleValueExtendedProperties("Can get MeJoinedGroupsCalendarViewSingleValueExtendedProperties", getTestStatus("canGetMeJoinedGroupsCalendarViewSingleValueExtendedProperties")));
        this.addTest(canCreateMeJoinedGroupsCalendarViewSingleValueExtendedProperties("Can create canCreateMeJoinedGroupsCalendarViewSingleValueExtendedProperties", getTestStatus("canCreateMeJoinedGroupsCalendarViewSingleValueExtendedProperties")));
        this.addTest(canGetMeJoinedGroupsCalendarViewMultiValueExtendedProperties("Can get MeJoinedGroupsCalendarViewMultiValueExtendedProperties", getTestStatus("canGetMeJoinedGroupsCalendarViewMultiValueExtendedProperties")));
        this.addTest(canCreateMeJoinedGroupsCalendarViewMultiValueExtendedProperties("Can create canCreateMeJoinedGroupsCalendarViewMultiValueExtendedProperties", getTestStatus("canCreateMeJoinedGroupsCalendarViewMultiValueExtendedProperties")));
        this.addTest(canGetMeJoinedGroupsEvents("Can get MeJoinedGroupsEvents", getTestStatus("canGetMeJoinedGroupsEvents")));
        this.addTest(canCreateMeJoinedGroupsEvents("Can create canCreateMeJoinedGroupsEvents", getTestStatus("canCreateMeJoinedGroupsEvents")));
        this.addTest(canGetMeJoinedGroupsEventsCalendar("Can get MeJoinedGroupsEventsCalendar", getTestStatus("canGetMeJoinedGroupsEventsCalendar")));
        this.addTest(canGetMeJoinedGroupsEventsCalendarSingleValueExtendedProperties("Can get MeJoinedGroupsEventsCalendarSingleValueExtendedProperties", getTestStatus("canGetMeJoinedGroupsEventsCalendarSingleValueExtendedProperties")));
        this.addTest(canCreateMeJoinedGroupsEventsCalendarSingleValueExtendedProperties("Can create canCreateMeJoinedGroupsEventsCalendarSingleValueExtendedProperties", getTestStatus("canCreateMeJoinedGroupsEventsCalendarSingleValueExtendedProperties")));
        this.addTest(canGetMeJoinedGroupsEventsCalendarMultiValueExtendedProperties("Can get MeJoinedGroupsEventsCalendarMultiValueExtendedProperties", getTestStatus("canGetMeJoinedGroupsEventsCalendarMultiValueExtendedProperties")));
        this.addTest(canCreateMeJoinedGroupsEventsCalendarMultiValueExtendedProperties("Can create canCreateMeJoinedGroupsEventsCalendarMultiValueExtendedProperties", getTestStatus("canCreateMeJoinedGroupsEventsCalendarMultiValueExtendedProperties")));
        this.addTest(canGetMeJoinedGroupsEventsInstances("Can get MeJoinedGroupsEventsInstances", getTestStatus("canGetMeJoinedGroupsEventsInstances")));
        this.addTest(canCreateMeJoinedGroupsEventsInstances("Can create canCreateMeJoinedGroupsEventsInstances", getTestStatus("canCreateMeJoinedGroupsEventsInstances")));
        this.addTest(canGetMeJoinedGroupsEventsInstancesCalendar("Can get MeJoinedGroupsEventsInstancesCalendar", getTestStatus("canGetMeJoinedGroupsEventsInstancesCalendar")));
        this.addTest(canGetMeJoinedGroupsEventsInstancesCalendarSingleValueExtendedProperties("Can get MeJoinedGroupsEventsInstancesCalendarSingleValueExtendedProperties", getTestStatus("canGetMeJoinedGroupsEventsInstancesCalendarSingleValueExtendedProperties")));
        this.addTest(canCreateMeJoinedGroupsEventsInstancesCalendarSingleValueExtendedProperties("Can create canCreateMeJoinedGroupsEventsInstancesCalendarSingleValueExtendedProperties", getTestStatus("canCreateMeJoinedGroupsEventsInstancesCalendarSingleValueExtendedProperties")));
        this.addTest(canGetMeJoinedGroupsEventsInstancesCalendarMultiValueExtendedProperties("Can get MeJoinedGroupsEventsInstancesCalendarMultiValueExtendedProperties", getTestStatus("canGetMeJoinedGroupsEventsInstancesCalendarMultiValueExtendedProperties")));
        this.addTest(canCreateMeJoinedGroupsEventsInstancesCalendarMultiValueExtendedProperties("Can create canCreateMeJoinedGroupsEventsInstancesCalendarMultiValueExtendedProperties", getTestStatus("canCreateMeJoinedGroupsEventsInstancesCalendarMultiValueExtendedProperties")));
        this.addTest(canGetMeJoinedGroupsEventsInstancesExtensions("Can get MeJoinedGroupsEventsInstancesExtensions", getTestStatus("canGetMeJoinedGroupsEventsInstancesExtensions")));
        this.addTest(canCreateMeJoinedGroupsEventsInstancesExtensions("Can create canCreateMeJoinedGroupsEventsInstancesExtensions", getTestStatus("canCreateMeJoinedGroupsEventsInstancesExtensions")));
        this.addTest(canGetMeJoinedGroupsEventsInstancesAttachments("Can get MeJoinedGroupsEventsInstancesAttachments", getTestStatus("canGetMeJoinedGroupsEventsInstancesAttachments")));
        this.addTest(canCreateMeJoinedGroupsEventsInstancesAttachments("Can create canCreateMeJoinedGroupsEventsInstancesAttachments", getTestStatus("canCreateMeJoinedGroupsEventsInstancesAttachments")));
        this.addTest(canGetMeJoinedGroupsEventsInstancesSingleValueExtendedProperties("Can get MeJoinedGroupsEventsInstancesSingleValueExtendedProperties", getTestStatus("canGetMeJoinedGroupsEventsInstancesSingleValueExtendedProperties")));
        this.addTest(canCreateMeJoinedGroupsEventsInstancesSingleValueExtendedProperties("Can create canCreateMeJoinedGroupsEventsInstancesSingleValueExtendedProperties", getTestStatus("canCreateMeJoinedGroupsEventsInstancesSingleValueExtendedProperties")));
        this.addTest(canGetMeJoinedGroupsEventsInstancesMultiValueExtendedProperties("Can get MeJoinedGroupsEventsInstancesMultiValueExtendedProperties", getTestStatus("canGetMeJoinedGroupsEventsInstancesMultiValueExtendedProperties")));
        this.addTest(canCreateMeJoinedGroupsEventsInstancesMultiValueExtendedProperties("Can create canCreateMeJoinedGroupsEventsInstancesMultiValueExtendedProperties", getTestStatus("canCreateMeJoinedGroupsEventsInstancesMultiValueExtendedProperties")));
        this.addTest(canGetMeJoinedGroupsEventsExtensions("Can get MeJoinedGroupsEventsExtensions", getTestStatus("canGetMeJoinedGroupsEventsExtensions")));
        this.addTest(canCreateMeJoinedGroupsEventsExtensions("Can create canCreateMeJoinedGroupsEventsExtensions", getTestStatus("canCreateMeJoinedGroupsEventsExtensions")));
        this.addTest(canGetMeJoinedGroupsEventsAttachments("Can get MeJoinedGroupsEventsAttachments", getTestStatus("canGetMeJoinedGroupsEventsAttachments")));
        this.addTest(canCreateMeJoinedGroupsEventsAttachments("Can create canCreateMeJoinedGroupsEventsAttachments", getTestStatus("canCreateMeJoinedGroupsEventsAttachments")));
        this.addTest(canGetMeJoinedGroupsEventsSingleValueExtendedProperties("Can get MeJoinedGroupsEventsSingleValueExtendedProperties", getTestStatus("canGetMeJoinedGroupsEventsSingleValueExtendedProperties")));
        this.addTest(canCreateMeJoinedGroupsEventsSingleValueExtendedProperties("Can create canCreateMeJoinedGroupsEventsSingleValueExtendedProperties", getTestStatus("canCreateMeJoinedGroupsEventsSingleValueExtendedProperties")));
        this.addTest(canGetMeJoinedGroupsEventsMultiValueExtendedProperties("Can get MeJoinedGroupsEventsMultiValueExtendedProperties", getTestStatus("canGetMeJoinedGroupsEventsMultiValueExtendedProperties")));
        this.addTest(canCreateMeJoinedGroupsEventsMultiValueExtendedProperties("Can create canCreateMeJoinedGroupsEventsMultiValueExtendedProperties", getTestStatus("canCreateMeJoinedGroupsEventsMultiValueExtendedProperties")));
        this.addTest(canGetMeJoinedGroupsConversations("Can get MeJoinedGroupsConversations", getTestStatus("canGetMeJoinedGroupsConversations")));
        this.addTest(canCreateMeJoinedGroupsConversations("Can create canCreateMeJoinedGroupsConversations", getTestStatus("canCreateMeJoinedGroupsConversations")));
        this.addTest(canGetMeJoinedGroupsConversationsThreads("Can get MeJoinedGroupsConversationsThreads", getTestStatus("canGetMeJoinedGroupsConversationsThreads")));
        this.addTest(canCreateMeJoinedGroupsConversationsThreads("Can create canCreateMeJoinedGroupsConversationsThreads", getTestStatus("canCreateMeJoinedGroupsConversationsThreads")));
        this.addTest(canGetMeJoinedGroupsConversationsThreadsPosts("Can get MeJoinedGroupsConversationsThreadsPosts", getTestStatus("canGetMeJoinedGroupsConversationsThreadsPosts")));
        this.addTest(canCreateMeJoinedGroupsConversationsThreadsPosts("Can create canCreateMeJoinedGroupsConversationsThreadsPosts", getTestStatus("canCreateMeJoinedGroupsConversationsThreadsPosts")));
        this.addTest(canGetMeJoinedGroupsConversationsThreadsPostsExtensions("Can get MeJoinedGroupsConversationsThreadsPostsExtensions", getTestStatus("canGetMeJoinedGroupsConversationsThreadsPostsExtensions")));
        this.addTest(canCreateMeJoinedGroupsConversationsThreadsPostsExtensions("Can create canCreateMeJoinedGroupsConversationsThreadsPostsExtensions", getTestStatus("canCreateMeJoinedGroupsConversationsThreadsPostsExtensions")));
        this.addTest(canGetMeJoinedGroupsConversationsThreadsPostsInReplyTo("Can get MeJoinedGroupsConversationsThreadsPostsInReplyTo", getTestStatus("canGetMeJoinedGroupsConversationsThreadsPostsInReplyTo")));
        this.addTest(canGetMeJoinedGroupsConversationsThreadsPostsInReplyToExtensions("Can get MeJoinedGroupsConversationsThreadsPostsInReplyToExtensions", getTestStatus("canGetMeJoinedGroupsConversationsThreadsPostsInReplyToExtensions")));
        this.addTest(canCreateMeJoinedGroupsConversationsThreadsPostsInReplyToExtensions("Can create canCreateMeJoinedGroupsConversationsThreadsPostsInReplyToExtensions", getTestStatus("canCreateMeJoinedGroupsConversationsThreadsPostsInReplyToExtensions")));
        this.addTest(canGetMeJoinedGroupsConversationsThreadsPostsInReplyToAttachments("Can get MeJoinedGroupsConversationsThreadsPostsInReplyToAttachments", getTestStatus("canGetMeJoinedGroupsConversationsThreadsPostsInReplyToAttachments")));
        this.addTest(canCreateMeJoinedGroupsConversationsThreadsPostsInReplyToAttachments("Can create canCreateMeJoinedGroupsConversationsThreadsPostsInReplyToAttachments", getTestStatus("canCreateMeJoinedGroupsConversationsThreadsPostsInReplyToAttachments")));
        this.addTest(canGetMeJoinedGroupsConversationsThreadsPostsInReplyToSingleValueExtendedProperties("Can get MeJoinedGroupsConversationsThreadsPostsInReplyToSingleValueExtendedProperties", getTestStatus("canGetMeJoinedGroupsConversationsThreadsPostsInReplyToSingleValueExtendedProperties")));
        this.addTest(canCreateMeJoinedGroupsConversationsThreadsPostsInReplyToSingleValueExtendedProperties("Can create canCreateMeJoinedGroupsConversationsThreadsPostsInReplyToSingleValueExtendedProperties", getTestStatus("canCreateMeJoinedGroupsConversationsThreadsPostsInReplyToSingleValueExtendedProperties")));
        this.addTest(canGetMeJoinedGroupsConversationsThreadsPostsInReplyToMultiValueExtendedProperties("Can get MeJoinedGroupsConversationsThreadsPostsInReplyToMultiValueExtendedProperties", getTestStatus("canGetMeJoinedGroupsConversationsThreadsPostsInReplyToMultiValueExtendedProperties")));
        this.addTest(canCreateMeJoinedGroupsConversationsThreadsPostsInReplyToMultiValueExtendedProperties("Can create canCreateMeJoinedGroupsConversationsThreadsPostsInReplyToMultiValueExtendedProperties", getTestStatus("canCreateMeJoinedGroupsConversationsThreadsPostsInReplyToMultiValueExtendedProperties")));
        this.addTest(canGetMeJoinedGroupsConversationsThreadsPostsAttachments("Can get MeJoinedGroupsConversationsThreadsPostsAttachments", getTestStatus("canGetMeJoinedGroupsConversationsThreadsPostsAttachments")));
        this.addTest(canCreateMeJoinedGroupsConversationsThreadsPostsAttachments("Can create canCreateMeJoinedGroupsConversationsThreadsPostsAttachments", getTestStatus("canCreateMeJoinedGroupsConversationsThreadsPostsAttachments")));
        this.addTest(canGetMeJoinedGroupsConversationsThreadsPostsSingleValueExtendedProperties("Can get MeJoinedGroupsConversationsThreadsPostsSingleValueExtendedProperties", getTestStatus("canGetMeJoinedGroupsConversationsThreadsPostsSingleValueExtendedProperties")));
        this.addTest(canCreateMeJoinedGroupsConversationsThreadsPostsSingleValueExtendedProperties("Can create canCreateMeJoinedGroupsConversationsThreadsPostsSingleValueExtendedProperties", getTestStatus("canCreateMeJoinedGroupsConversationsThreadsPostsSingleValueExtendedProperties")));
        this.addTest(canGetMeJoinedGroupsConversationsThreadsPostsMultiValueExtendedProperties("Can get MeJoinedGroupsConversationsThreadsPostsMultiValueExtendedProperties", getTestStatus("canGetMeJoinedGroupsConversationsThreadsPostsMultiValueExtendedProperties")));
        this.addTest(canCreateMeJoinedGroupsConversationsThreadsPostsMultiValueExtendedProperties("Can create canCreateMeJoinedGroupsConversationsThreadsPostsMultiValueExtendedProperties", getTestStatus("canCreateMeJoinedGroupsConversationsThreadsPostsMultiValueExtendedProperties")));
        this.addTest(canGetMeJoinedGroupsSubscriptions("Can get MeJoinedGroupsSubscriptions", getTestStatus("canGetMeJoinedGroupsSubscriptions")));
        this.addTest(canCreateMeJoinedGroupsSubscriptions("Can create canCreateMeJoinedGroupsSubscriptions", getTestStatus("canCreateMeJoinedGroupsSubscriptions")));
        this.addTest(canGetMeJoinedGroupsPhoto("Can get MeJoinedGroupsPhoto", getTestStatus("canGetMeJoinedGroupsPhoto")));
        this.addTest(canGetMeJoinedGroupsPhotos("Can get MeJoinedGroupsPhotos", getTestStatus("canGetMeJoinedGroupsPhotos")));
        this.addTest(canCreateMeJoinedGroupsPhotos("Can create canCreateMeJoinedGroupsPhotos", getTestStatus("canCreateMeJoinedGroupsPhotos")));
        this.addTest(canGetMeJoinedGroupsAcceptedSenders("Can get MeJoinedGroupsAcceptedSenders", getTestStatus("canGetMeJoinedGroupsAcceptedSenders")));
        this.addTest(canCreateMeJoinedGroupsAcceptedSenders("Can create canCreateMeJoinedGroupsAcceptedSenders", getTestStatus("canCreateMeJoinedGroupsAcceptedSenders")));
        this.addTest(canGetMeJoinedGroupsRejectedSenders("Can get MeJoinedGroupsRejectedSenders", getTestStatus("canGetMeJoinedGroupsRejectedSenders")));
        this.addTest(canCreateMeJoinedGroupsRejectedSenders("Can create canCreateMeJoinedGroupsRejectedSenders", getTestStatus("canCreateMeJoinedGroupsRejectedSenders")));
        this.addTest(canGetMeMailFolders("Can get MeMailFolders", getTestStatus("canGetMeMailFolders")));
        this.addTest(canCreateMeMailFolders("Can create canCreateMeMailFolders", getTestStatus("canCreateMeMailFolders")));
        this.addTest(canGetMeMailFoldersMessages("Can get MeMailFoldersMessages", getTestStatus("canGetMeMailFoldersMessages")));
        this.addTest(canCreateMeMailFoldersMessages("Can create canCreateMeMailFoldersMessages", getTestStatus("canCreateMeMailFoldersMessages")));
        this.addTest(canGetMeMailFoldersMessagesExtensions("Can get MeMailFoldersMessagesExtensions", getTestStatus("canGetMeMailFoldersMessagesExtensions")));
        this.addTest(canCreateMeMailFoldersMessagesExtensions("Can create canCreateMeMailFoldersMessagesExtensions", getTestStatus("canCreateMeMailFoldersMessagesExtensions")));
        this.addTest(canGetMeMailFoldersMessagesAttachments("Can get MeMailFoldersMessagesAttachments", getTestStatus("canGetMeMailFoldersMessagesAttachments")));
        this.addTest(canCreateMeMailFoldersMessagesAttachments("Can create canCreateMeMailFoldersMessagesAttachments", getTestStatus("canCreateMeMailFoldersMessagesAttachments")));
        this.addTest(canGetMeMailFoldersMessagesSingleValueExtendedProperties("Can get MeMailFoldersMessagesSingleValueExtendedProperties", getTestStatus("canGetMeMailFoldersMessagesSingleValueExtendedProperties")));
        this.addTest(canCreateMeMailFoldersMessagesSingleValueExtendedProperties("Can create canCreateMeMailFoldersMessagesSingleValueExtendedProperties", getTestStatus("canCreateMeMailFoldersMessagesSingleValueExtendedProperties")));
        this.addTest(canGetMeMailFoldersMessagesMultiValueExtendedProperties("Can get MeMailFoldersMessagesMultiValueExtendedProperties", getTestStatus("canGetMeMailFoldersMessagesMultiValueExtendedProperties")));
        this.addTest(canCreateMeMailFoldersMessagesMultiValueExtendedProperties("Can create canCreateMeMailFoldersMessagesMultiValueExtendedProperties", getTestStatus("canCreateMeMailFoldersMessagesMultiValueExtendedProperties")));
        this.addTest(canGetMeMailFoldersChildFolders("Can get MeMailFoldersChildFolders", getTestStatus("canGetMeMailFoldersChildFolders")));
        this.addTest(canCreateMeMailFoldersChildFolders("Can create canCreateMeMailFoldersChildFolders", getTestStatus("canCreateMeMailFoldersChildFolders")));
        this.addTest(canGetMeMailFoldersChildFoldersMessages("Can get MeMailFoldersChildFoldersMessages", getTestStatus("canGetMeMailFoldersChildFoldersMessages")));
        this.addTest(canCreateMeMailFoldersChildFoldersMessages("Can create canCreateMeMailFoldersChildFoldersMessages", getTestStatus("canCreateMeMailFoldersChildFoldersMessages")));
        this.addTest(canGetMeMailFoldersChildFoldersMessagesExtensions("Can get MeMailFoldersChildFoldersMessagesExtensions", getTestStatus("canGetMeMailFoldersChildFoldersMessagesExtensions")));
        this.addTest(canCreateMeMailFoldersChildFoldersMessagesExtensions("Can create canCreateMeMailFoldersChildFoldersMessagesExtensions", getTestStatus("canCreateMeMailFoldersChildFoldersMessagesExtensions")));
        this.addTest(canGetMeMailFoldersChildFoldersMessagesAttachments("Can get MeMailFoldersChildFoldersMessagesAttachments", getTestStatus("canGetMeMailFoldersChildFoldersMessagesAttachments")));
        this.addTest(canCreateMeMailFoldersChildFoldersMessagesAttachments("Can create canCreateMeMailFoldersChildFoldersMessagesAttachments", getTestStatus("canCreateMeMailFoldersChildFoldersMessagesAttachments")));
        this.addTest(canGetMeMailFoldersChildFoldersMessagesSingleValueExtendedProperties("Can get MeMailFoldersChildFoldersMessagesSingleValueExtendedProperties", getTestStatus("canGetMeMailFoldersChildFoldersMessagesSingleValueExtendedProperties")));
        this.addTest(canCreateMeMailFoldersChildFoldersMessagesSingleValueExtendedProperties("Can create canCreateMeMailFoldersChildFoldersMessagesSingleValueExtendedProperties", getTestStatus("canCreateMeMailFoldersChildFoldersMessagesSingleValueExtendedProperties")));
        this.addTest(canGetMeMailFoldersChildFoldersMessagesMultiValueExtendedProperties("Can get MeMailFoldersChildFoldersMessagesMultiValueExtendedProperties", getTestStatus("canGetMeMailFoldersChildFoldersMessagesMultiValueExtendedProperties")));
        this.addTest(canCreateMeMailFoldersChildFoldersMessagesMultiValueExtendedProperties("Can create canCreateMeMailFoldersChildFoldersMessagesMultiValueExtendedProperties", getTestStatus("canCreateMeMailFoldersChildFoldersMessagesMultiValueExtendedProperties")));
        this.addTest(canGetMeMailFoldersChildFoldersSingleValueExtendedProperties("Can get MeMailFoldersChildFoldersSingleValueExtendedProperties", getTestStatus("canGetMeMailFoldersChildFoldersSingleValueExtendedProperties")));
        this.addTest(canCreateMeMailFoldersChildFoldersSingleValueExtendedProperties("Can create canCreateMeMailFoldersChildFoldersSingleValueExtendedProperties", getTestStatus("canCreateMeMailFoldersChildFoldersSingleValueExtendedProperties")));
        this.addTest(canGetMeMailFoldersChildFoldersMultiValueExtendedProperties("Can get MeMailFoldersChildFoldersMultiValueExtendedProperties", getTestStatus("canGetMeMailFoldersChildFoldersMultiValueExtendedProperties")));
        this.addTest(canCreateMeMailFoldersChildFoldersMultiValueExtendedProperties("Can create canCreateMeMailFoldersChildFoldersMultiValueExtendedProperties", getTestStatus("canCreateMeMailFoldersChildFoldersMultiValueExtendedProperties")));
        this.addTest(canGetMeMailFoldersSingleValueExtendedProperties("Can get MeMailFoldersSingleValueExtendedProperties", getTestStatus("canGetMeMailFoldersSingleValueExtendedProperties")));
        this.addTest(canCreateMeMailFoldersSingleValueExtendedProperties("Can create canCreateMeMailFoldersSingleValueExtendedProperties", getTestStatus("canCreateMeMailFoldersSingleValueExtendedProperties")));
        this.addTest(canGetMeMailFoldersMultiValueExtendedProperties("Can get MeMailFoldersMultiValueExtendedProperties", getTestStatus("canGetMeMailFoldersMultiValueExtendedProperties")));
        this.addTest(canCreateMeMailFoldersMultiValueExtendedProperties("Can create canCreateMeMailFoldersMultiValueExtendedProperties", getTestStatus("canCreateMeMailFoldersMultiValueExtendedProperties")));
        this.addTest(canGetMeCalendar("Can get MeCalendar", getTestStatus("canGetMeCalendar")));
        this.addTest(canGetMeCalendarEvents("Can get MeCalendarEvents", getTestStatus("canGetMeCalendarEvents")));
        this.addTest(canCreateMeCalendarEvents("Can create canCreateMeCalendarEvents", getTestStatus("canCreateMeCalendarEvents")));
        this.addTest(canGetMeCalendarEventsInstances("Can get MeCalendarEventsInstances", getTestStatus("canGetMeCalendarEventsInstances")));
        this.addTest(canCreateMeCalendarEventsInstances("Can create canCreateMeCalendarEventsInstances", getTestStatus("canCreateMeCalendarEventsInstances")));
        this.addTest(canGetMeCalendarEventsInstancesExtensions("Can get MeCalendarEventsInstancesExtensions", getTestStatus("canGetMeCalendarEventsInstancesExtensions")));
        this.addTest(canCreateMeCalendarEventsInstancesExtensions("Can create canCreateMeCalendarEventsInstancesExtensions", getTestStatus("canCreateMeCalendarEventsInstancesExtensions")));
        this.addTest(canGetMeCalendarEventsInstancesAttachments("Can get MeCalendarEventsInstancesAttachments", getTestStatus("canGetMeCalendarEventsInstancesAttachments")));
        this.addTest(canCreateMeCalendarEventsInstancesAttachments("Can create canCreateMeCalendarEventsInstancesAttachments", getTestStatus("canCreateMeCalendarEventsInstancesAttachments")));
        this.addTest(canGetMeCalendarEventsInstancesSingleValueExtendedProperties("Can get MeCalendarEventsInstancesSingleValueExtendedProperties", getTestStatus("canGetMeCalendarEventsInstancesSingleValueExtendedProperties")));
        this.addTest(canCreateMeCalendarEventsInstancesSingleValueExtendedProperties("Can create canCreateMeCalendarEventsInstancesSingleValueExtendedProperties", getTestStatus("canCreateMeCalendarEventsInstancesSingleValueExtendedProperties")));
        this.addTest(canGetMeCalendarEventsInstancesMultiValueExtendedProperties("Can get MeCalendarEventsInstancesMultiValueExtendedProperties", getTestStatus("canGetMeCalendarEventsInstancesMultiValueExtendedProperties")));
        this.addTest(canCreateMeCalendarEventsInstancesMultiValueExtendedProperties("Can create canCreateMeCalendarEventsInstancesMultiValueExtendedProperties", getTestStatus("canCreateMeCalendarEventsInstancesMultiValueExtendedProperties")));
        this.addTest(canGetMeCalendarEventsExtensions("Can get MeCalendarEventsExtensions", getTestStatus("canGetMeCalendarEventsExtensions")));
        this.addTest(canCreateMeCalendarEventsExtensions("Can create canCreateMeCalendarEventsExtensions", getTestStatus("canCreateMeCalendarEventsExtensions")));
        this.addTest(canGetMeCalendarEventsAttachments("Can get MeCalendarEventsAttachments", getTestStatus("canGetMeCalendarEventsAttachments")));
        this.addTest(canCreateMeCalendarEventsAttachments("Can create canCreateMeCalendarEventsAttachments", getTestStatus("canCreateMeCalendarEventsAttachments")));
        this.addTest(canGetMeCalendarEventsSingleValueExtendedProperties("Can get MeCalendarEventsSingleValueExtendedProperties", getTestStatus("canGetMeCalendarEventsSingleValueExtendedProperties")));
        this.addTest(canCreateMeCalendarEventsSingleValueExtendedProperties("Can create canCreateMeCalendarEventsSingleValueExtendedProperties", getTestStatus("canCreateMeCalendarEventsSingleValueExtendedProperties")));
        this.addTest(canGetMeCalendarEventsMultiValueExtendedProperties("Can get MeCalendarEventsMultiValueExtendedProperties", getTestStatus("canGetMeCalendarEventsMultiValueExtendedProperties")));
        this.addTest(canCreateMeCalendarEventsMultiValueExtendedProperties("Can create canCreateMeCalendarEventsMultiValueExtendedProperties", getTestStatus("canCreateMeCalendarEventsMultiValueExtendedProperties")));
        this.addTest(canGetMeCalendarCalendarView("Can get MeCalendarCalendarView", getTestStatus("canGetMeCalendarCalendarView")));
        this.addTest(canCreateMeCalendarCalendarView("Can create canCreateMeCalendarCalendarView", getTestStatus("canCreateMeCalendarCalendarView")));
        this.addTest(canGetMeCalendarCalendarViewInstances("Can get MeCalendarCalendarViewInstances", getTestStatus("canGetMeCalendarCalendarViewInstances")));
        this.addTest(canCreateMeCalendarCalendarViewInstances("Can create canCreateMeCalendarCalendarViewInstances", getTestStatus("canCreateMeCalendarCalendarViewInstances")));
        this.addTest(canGetMeCalendarCalendarViewInstancesExtensions("Can get MeCalendarCalendarViewInstancesExtensions", getTestStatus("canGetMeCalendarCalendarViewInstancesExtensions")));
        this.addTest(canCreateMeCalendarCalendarViewInstancesExtensions("Can create canCreateMeCalendarCalendarViewInstancesExtensions", getTestStatus("canCreateMeCalendarCalendarViewInstancesExtensions")));
        this.addTest(canGetMeCalendarCalendarViewInstancesAttachments("Can get MeCalendarCalendarViewInstancesAttachments", getTestStatus("canGetMeCalendarCalendarViewInstancesAttachments")));
        this.addTest(canCreateMeCalendarCalendarViewInstancesAttachments("Can create canCreateMeCalendarCalendarViewInstancesAttachments", getTestStatus("canCreateMeCalendarCalendarViewInstancesAttachments")));
        this.addTest(canGetMeCalendarCalendarViewInstancesSingleValueExtendedProperties("Can get MeCalendarCalendarViewInstancesSingleValueExtendedProperties", getTestStatus("canGetMeCalendarCalendarViewInstancesSingleValueExtendedProperties")));
        this.addTest(canCreateMeCalendarCalendarViewInstancesSingleValueExtendedProperties("Can create canCreateMeCalendarCalendarViewInstancesSingleValueExtendedProperties", getTestStatus("canCreateMeCalendarCalendarViewInstancesSingleValueExtendedProperties")));
        this.addTest(canGetMeCalendarCalendarViewInstancesMultiValueExtendedProperties("Can get MeCalendarCalendarViewInstancesMultiValueExtendedProperties", getTestStatus("canGetMeCalendarCalendarViewInstancesMultiValueExtendedProperties")));
        this.addTest(canCreateMeCalendarCalendarViewInstancesMultiValueExtendedProperties("Can create canCreateMeCalendarCalendarViewInstancesMultiValueExtendedProperties", getTestStatus("canCreateMeCalendarCalendarViewInstancesMultiValueExtendedProperties")));
        this.addTest(canGetMeCalendarCalendarViewExtensions("Can get MeCalendarCalendarViewExtensions", getTestStatus("canGetMeCalendarCalendarViewExtensions")));
        this.addTest(canCreateMeCalendarCalendarViewExtensions("Can create canCreateMeCalendarCalendarViewExtensions", getTestStatus("canCreateMeCalendarCalendarViewExtensions")));
        this.addTest(canGetMeCalendarCalendarViewAttachments("Can get MeCalendarCalendarViewAttachments", getTestStatus("canGetMeCalendarCalendarViewAttachments")));
        this.addTest(canCreateMeCalendarCalendarViewAttachments("Can create canCreateMeCalendarCalendarViewAttachments", getTestStatus("canCreateMeCalendarCalendarViewAttachments")));
        this.addTest(canGetMeCalendarCalendarViewSingleValueExtendedProperties("Can get MeCalendarCalendarViewSingleValueExtendedProperties", getTestStatus("canGetMeCalendarCalendarViewSingleValueExtendedProperties")));
        this.addTest(canCreateMeCalendarCalendarViewSingleValueExtendedProperties("Can create canCreateMeCalendarCalendarViewSingleValueExtendedProperties", getTestStatus("canCreateMeCalendarCalendarViewSingleValueExtendedProperties")));
        this.addTest(canGetMeCalendarCalendarViewMultiValueExtendedProperties("Can get MeCalendarCalendarViewMultiValueExtendedProperties", getTestStatus("canGetMeCalendarCalendarViewMultiValueExtendedProperties")));
        this.addTest(canCreateMeCalendarCalendarViewMultiValueExtendedProperties("Can create canCreateMeCalendarCalendarViewMultiValueExtendedProperties", getTestStatus("canCreateMeCalendarCalendarViewMultiValueExtendedProperties")));
        this.addTest(canGetMeCalendarSingleValueExtendedProperties("Can get MeCalendarSingleValueExtendedProperties", getTestStatus("canGetMeCalendarSingleValueExtendedProperties")));
        this.addTest(canCreateMeCalendarSingleValueExtendedProperties("Can create canCreateMeCalendarSingleValueExtendedProperties", getTestStatus("canCreateMeCalendarSingleValueExtendedProperties")));
        this.addTest(canGetMeCalendarMultiValueExtendedProperties("Can get MeCalendarMultiValueExtendedProperties", getTestStatus("canGetMeCalendarMultiValueExtendedProperties")));
        this.addTest(canCreateMeCalendarMultiValueExtendedProperties("Can create canCreateMeCalendarMultiValueExtendedProperties", getTestStatus("canCreateMeCalendarMultiValueExtendedProperties")));
        this.addTest(canGetMeCalendars("Can get MeCalendars", getTestStatus("canGetMeCalendars")));
        this.addTest(canCreateMeCalendars("Can create canCreateMeCalendars", getTestStatus("canCreateMeCalendars")));
        this.addTest(canGetMeCalendarsEvents("Can get MeCalendarsEvents", getTestStatus("canGetMeCalendarsEvents")));
        this.addTest(canCreateMeCalendarsEvents("Can create canCreateMeCalendarsEvents", getTestStatus("canCreateMeCalendarsEvents")));
        this.addTest(canGetMeCalendarsEventsInstances("Can get MeCalendarsEventsInstances", getTestStatus("canGetMeCalendarsEventsInstances")));
        this.addTest(canCreateMeCalendarsEventsInstances("Can create canCreateMeCalendarsEventsInstances", getTestStatus("canCreateMeCalendarsEventsInstances")));
        this.addTest(canGetMeCalendarsEventsInstancesExtensions("Can get MeCalendarsEventsInstancesExtensions", getTestStatus("canGetMeCalendarsEventsInstancesExtensions")));
        this.addTest(canCreateMeCalendarsEventsInstancesExtensions("Can create canCreateMeCalendarsEventsInstancesExtensions", getTestStatus("canCreateMeCalendarsEventsInstancesExtensions")));
        this.addTest(canGetMeCalendarsEventsInstancesAttachments("Can get MeCalendarsEventsInstancesAttachments", getTestStatus("canGetMeCalendarsEventsInstancesAttachments")));
        this.addTest(canCreateMeCalendarsEventsInstancesAttachments("Can create canCreateMeCalendarsEventsInstancesAttachments", getTestStatus("canCreateMeCalendarsEventsInstancesAttachments")));
        this.addTest(canGetMeCalendarsEventsInstancesSingleValueExtendedProperties("Can get MeCalendarsEventsInstancesSingleValueExtendedProperties", getTestStatus("canGetMeCalendarsEventsInstancesSingleValueExtendedProperties")));
        this.addTest(canCreateMeCalendarsEventsInstancesSingleValueExtendedProperties("Can create canCreateMeCalendarsEventsInstancesSingleValueExtendedProperties", getTestStatus("canCreateMeCalendarsEventsInstancesSingleValueExtendedProperties")));
        this.addTest(canGetMeCalendarsEventsInstancesMultiValueExtendedProperties("Can get MeCalendarsEventsInstancesMultiValueExtendedProperties", getTestStatus("canGetMeCalendarsEventsInstancesMultiValueExtendedProperties")));
        this.addTest(canCreateMeCalendarsEventsInstancesMultiValueExtendedProperties("Can create canCreateMeCalendarsEventsInstancesMultiValueExtendedProperties", getTestStatus("canCreateMeCalendarsEventsInstancesMultiValueExtendedProperties")));
        this.addTest(canGetMeCalendarsEventsExtensions("Can get MeCalendarsEventsExtensions", getTestStatus("canGetMeCalendarsEventsExtensions")));
        this.addTest(canCreateMeCalendarsEventsExtensions("Can create canCreateMeCalendarsEventsExtensions", getTestStatus("canCreateMeCalendarsEventsExtensions")));
        this.addTest(canGetMeCalendarsEventsAttachments("Can get MeCalendarsEventsAttachments", getTestStatus("canGetMeCalendarsEventsAttachments")));
        this.addTest(canCreateMeCalendarsEventsAttachments("Can create canCreateMeCalendarsEventsAttachments", getTestStatus("canCreateMeCalendarsEventsAttachments")));
        this.addTest(canGetMeCalendarsEventsSingleValueExtendedProperties("Can get MeCalendarsEventsSingleValueExtendedProperties", getTestStatus("canGetMeCalendarsEventsSingleValueExtendedProperties")));
        this.addTest(canCreateMeCalendarsEventsSingleValueExtendedProperties("Can create canCreateMeCalendarsEventsSingleValueExtendedProperties", getTestStatus("canCreateMeCalendarsEventsSingleValueExtendedProperties")));
        this.addTest(canGetMeCalendarsEventsMultiValueExtendedProperties("Can get MeCalendarsEventsMultiValueExtendedProperties", getTestStatus("canGetMeCalendarsEventsMultiValueExtendedProperties")));
        this.addTest(canCreateMeCalendarsEventsMultiValueExtendedProperties("Can create canCreateMeCalendarsEventsMultiValueExtendedProperties", getTestStatus("canCreateMeCalendarsEventsMultiValueExtendedProperties")));
        this.addTest(canGetMeCalendarsCalendarView("Can get MeCalendarsCalendarView", getTestStatus("canGetMeCalendarsCalendarView")));
        this.addTest(canCreateMeCalendarsCalendarView("Can create canCreateMeCalendarsCalendarView", getTestStatus("canCreateMeCalendarsCalendarView")));
        this.addTest(canGetMeCalendarsCalendarViewInstances("Can get MeCalendarsCalendarViewInstances", getTestStatus("canGetMeCalendarsCalendarViewInstances")));
        this.addTest(canCreateMeCalendarsCalendarViewInstances("Can create canCreateMeCalendarsCalendarViewInstances", getTestStatus("canCreateMeCalendarsCalendarViewInstances")));
        this.addTest(canGetMeCalendarsCalendarViewInstancesExtensions("Can get MeCalendarsCalendarViewInstancesExtensions", getTestStatus("canGetMeCalendarsCalendarViewInstancesExtensions")));
        this.addTest(canCreateMeCalendarsCalendarViewInstancesExtensions("Can create canCreateMeCalendarsCalendarViewInstancesExtensions", getTestStatus("canCreateMeCalendarsCalendarViewInstancesExtensions")));
        this.addTest(canGetMeCalendarsCalendarViewInstancesAttachments("Can get MeCalendarsCalendarViewInstancesAttachments", getTestStatus("canGetMeCalendarsCalendarViewInstancesAttachments")));
        this.addTest(canCreateMeCalendarsCalendarViewInstancesAttachments("Can create canCreateMeCalendarsCalendarViewInstancesAttachments", getTestStatus("canCreateMeCalendarsCalendarViewInstancesAttachments")));
        this.addTest(canGetMeCalendarsCalendarViewInstancesSingleValueExtendedProperties("Can get MeCalendarsCalendarViewInstancesSingleValueExtendedProperties", getTestStatus("canGetMeCalendarsCalendarViewInstancesSingleValueExtendedProperties")));
        this.addTest(canCreateMeCalendarsCalendarViewInstancesSingleValueExtendedProperties("Can create canCreateMeCalendarsCalendarViewInstancesSingleValueExtendedProperties", getTestStatus("canCreateMeCalendarsCalendarViewInstancesSingleValueExtendedProperties")));
        this.addTest(canGetMeCalendarsCalendarViewInstancesMultiValueExtendedProperties("Can get MeCalendarsCalendarViewInstancesMultiValueExtendedProperties", getTestStatus("canGetMeCalendarsCalendarViewInstancesMultiValueExtendedProperties")));
        this.addTest(canCreateMeCalendarsCalendarViewInstancesMultiValueExtendedProperties("Can create canCreateMeCalendarsCalendarViewInstancesMultiValueExtendedProperties", getTestStatus("canCreateMeCalendarsCalendarViewInstancesMultiValueExtendedProperties")));
        this.addTest(canGetMeCalendarsCalendarViewExtensions("Can get MeCalendarsCalendarViewExtensions", getTestStatus("canGetMeCalendarsCalendarViewExtensions")));
        this.addTest(canCreateMeCalendarsCalendarViewExtensions("Can create canCreateMeCalendarsCalendarViewExtensions", getTestStatus("canCreateMeCalendarsCalendarViewExtensions")));
        this.addTest(canGetMeCalendarsCalendarViewAttachments("Can get MeCalendarsCalendarViewAttachments", getTestStatus("canGetMeCalendarsCalendarViewAttachments")));
        this.addTest(canCreateMeCalendarsCalendarViewAttachments("Can create canCreateMeCalendarsCalendarViewAttachments", getTestStatus("canCreateMeCalendarsCalendarViewAttachments")));
        this.addTest(canGetMeCalendarsCalendarViewSingleValueExtendedProperties("Can get MeCalendarsCalendarViewSingleValueExtendedProperties", getTestStatus("canGetMeCalendarsCalendarViewSingleValueExtendedProperties")));
        this.addTest(canCreateMeCalendarsCalendarViewSingleValueExtendedProperties("Can create canCreateMeCalendarsCalendarViewSingleValueExtendedProperties", getTestStatus("canCreateMeCalendarsCalendarViewSingleValueExtendedProperties")));
        this.addTest(canGetMeCalendarsCalendarViewMultiValueExtendedProperties("Can get MeCalendarsCalendarViewMultiValueExtendedProperties", getTestStatus("canGetMeCalendarsCalendarViewMultiValueExtendedProperties")));
        this.addTest(canCreateMeCalendarsCalendarViewMultiValueExtendedProperties("Can create canCreateMeCalendarsCalendarViewMultiValueExtendedProperties", getTestStatus("canCreateMeCalendarsCalendarViewMultiValueExtendedProperties")));
        this.addTest(canGetMeCalendarsSingleValueExtendedProperties("Can get MeCalendarsSingleValueExtendedProperties", getTestStatus("canGetMeCalendarsSingleValueExtendedProperties")));
        this.addTest(canCreateMeCalendarsSingleValueExtendedProperties("Can create canCreateMeCalendarsSingleValueExtendedProperties", getTestStatus("canCreateMeCalendarsSingleValueExtendedProperties")));
        this.addTest(canGetMeCalendarsMultiValueExtendedProperties("Can get MeCalendarsMultiValueExtendedProperties", getTestStatus("canGetMeCalendarsMultiValueExtendedProperties")));
        this.addTest(canCreateMeCalendarsMultiValueExtendedProperties("Can create canCreateMeCalendarsMultiValueExtendedProperties", getTestStatus("canCreateMeCalendarsMultiValueExtendedProperties")));
        this.addTest(canGetMeCalendarGroups("Can get MeCalendarGroups", getTestStatus("canGetMeCalendarGroups")));
        this.addTest(canCreateMeCalendarGroups("Can create canCreateMeCalendarGroups", getTestStatus("canCreateMeCalendarGroups")));
        this.addTest(canGetMeCalendarGroupsCalendars("Can get MeCalendarGroupsCalendars", getTestStatus("canGetMeCalendarGroupsCalendars")));
        this.addTest(canCreateMeCalendarGroupsCalendars("Can create canCreateMeCalendarGroupsCalendars", getTestStatus("canCreateMeCalendarGroupsCalendars")));
        this.addTest(canGetMeCalendarGroupsCalendarsEvents("Can get MeCalendarGroupsCalendarsEvents", getTestStatus("canGetMeCalendarGroupsCalendarsEvents")));
        this.addTest(canCreateMeCalendarGroupsCalendarsEvents("Can create canCreateMeCalendarGroupsCalendarsEvents", getTestStatus("canCreateMeCalendarGroupsCalendarsEvents")));
        this.addTest(canGetMeCalendarGroupsCalendarsEventsInstances("Can get MeCalendarGroupsCalendarsEventsInstances", getTestStatus("canGetMeCalendarGroupsCalendarsEventsInstances")));
        this.addTest(canCreateMeCalendarGroupsCalendarsEventsInstances("Can create canCreateMeCalendarGroupsCalendarsEventsInstances", getTestStatus("canCreateMeCalendarGroupsCalendarsEventsInstances")));
        this.addTest(canGetMeCalendarGroupsCalendarsEventsInstancesExtensions("Can get MeCalendarGroupsCalendarsEventsInstancesExtensions", getTestStatus("canGetMeCalendarGroupsCalendarsEventsInstancesExtensions")));
        this.addTest(canCreateMeCalendarGroupsCalendarsEventsInstancesExtensions("Can create canCreateMeCalendarGroupsCalendarsEventsInstancesExtensions", getTestStatus("canCreateMeCalendarGroupsCalendarsEventsInstancesExtensions")));
        this.addTest(canGetMeCalendarGroupsCalendarsEventsInstancesAttachments("Can get MeCalendarGroupsCalendarsEventsInstancesAttachments", getTestStatus("canGetMeCalendarGroupsCalendarsEventsInstancesAttachments")));
        this.addTest(canCreateMeCalendarGroupsCalendarsEventsInstancesAttachments("Can create canCreateMeCalendarGroupsCalendarsEventsInstancesAttachments", getTestStatus("canCreateMeCalendarGroupsCalendarsEventsInstancesAttachments")));
        this.addTest(canGetMeCalendarGroupsCalendarsEventsInstancesSingleValueExtendedProperties("Can get MeCalendarGroupsCalendarsEventsInstancesSingleValueExtendedProperties", getTestStatus("canGetMeCalendarGroupsCalendarsEventsInstancesSingleValueExtendedProperties")));
        this.addTest(canCreateMeCalendarGroupsCalendarsEventsInstancesSingleValueExtendedProperties("Can create canCreateMeCalendarGroupsCalendarsEventsInstancesSingleValueExtendedProperties", getTestStatus("canCreateMeCalendarGroupsCalendarsEventsInstancesSingleValueExtendedProperties")));
        this.addTest(canGetMeCalendarGroupsCalendarsEventsInstancesMultiValueExtendedProperties("Can get MeCalendarGroupsCalendarsEventsInstancesMultiValueExtendedProperties", getTestStatus("canGetMeCalendarGroupsCalendarsEventsInstancesMultiValueExtendedProperties")));
        this.addTest(canCreateMeCalendarGroupsCalendarsEventsInstancesMultiValueExtendedProperties("Can create canCreateMeCalendarGroupsCalendarsEventsInstancesMultiValueExtendedProperties", getTestStatus("canCreateMeCalendarGroupsCalendarsEventsInstancesMultiValueExtendedProperties")));
        this.addTest(canGetMeCalendarGroupsCalendarsEventsExtensions("Can get MeCalendarGroupsCalendarsEventsExtensions", getTestStatus("canGetMeCalendarGroupsCalendarsEventsExtensions")));
        this.addTest(canCreateMeCalendarGroupsCalendarsEventsExtensions("Can create canCreateMeCalendarGroupsCalendarsEventsExtensions", getTestStatus("canCreateMeCalendarGroupsCalendarsEventsExtensions")));
        this.addTest(canGetMeCalendarGroupsCalendarsEventsAttachments("Can get MeCalendarGroupsCalendarsEventsAttachments", getTestStatus("canGetMeCalendarGroupsCalendarsEventsAttachments")));
        this.addTest(canCreateMeCalendarGroupsCalendarsEventsAttachments("Can create canCreateMeCalendarGroupsCalendarsEventsAttachments", getTestStatus("canCreateMeCalendarGroupsCalendarsEventsAttachments")));
        this.addTest(canGetMeCalendarGroupsCalendarsEventsSingleValueExtendedProperties("Can get MeCalendarGroupsCalendarsEventsSingleValueExtendedProperties", getTestStatus("canGetMeCalendarGroupsCalendarsEventsSingleValueExtendedProperties")));
        this.addTest(canCreateMeCalendarGroupsCalendarsEventsSingleValueExtendedProperties("Can create canCreateMeCalendarGroupsCalendarsEventsSingleValueExtendedProperties", getTestStatus("canCreateMeCalendarGroupsCalendarsEventsSingleValueExtendedProperties")));
        this.addTest(canGetMeCalendarGroupsCalendarsEventsMultiValueExtendedProperties("Can get MeCalendarGroupsCalendarsEventsMultiValueExtendedProperties", getTestStatus("canGetMeCalendarGroupsCalendarsEventsMultiValueExtendedProperties")));
        this.addTest(canCreateMeCalendarGroupsCalendarsEventsMultiValueExtendedProperties("Can create canCreateMeCalendarGroupsCalendarsEventsMultiValueExtendedProperties", getTestStatus("canCreateMeCalendarGroupsCalendarsEventsMultiValueExtendedProperties")));
        this.addTest(canGetMeCalendarGroupsCalendarsCalendarView("Can get MeCalendarGroupsCalendarsCalendarView", getTestStatus("canGetMeCalendarGroupsCalendarsCalendarView")));
        this.addTest(canCreateMeCalendarGroupsCalendarsCalendarView("Can create canCreateMeCalendarGroupsCalendarsCalendarView", getTestStatus("canCreateMeCalendarGroupsCalendarsCalendarView")));
        this.addTest(canGetMeCalendarGroupsCalendarsCalendarViewInstances("Can get MeCalendarGroupsCalendarsCalendarViewInstances", getTestStatus("canGetMeCalendarGroupsCalendarsCalendarViewInstances")));
        this.addTest(canCreateMeCalendarGroupsCalendarsCalendarViewInstances("Can create canCreateMeCalendarGroupsCalendarsCalendarViewInstances", getTestStatus("canCreateMeCalendarGroupsCalendarsCalendarViewInstances")));
        this.addTest(canGetMeCalendarGroupsCalendarsCalendarViewInstancesExtensions("Can get MeCalendarGroupsCalendarsCalendarViewInstancesExtensions", getTestStatus("canGetMeCalendarGroupsCalendarsCalendarViewInstancesExtensions")));
        this.addTest(canCreateMeCalendarGroupsCalendarsCalendarViewInstancesExtensions("Can create canCreateMeCalendarGroupsCalendarsCalendarViewInstancesExtensions", getTestStatus("canCreateMeCalendarGroupsCalendarsCalendarViewInstancesExtensions")));
        this.addTest(canGetMeCalendarGroupsCalendarsCalendarViewInstancesAttachments("Can get MeCalendarGroupsCalendarsCalendarViewInstancesAttachments", getTestStatus("canGetMeCalendarGroupsCalendarsCalendarViewInstancesAttachments")));
        this.addTest(canCreateMeCalendarGroupsCalendarsCalendarViewInstancesAttachments("Can create canCreateMeCalendarGroupsCalendarsCalendarViewInstancesAttachments", getTestStatus("canCreateMeCalendarGroupsCalendarsCalendarViewInstancesAttachments")));
        this.addTest(canGetMeCalendarGroupsCalendarsCalendarViewInstancesSingleValueExtendedProperties("Can get MeCalendarGroupsCalendarsCalendarViewInstancesSingleValueExtendedProperties", getTestStatus("canGetMeCalendarGroupsCalendarsCalendarViewInstancesSingleValueExtendedProperties")));
        this.addTest(canCreateMeCalendarGroupsCalendarsCalendarViewInstancesSingleValueExtendedProperties("Can create canCreateMeCalendarGroupsCalendarsCalendarViewInstancesSingleValueExtendedProperties", getTestStatus("canCreateMeCalendarGroupsCalendarsCalendarViewInstancesSingleValueExtendedProperties")));
        this.addTest(canGetMeCalendarGroupsCalendarsCalendarViewInstancesMultiValueExtendedProperties("Can get MeCalendarGroupsCalendarsCalendarViewInstancesMultiValueExtendedProperties", getTestStatus("canGetMeCalendarGroupsCalendarsCalendarViewInstancesMultiValueExtendedProperties")));
        this.addTest(canCreateMeCalendarGroupsCalendarsCalendarViewInstancesMultiValueExtendedProperties("Can create canCreateMeCalendarGroupsCalendarsCalendarViewInstancesMultiValueExtendedProperties", getTestStatus("canCreateMeCalendarGroupsCalendarsCalendarViewInstancesMultiValueExtendedProperties")));
        this.addTest(canGetMeCalendarGroupsCalendarsCalendarViewExtensions("Can get MeCalendarGroupsCalendarsCalendarViewExtensions", getTestStatus("canGetMeCalendarGroupsCalendarsCalendarViewExtensions")));
        this.addTest(canCreateMeCalendarGroupsCalendarsCalendarViewExtensions("Can create canCreateMeCalendarGroupsCalendarsCalendarViewExtensions", getTestStatus("canCreateMeCalendarGroupsCalendarsCalendarViewExtensions")));
        this.addTest(canGetMeCalendarGroupsCalendarsCalendarViewAttachments("Can get MeCalendarGroupsCalendarsCalendarViewAttachments", getTestStatus("canGetMeCalendarGroupsCalendarsCalendarViewAttachments")));
        this.addTest(canCreateMeCalendarGroupsCalendarsCalendarViewAttachments("Can create canCreateMeCalendarGroupsCalendarsCalendarViewAttachments", getTestStatus("canCreateMeCalendarGroupsCalendarsCalendarViewAttachments")));
        this.addTest(canGetMeCalendarGroupsCalendarsCalendarViewSingleValueExtendedProperties("Can get MeCalendarGroupsCalendarsCalendarViewSingleValueExtendedProperties", getTestStatus("canGetMeCalendarGroupsCalendarsCalendarViewSingleValueExtendedProperties")));
        this.addTest(canCreateMeCalendarGroupsCalendarsCalendarViewSingleValueExtendedProperties("Can create canCreateMeCalendarGroupsCalendarsCalendarViewSingleValueExtendedProperties", getTestStatus("canCreateMeCalendarGroupsCalendarsCalendarViewSingleValueExtendedProperties")));
        this.addTest(canGetMeCalendarGroupsCalendarsCalendarViewMultiValueExtendedProperties("Can get MeCalendarGroupsCalendarsCalendarViewMultiValueExtendedProperties", getTestStatus("canGetMeCalendarGroupsCalendarsCalendarViewMultiValueExtendedProperties")));
        this.addTest(canCreateMeCalendarGroupsCalendarsCalendarViewMultiValueExtendedProperties("Can create canCreateMeCalendarGroupsCalendarsCalendarViewMultiValueExtendedProperties", getTestStatus("canCreateMeCalendarGroupsCalendarsCalendarViewMultiValueExtendedProperties")));
        this.addTest(canGetMeCalendarGroupsCalendarsSingleValueExtendedProperties("Can get MeCalendarGroupsCalendarsSingleValueExtendedProperties", getTestStatus("canGetMeCalendarGroupsCalendarsSingleValueExtendedProperties")));
        this.addTest(canCreateMeCalendarGroupsCalendarsSingleValueExtendedProperties("Can create canCreateMeCalendarGroupsCalendarsSingleValueExtendedProperties", getTestStatus("canCreateMeCalendarGroupsCalendarsSingleValueExtendedProperties")));
        this.addTest(canGetMeCalendarGroupsCalendarsMultiValueExtendedProperties("Can get MeCalendarGroupsCalendarsMultiValueExtendedProperties", getTestStatus("canGetMeCalendarGroupsCalendarsMultiValueExtendedProperties")));
        this.addTest(canCreateMeCalendarGroupsCalendarsMultiValueExtendedProperties("Can create canCreateMeCalendarGroupsCalendarsMultiValueExtendedProperties", getTestStatus("canCreateMeCalendarGroupsCalendarsMultiValueExtendedProperties")));
        this.addTest(canGetMeCalendarView("Can get MeCalendarView", getTestStatus("canGetMeCalendarView")));
        this.addTest(canCreateMeCalendarView("Can create canCreateMeCalendarView", getTestStatus("canCreateMeCalendarView")));
        this.addTest(canGetMeCalendarViewCalendar("Can get MeCalendarViewCalendar", getTestStatus("canGetMeCalendarViewCalendar")));
        this.addTest(canGetMeCalendarViewCalendarSingleValueExtendedProperties("Can get MeCalendarViewCalendarSingleValueExtendedProperties", getTestStatus("canGetMeCalendarViewCalendarSingleValueExtendedProperties")));
        this.addTest(canCreateMeCalendarViewCalendarSingleValueExtendedProperties("Can create canCreateMeCalendarViewCalendarSingleValueExtendedProperties", getTestStatus("canCreateMeCalendarViewCalendarSingleValueExtendedProperties")));
        this.addTest(canGetMeCalendarViewCalendarMultiValueExtendedProperties("Can get MeCalendarViewCalendarMultiValueExtendedProperties", getTestStatus("canGetMeCalendarViewCalendarMultiValueExtendedProperties")));
        this.addTest(canCreateMeCalendarViewCalendarMultiValueExtendedProperties("Can create canCreateMeCalendarViewCalendarMultiValueExtendedProperties", getTestStatus("canCreateMeCalendarViewCalendarMultiValueExtendedProperties")));
        this.addTest(canGetMeCalendarViewInstances("Can get MeCalendarViewInstances", getTestStatus("canGetMeCalendarViewInstances")));
        this.addTest(canCreateMeCalendarViewInstances("Can create canCreateMeCalendarViewInstances", getTestStatus("canCreateMeCalendarViewInstances")));
        this.addTest(canGetMeCalendarViewInstancesCalendar("Can get MeCalendarViewInstancesCalendar", getTestStatus("canGetMeCalendarViewInstancesCalendar")));
        this.addTest(canGetMeCalendarViewInstancesCalendarSingleValueExtendedProperties("Can get MeCalendarViewInstancesCalendarSingleValueExtendedProperties", getTestStatus("canGetMeCalendarViewInstancesCalendarSingleValueExtendedProperties")));
        this.addTest(canCreateMeCalendarViewInstancesCalendarSingleValueExtendedProperties("Can create canCreateMeCalendarViewInstancesCalendarSingleValueExtendedProperties", getTestStatus("canCreateMeCalendarViewInstancesCalendarSingleValueExtendedProperties")));
        this.addTest(canGetMeCalendarViewInstancesCalendarMultiValueExtendedProperties("Can get MeCalendarViewInstancesCalendarMultiValueExtendedProperties", getTestStatus("canGetMeCalendarViewInstancesCalendarMultiValueExtendedProperties")));
        this.addTest(canCreateMeCalendarViewInstancesCalendarMultiValueExtendedProperties("Can create canCreateMeCalendarViewInstancesCalendarMultiValueExtendedProperties", getTestStatus("canCreateMeCalendarViewInstancesCalendarMultiValueExtendedProperties")));
        this.addTest(canGetMeCalendarViewInstancesExtensions("Can get MeCalendarViewInstancesExtensions", getTestStatus("canGetMeCalendarViewInstancesExtensions")));
        this.addTest(canCreateMeCalendarViewInstancesExtensions("Can create canCreateMeCalendarViewInstancesExtensions", getTestStatus("canCreateMeCalendarViewInstancesExtensions")));
        this.addTest(canGetMeCalendarViewInstancesAttachments("Can get MeCalendarViewInstancesAttachments", getTestStatus("canGetMeCalendarViewInstancesAttachments")));
        this.addTest(canCreateMeCalendarViewInstancesAttachments("Can create canCreateMeCalendarViewInstancesAttachments", getTestStatus("canCreateMeCalendarViewInstancesAttachments")));
        this.addTest(canGetMeCalendarViewInstancesSingleValueExtendedProperties("Can get MeCalendarViewInstancesSingleValueExtendedProperties", getTestStatus("canGetMeCalendarViewInstancesSingleValueExtendedProperties")));
        this.addTest(canCreateMeCalendarViewInstancesSingleValueExtendedProperties("Can create canCreateMeCalendarViewInstancesSingleValueExtendedProperties", getTestStatus("canCreateMeCalendarViewInstancesSingleValueExtendedProperties")));
        this.addTest(canGetMeCalendarViewInstancesMultiValueExtendedProperties("Can get MeCalendarViewInstancesMultiValueExtendedProperties", getTestStatus("canGetMeCalendarViewInstancesMultiValueExtendedProperties")));
        this.addTest(canCreateMeCalendarViewInstancesMultiValueExtendedProperties("Can create canCreateMeCalendarViewInstancesMultiValueExtendedProperties", getTestStatus("canCreateMeCalendarViewInstancesMultiValueExtendedProperties")));
        this.addTest(canGetMeCalendarViewExtensions("Can get MeCalendarViewExtensions", getTestStatus("canGetMeCalendarViewExtensions")));
        this.addTest(canCreateMeCalendarViewExtensions("Can create canCreateMeCalendarViewExtensions", getTestStatus("canCreateMeCalendarViewExtensions")));
        this.addTest(canGetMeCalendarViewAttachments("Can get MeCalendarViewAttachments", getTestStatus("canGetMeCalendarViewAttachments")));
        this.addTest(canCreateMeCalendarViewAttachments("Can create canCreateMeCalendarViewAttachments", getTestStatus("canCreateMeCalendarViewAttachments")));
        this.addTest(canGetMeCalendarViewSingleValueExtendedProperties("Can get MeCalendarViewSingleValueExtendedProperties", getTestStatus("canGetMeCalendarViewSingleValueExtendedProperties")));
        this.addTest(canCreateMeCalendarViewSingleValueExtendedProperties("Can create canCreateMeCalendarViewSingleValueExtendedProperties", getTestStatus("canCreateMeCalendarViewSingleValueExtendedProperties")));
        this.addTest(canGetMeCalendarViewMultiValueExtendedProperties("Can get MeCalendarViewMultiValueExtendedProperties", getTestStatus("canGetMeCalendarViewMultiValueExtendedProperties")));
        this.addTest(canCreateMeCalendarViewMultiValueExtendedProperties("Can create canCreateMeCalendarViewMultiValueExtendedProperties", getTestStatus("canCreateMeCalendarViewMultiValueExtendedProperties")));
        this.addTest(canGetMeEvents("Can get MeEvents", getTestStatus("canGetMeEvents")));
        this.addTest(canCreateMeEvents("Can create canCreateMeEvents", getTestStatus("canCreateMeEvents")));
        this.addTest(canGetMeEventsCalendar("Can get MeEventsCalendar", getTestStatus("canGetMeEventsCalendar")));
        this.addTest(canGetMeEventsCalendarSingleValueExtendedProperties("Can get MeEventsCalendarSingleValueExtendedProperties", getTestStatus("canGetMeEventsCalendarSingleValueExtendedProperties")));
        this.addTest(canCreateMeEventsCalendarSingleValueExtendedProperties("Can create canCreateMeEventsCalendarSingleValueExtendedProperties", getTestStatus("canCreateMeEventsCalendarSingleValueExtendedProperties")));
        this.addTest(canGetMeEventsCalendarMultiValueExtendedProperties("Can get MeEventsCalendarMultiValueExtendedProperties", getTestStatus("canGetMeEventsCalendarMultiValueExtendedProperties")));
        this.addTest(canCreateMeEventsCalendarMultiValueExtendedProperties("Can create canCreateMeEventsCalendarMultiValueExtendedProperties", getTestStatus("canCreateMeEventsCalendarMultiValueExtendedProperties")));
        this.addTest(canGetMeEventsInstances("Can get MeEventsInstances", getTestStatus("canGetMeEventsInstances")));
        this.addTest(canCreateMeEventsInstances("Can create canCreateMeEventsInstances", getTestStatus("canCreateMeEventsInstances")));
        this.addTest(canGetMeEventsInstancesCalendar("Can get MeEventsInstancesCalendar", getTestStatus("canGetMeEventsInstancesCalendar")));
        this.addTest(canGetMeEventsInstancesCalendarSingleValueExtendedProperties("Can get MeEventsInstancesCalendarSingleValueExtendedProperties", getTestStatus("canGetMeEventsInstancesCalendarSingleValueExtendedProperties")));
        this.addTest(canCreateMeEventsInstancesCalendarSingleValueExtendedProperties("Can create canCreateMeEventsInstancesCalendarSingleValueExtendedProperties", getTestStatus("canCreateMeEventsInstancesCalendarSingleValueExtendedProperties")));
        this.addTest(canGetMeEventsInstancesCalendarMultiValueExtendedProperties("Can get MeEventsInstancesCalendarMultiValueExtendedProperties", getTestStatus("canGetMeEventsInstancesCalendarMultiValueExtendedProperties")));
        this.addTest(canCreateMeEventsInstancesCalendarMultiValueExtendedProperties("Can create canCreateMeEventsInstancesCalendarMultiValueExtendedProperties", getTestStatus("canCreateMeEventsInstancesCalendarMultiValueExtendedProperties")));
        this.addTest(canGetMeEventsInstancesExtensions("Can get MeEventsInstancesExtensions", getTestStatus("canGetMeEventsInstancesExtensions")));
        this.addTest(canCreateMeEventsInstancesExtensions("Can create canCreateMeEventsInstancesExtensions", getTestStatus("canCreateMeEventsInstancesExtensions")));
        this.addTest(canGetMeEventsInstancesAttachments("Can get MeEventsInstancesAttachments", getTestStatus("canGetMeEventsInstancesAttachments")));
        this.addTest(canCreateMeEventsInstancesAttachments("Can create canCreateMeEventsInstancesAttachments", getTestStatus("canCreateMeEventsInstancesAttachments")));
        this.addTest(canGetMeEventsInstancesSingleValueExtendedProperties("Can get MeEventsInstancesSingleValueExtendedProperties", getTestStatus("canGetMeEventsInstancesSingleValueExtendedProperties")));
        this.addTest(canCreateMeEventsInstancesSingleValueExtendedProperties("Can create canCreateMeEventsInstancesSingleValueExtendedProperties", getTestStatus("canCreateMeEventsInstancesSingleValueExtendedProperties")));
        this.addTest(canGetMeEventsInstancesMultiValueExtendedProperties("Can get MeEventsInstancesMultiValueExtendedProperties", getTestStatus("canGetMeEventsInstancesMultiValueExtendedProperties")));
        this.addTest(canCreateMeEventsInstancesMultiValueExtendedProperties("Can create canCreateMeEventsInstancesMultiValueExtendedProperties", getTestStatus("canCreateMeEventsInstancesMultiValueExtendedProperties")));
        this.addTest(canGetMeEventsExtensions("Can get MeEventsExtensions", getTestStatus("canGetMeEventsExtensions")));
        this.addTest(canCreateMeEventsExtensions("Can create canCreateMeEventsExtensions", getTestStatus("canCreateMeEventsExtensions")));
        this.addTest(canGetMeEventsAttachments("Can get MeEventsAttachments", getTestStatus("canGetMeEventsAttachments")));
        this.addTest(canCreateMeEventsAttachments("Can create canCreateMeEventsAttachments", getTestStatus("canCreateMeEventsAttachments")));
        this.addTest(canGetMeEventsSingleValueExtendedProperties("Can get MeEventsSingleValueExtendedProperties", getTestStatus("canGetMeEventsSingleValueExtendedProperties")));
        this.addTest(canCreateMeEventsSingleValueExtendedProperties("Can create canCreateMeEventsSingleValueExtendedProperties", getTestStatus("canCreateMeEventsSingleValueExtendedProperties")));
        this.addTest(canGetMeEventsMultiValueExtendedProperties("Can get MeEventsMultiValueExtendedProperties", getTestStatus("canGetMeEventsMultiValueExtendedProperties")));
        this.addTest(canCreateMeEventsMultiValueExtendedProperties("Can create canCreateMeEventsMultiValueExtendedProperties", getTestStatus("canCreateMeEventsMultiValueExtendedProperties")));
        this.addTest(canGetMePeople("Can get MePeople", getTestStatus("canGetMePeople")));
        this.addTest(canCreateMePeople("Can create canCreateMePeople", getTestStatus("canCreateMePeople")));
        this.addTest(canGetMeContacts("Can get MeContacts", getTestStatus("canGetMeContacts")));
        this.addTest(canCreateMeContacts("Can create canCreateMeContacts", getTestStatus("canCreateMeContacts")));
        this.addTest(canGetMeContactsExtensions("Can get MeContactsExtensions", getTestStatus("canGetMeContactsExtensions")));
        this.addTest(canCreateMeContactsExtensions("Can create canCreateMeContactsExtensions", getTestStatus("canCreateMeContactsExtensions")));
        this.addTest(canGetMeContactsPhoto("Can get MeContactsPhoto", getTestStatus("canGetMeContactsPhoto")));
        this.addTest(canGetMeContactsSingleValueExtendedProperties("Can get MeContactsSingleValueExtendedProperties", getTestStatus("canGetMeContactsSingleValueExtendedProperties")));
        this.addTest(canCreateMeContactsSingleValueExtendedProperties("Can create canCreateMeContactsSingleValueExtendedProperties", getTestStatus("canCreateMeContactsSingleValueExtendedProperties")));
        this.addTest(canGetMeContactsMultiValueExtendedProperties("Can get MeContactsMultiValueExtendedProperties", getTestStatus("canGetMeContactsMultiValueExtendedProperties")));
        this.addTest(canCreateMeContactsMultiValueExtendedProperties("Can create canCreateMeContactsMultiValueExtendedProperties", getTestStatus("canCreateMeContactsMultiValueExtendedProperties")));
        this.addTest(canGetMeContactFolders("Can get MeContactFolders", getTestStatus("canGetMeContactFolders")));
        this.addTest(canCreateMeContactFolders("Can create canCreateMeContactFolders", getTestStatus("canCreateMeContactFolders")));
        this.addTest(canGetMeContactFoldersContacts("Can get MeContactFoldersContacts", getTestStatus("canGetMeContactFoldersContacts")));
        this.addTest(canCreateMeContactFoldersContacts("Can create canCreateMeContactFoldersContacts", getTestStatus("canCreateMeContactFoldersContacts")));
        this.addTest(canGetMeContactFoldersContactsExtensions("Can get MeContactFoldersContactsExtensions", getTestStatus("canGetMeContactFoldersContactsExtensions")));
        this.addTest(canCreateMeContactFoldersContactsExtensions("Can create canCreateMeContactFoldersContactsExtensions", getTestStatus("canCreateMeContactFoldersContactsExtensions")));
        this.addTest(canGetMeContactFoldersContactsPhoto("Can get MeContactFoldersContactsPhoto", getTestStatus("canGetMeContactFoldersContactsPhoto")));
        this.addTest(canGetMeContactFoldersContactsSingleValueExtendedProperties("Can get MeContactFoldersContactsSingleValueExtendedProperties", getTestStatus("canGetMeContactFoldersContactsSingleValueExtendedProperties")));
        this.addTest(canCreateMeContactFoldersContactsSingleValueExtendedProperties("Can create canCreateMeContactFoldersContactsSingleValueExtendedProperties", getTestStatus("canCreateMeContactFoldersContactsSingleValueExtendedProperties")));
        this.addTest(canGetMeContactFoldersContactsMultiValueExtendedProperties("Can get MeContactFoldersContactsMultiValueExtendedProperties", getTestStatus("canGetMeContactFoldersContactsMultiValueExtendedProperties")));
        this.addTest(canCreateMeContactFoldersContactsMultiValueExtendedProperties("Can create canCreateMeContactFoldersContactsMultiValueExtendedProperties", getTestStatus("canCreateMeContactFoldersContactsMultiValueExtendedProperties")));
        this.addTest(canGetMeContactFoldersChildFolders("Can get MeContactFoldersChildFolders", getTestStatus("canGetMeContactFoldersChildFolders")));
        this.addTest(canCreateMeContactFoldersChildFolders("Can create canCreateMeContactFoldersChildFolders", getTestStatus("canCreateMeContactFoldersChildFolders")));
        this.addTest(canGetMeContactFoldersChildFoldersContacts("Can get MeContactFoldersChildFoldersContacts", getTestStatus("canGetMeContactFoldersChildFoldersContacts")));
        this.addTest(canCreateMeContactFoldersChildFoldersContacts("Can create canCreateMeContactFoldersChildFoldersContacts", getTestStatus("canCreateMeContactFoldersChildFoldersContacts")));
        this.addTest(canGetMeContactFoldersChildFoldersContactsExtensions("Can get MeContactFoldersChildFoldersContactsExtensions", getTestStatus("canGetMeContactFoldersChildFoldersContactsExtensions")));
        this.addTest(canCreateMeContactFoldersChildFoldersContactsExtensions("Can create canCreateMeContactFoldersChildFoldersContactsExtensions", getTestStatus("canCreateMeContactFoldersChildFoldersContactsExtensions")));
        this.addTest(canGetMeContactFoldersChildFoldersContactsPhoto("Can get MeContactFoldersChildFoldersContactsPhoto", getTestStatus("canGetMeContactFoldersChildFoldersContactsPhoto")));
        this.addTest(canGetMeContactFoldersChildFoldersContactsSingleValueExtendedProperties("Can get MeContactFoldersChildFoldersContactsSingleValueExtendedProperties", getTestStatus("canGetMeContactFoldersChildFoldersContactsSingleValueExtendedProperties")));
        this.addTest(canCreateMeContactFoldersChildFoldersContactsSingleValueExtendedProperties("Can create canCreateMeContactFoldersChildFoldersContactsSingleValueExtendedProperties", getTestStatus("canCreateMeContactFoldersChildFoldersContactsSingleValueExtendedProperties")));
        this.addTest(canGetMeContactFoldersChildFoldersContactsMultiValueExtendedProperties("Can get MeContactFoldersChildFoldersContactsMultiValueExtendedProperties", getTestStatus("canGetMeContactFoldersChildFoldersContactsMultiValueExtendedProperties")));
        this.addTest(canCreateMeContactFoldersChildFoldersContactsMultiValueExtendedProperties("Can create canCreateMeContactFoldersChildFoldersContactsMultiValueExtendedProperties", getTestStatus("canCreateMeContactFoldersChildFoldersContactsMultiValueExtendedProperties")));
        this.addTest(canGetMeContactFoldersChildFoldersSingleValueExtendedProperties("Can get MeContactFoldersChildFoldersSingleValueExtendedProperties", getTestStatus("canGetMeContactFoldersChildFoldersSingleValueExtendedProperties")));
        this.addTest(canCreateMeContactFoldersChildFoldersSingleValueExtendedProperties("Can create canCreateMeContactFoldersChildFoldersSingleValueExtendedProperties", getTestStatus("canCreateMeContactFoldersChildFoldersSingleValueExtendedProperties")));
        this.addTest(canGetMeContactFoldersChildFoldersMultiValueExtendedProperties("Can get MeContactFoldersChildFoldersMultiValueExtendedProperties", getTestStatus("canGetMeContactFoldersChildFoldersMultiValueExtendedProperties")));
        this.addTest(canCreateMeContactFoldersChildFoldersMultiValueExtendedProperties("Can create canCreateMeContactFoldersChildFoldersMultiValueExtendedProperties", getTestStatus("canCreateMeContactFoldersChildFoldersMultiValueExtendedProperties")));
        this.addTest(canGetMeContactFoldersSingleValueExtendedProperties("Can get MeContactFoldersSingleValueExtendedProperties", getTestStatus("canGetMeContactFoldersSingleValueExtendedProperties")));
        this.addTest(canCreateMeContactFoldersSingleValueExtendedProperties("Can create canCreateMeContactFoldersSingleValueExtendedProperties", getTestStatus("canCreateMeContactFoldersSingleValueExtendedProperties")));
        this.addTest(canGetMeContactFoldersMultiValueExtendedProperties("Can get MeContactFoldersMultiValueExtendedProperties", getTestStatus("canGetMeContactFoldersMultiValueExtendedProperties")));
        this.addTest(canCreateMeContactFoldersMultiValueExtendedProperties("Can create canCreateMeContactFoldersMultiValueExtendedProperties", getTestStatus("canCreateMeContactFoldersMultiValueExtendedProperties")));
        this.addTest(canGetMeInferenceClassification("Can get MeInferenceClassification", getTestStatus("canGetMeInferenceClassification")));
        this.addTest(canGetMeInferenceClassificationOverrides("Can get MeInferenceClassificationOverrides", getTestStatus("canGetMeInferenceClassificationOverrides")));
        this.addTest(canCreateMeInferenceClassificationOverrides("Can create canCreateMeInferenceClassificationOverrides", getTestStatus("canCreateMeInferenceClassificationOverrides")));
        this.addTest(canGetMeRootFolder("Can get MeRootFolder", getTestStatus("canGetMeRootFolder")));
        this.addTest(canGetMeRootFolderMessages("Can get MeRootFolderMessages", getTestStatus("canGetMeRootFolderMessages")));
        this.addTest(canCreateMeRootFolderMessages("Can create canCreateMeRootFolderMessages", getTestStatus("canCreateMeRootFolderMessages")));
        this.addTest(canGetMeRootFolderMessagesExtensions("Can get MeRootFolderMessagesExtensions", getTestStatus("canGetMeRootFolderMessagesExtensions")));
        this.addTest(canCreateMeRootFolderMessagesExtensions("Can create canCreateMeRootFolderMessagesExtensions", getTestStatus("canCreateMeRootFolderMessagesExtensions")));
        this.addTest(canGetMeRootFolderMessagesAttachments("Can get MeRootFolderMessagesAttachments", getTestStatus("canGetMeRootFolderMessagesAttachments")));
        this.addTest(canCreateMeRootFolderMessagesAttachments("Can create canCreateMeRootFolderMessagesAttachments", getTestStatus("canCreateMeRootFolderMessagesAttachments")));
        this.addTest(canGetMeRootFolderMessagesSingleValueExtendedProperties("Can get MeRootFolderMessagesSingleValueExtendedProperties", getTestStatus("canGetMeRootFolderMessagesSingleValueExtendedProperties")));
        this.addTest(canCreateMeRootFolderMessagesSingleValueExtendedProperties("Can create canCreateMeRootFolderMessagesSingleValueExtendedProperties", getTestStatus("canCreateMeRootFolderMessagesSingleValueExtendedProperties")));
        this.addTest(canGetMeRootFolderMessagesMultiValueExtendedProperties("Can get MeRootFolderMessagesMultiValueExtendedProperties", getTestStatus("canGetMeRootFolderMessagesMultiValueExtendedProperties")));
        this.addTest(canCreateMeRootFolderMessagesMultiValueExtendedProperties("Can create canCreateMeRootFolderMessagesMultiValueExtendedProperties", getTestStatus("canCreateMeRootFolderMessagesMultiValueExtendedProperties")));
        this.addTest(canGetMeRootFolderChildFolders("Can get MeRootFolderChildFolders", getTestStatus("canGetMeRootFolderChildFolders")));
        this.addTest(canCreateMeRootFolderChildFolders("Can create canCreateMeRootFolderChildFolders", getTestStatus("canCreateMeRootFolderChildFolders")));
        this.addTest(canGetMeRootFolderChildFoldersMessages("Can get MeRootFolderChildFoldersMessages", getTestStatus("canGetMeRootFolderChildFoldersMessages")));
        this.addTest(canCreateMeRootFolderChildFoldersMessages("Can create canCreateMeRootFolderChildFoldersMessages", getTestStatus("canCreateMeRootFolderChildFoldersMessages")));
        this.addTest(canGetMeRootFolderChildFoldersMessagesExtensions("Can get MeRootFolderChildFoldersMessagesExtensions", getTestStatus("canGetMeRootFolderChildFoldersMessagesExtensions")));
        this.addTest(canCreateMeRootFolderChildFoldersMessagesExtensions("Can create canCreateMeRootFolderChildFoldersMessagesExtensions", getTestStatus("canCreateMeRootFolderChildFoldersMessagesExtensions")));
        this.addTest(canGetMeRootFolderChildFoldersMessagesAttachments("Can get MeRootFolderChildFoldersMessagesAttachments", getTestStatus("canGetMeRootFolderChildFoldersMessagesAttachments")));
        this.addTest(canCreateMeRootFolderChildFoldersMessagesAttachments("Can create canCreateMeRootFolderChildFoldersMessagesAttachments", getTestStatus("canCreateMeRootFolderChildFoldersMessagesAttachments")));
        this.addTest(canGetMeRootFolderChildFoldersMessagesSingleValueExtendedProperties("Can get MeRootFolderChildFoldersMessagesSingleValueExtendedProperties", getTestStatus("canGetMeRootFolderChildFoldersMessagesSingleValueExtendedProperties")));
        this.addTest(canCreateMeRootFolderChildFoldersMessagesSingleValueExtendedProperties("Can create canCreateMeRootFolderChildFoldersMessagesSingleValueExtendedProperties", getTestStatus("canCreateMeRootFolderChildFoldersMessagesSingleValueExtendedProperties")));
        this.addTest(canGetMeRootFolderChildFoldersMessagesMultiValueExtendedProperties("Can get MeRootFolderChildFoldersMessagesMultiValueExtendedProperties", getTestStatus("canGetMeRootFolderChildFoldersMessagesMultiValueExtendedProperties")));
        this.addTest(canCreateMeRootFolderChildFoldersMessagesMultiValueExtendedProperties("Can create canCreateMeRootFolderChildFoldersMessagesMultiValueExtendedProperties", getTestStatus("canCreateMeRootFolderChildFoldersMessagesMultiValueExtendedProperties")));
        this.addTest(canGetMeRootFolderChildFoldersSingleValueExtendedProperties("Can get MeRootFolderChildFoldersSingleValueExtendedProperties", getTestStatus("canGetMeRootFolderChildFoldersSingleValueExtendedProperties")));
        this.addTest(canCreateMeRootFolderChildFoldersSingleValueExtendedProperties("Can create canCreateMeRootFolderChildFoldersSingleValueExtendedProperties", getTestStatus("canCreateMeRootFolderChildFoldersSingleValueExtendedProperties")));
        this.addTest(canGetMeRootFolderChildFoldersMultiValueExtendedProperties("Can get MeRootFolderChildFoldersMultiValueExtendedProperties", getTestStatus("canGetMeRootFolderChildFoldersMultiValueExtendedProperties")));
        this.addTest(canCreateMeRootFolderChildFoldersMultiValueExtendedProperties("Can create canCreateMeRootFolderChildFoldersMultiValueExtendedProperties", getTestStatus("canCreateMeRootFolderChildFoldersMultiValueExtendedProperties")));
        this.addTest(canGetMeRootFolderSingleValueExtendedProperties("Can get MeRootFolderSingleValueExtendedProperties", getTestStatus("canGetMeRootFolderSingleValueExtendedProperties")));
        this.addTest(canCreateMeRootFolderSingleValueExtendedProperties("Can create canCreateMeRootFolderSingleValueExtendedProperties", getTestStatus("canCreateMeRootFolderSingleValueExtendedProperties")));
        this.addTest(canGetMeRootFolderMultiValueExtendedProperties("Can get MeRootFolderMultiValueExtendedProperties", getTestStatus("canGetMeRootFolderMultiValueExtendedProperties")));
        this.addTest(canCreateMeRootFolderMultiValueExtendedProperties("Can create canCreateMeRootFolderMultiValueExtendedProperties", getTestStatus("canCreateMeRootFolderMultiValueExtendedProperties")));
        this.addTest(canGetMeAggregatedSocialActivities("Can get MeAggregatedSocialActivities", getTestStatus("canGetMeAggregatedSocialActivities")));
        this.addTest(canCreateMeAggregatedSocialActivities("Can create canCreateMeAggregatedSocialActivities", getTestStatus("canCreateMeAggregatedSocialActivities")));
        this.addTest(canGetMeAggregatedSocialActivitiesItem("Can get MeAggregatedSocialActivitiesItem", getTestStatus("canGetMeAggregatedSocialActivitiesItem")));
        this.addTest(canGetMeAggregatedSocialActivitiesItemCalendar("Can get MeAggregatedSocialActivitiesItemCalendar", getTestStatus("canGetMeAggregatedSocialActivitiesItemCalendar")));
        this.addTest(canGetMeAggregatedSocialActivitiesItemCalendarSingleValueExtendedProperties("Can get MeAggregatedSocialActivitiesItemCalendarSingleValueExtendedProperties", getTestStatus("canGetMeAggregatedSocialActivitiesItemCalendarSingleValueExtendedProperties")));
        this.addTest(canCreateMeAggregatedSocialActivitiesItemCalendarSingleValueExtendedProperties("Can create canCreateMeAggregatedSocialActivitiesItemCalendarSingleValueExtendedProperties", getTestStatus("canCreateMeAggregatedSocialActivitiesItemCalendarSingleValueExtendedProperties")));
        this.addTest(canGetMeAggregatedSocialActivitiesItemCalendarMultiValueExtendedProperties("Can get MeAggregatedSocialActivitiesItemCalendarMultiValueExtendedProperties", getTestStatus("canGetMeAggregatedSocialActivitiesItemCalendarMultiValueExtendedProperties")));
        this.addTest(canCreateMeAggregatedSocialActivitiesItemCalendarMultiValueExtendedProperties("Can create canCreateMeAggregatedSocialActivitiesItemCalendarMultiValueExtendedProperties", getTestStatus("canCreateMeAggregatedSocialActivitiesItemCalendarMultiValueExtendedProperties")));
        this.addTest(canGetMeAggregatedSocialActivitiesItemInstances("Can get MeAggregatedSocialActivitiesItemInstances", getTestStatus("canGetMeAggregatedSocialActivitiesItemInstances")));
        this.addTest(canCreateMeAggregatedSocialActivitiesItemInstances("Can create canCreateMeAggregatedSocialActivitiesItemInstances", getTestStatus("canCreateMeAggregatedSocialActivitiesItemInstances")));
        this.addTest(canGetMeAggregatedSocialActivitiesItemInstancesCalendar("Can get MeAggregatedSocialActivitiesItemInstancesCalendar", getTestStatus("canGetMeAggregatedSocialActivitiesItemInstancesCalendar")));
        this.addTest(canGetMeAggregatedSocialActivitiesItemInstancesCalendarSingleValueExtendedProperties("Can get MeAggregatedSocialActivitiesItemInstancesCalendarSingleValueExtendedProperties", getTestStatus("canGetMeAggregatedSocialActivitiesItemInstancesCalendarSingleValueExtendedProperties")));
        this.addTest(canCreateMeAggregatedSocialActivitiesItemInstancesCalendarSingleValueExtendedProperties("Can create canCreateMeAggregatedSocialActivitiesItemInstancesCalendarSingleValueExtendedProperties", getTestStatus("canCreateMeAggregatedSocialActivitiesItemInstancesCalendarSingleValueExtendedProperties")));
        this.addTest(canGetMeAggregatedSocialActivitiesItemInstancesCalendarMultiValueExtendedProperties("Can get MeAggregatedSocialActivitiesItemInstancesCalendarMultiValueExtendedProperties", getTestStatus("canGetMeAggregatedSocialActivitiesItemInstancesCalendarMultiValueExtendedProperties")));
        this.addTest(canCreateMeAggregatedSocialActivitiesItemInstancesCalendarMultiValueExtendedProperties("Can create canCreateMeAggregatedSocialActivitiesItemInstancesCalendarMultiValueExtendedProperties", getTestStatus("canCreateMeAggregatedSocialActivitiesItemInstancesCalendarMultiValueExtendedProperties")));
        this.addTest(canGetMeAggregatedSocialActivitiesItemInstancesExtensions("Can get MeAggregatedSocialActivitiesItemInstancesExtensions", getTestStatus("canGetMeAggregatedSocialActivitiesItemInstancesExtensions")));
        this.addTest(canCreateMeAggregatedSocialActivitiesItemInstancesExtensions("Can create canCreateMeAggregatedSocialActivitiesItemInstancesExtensions", getTestStatus("canCreateMeAggregatedSocialActivitiesItemInstancesExtensions")));
        this.addTest(canGetMeAggregatedSocialActivitiesItemInstancesAttachments("Can get MeAggregatedSocialActivitiesItemInstancesAttachments", getTestStatus("canGetMeAggregatedSocialActivitiesItemInstancesAttachments")));
        this.addTest(canCreateMeAggregatedSocialActivitiesItemInstancesAttachments("Can create canCreateMeAggregatedSocialActivitiesItemInstancesAttachments", getTestStatus("canCreateMeAggregatedSocialActivitiesItemInstancesAttachments")));
        this.addTest(canGetMeAggregatedSocialActivitiesItemInstancesSingleValueExtendedProperties("Can get MeAggregatedSocialActivitiesItemInstancesSingleValueExtendedProperties", getTestStatus("canGetMeAggregatedSocialActivitiesItemInstancesSingleValueExtendedProperties")));
        this.addTest(canCreateMeAggregatedSocialActivitiesItemInstancesSingleValueExtendedProperties("Can create canCreateMeAggregatedSocialActivitiesItemInstancesSingleValueExtendedProperties", getTestStatus("canCreateMeAggregatedSocialActivitiesItemInstancesSingleValueExtendedProperties")));
        this.addTest(canGetMeAggregatedSocialActivitiesItemInstancesMultiValueExtendedProperties("Can get MeAggregatedSocialActivitiesItemInstancesMultiValueExtendedProperties", getTestStatus("canGetMeAggregatedSocialActivitiesItemInstancesMultiValueExtendedProperties")));
        this.addTest(canCreateMeAggregatedSocialActivitiesItemInstancesMultiValueExtendedProperties("Can create canCreateMeAggregatedSocialActivitiesItemInstancesMultiValueExtendedProperties", getTestStatus("canCreateMeAggregatedSocialActivitiesItemInstancesMultiValueExtendedProperties")));
        this.addTest(canGetMeAggregatedSocialActivitiesItemExtensions("Can get MeAggregatedSocialActivitiesItemExtensions", getTestStatus("canGetMeAggregatedSocialActivitiesItemExtensions")));
        this.addTest(canCreateMeAggregatedSocialActivitiesItemExtensions("Can create canCreateMeAggregatedSocialActivitiesItemExtensions", getTestStatus("canCreateMeAggregatedSocialActivitiesItemExtensions")));
        this.addTest(canGetMeAggregatedSocialActivitiesItemAttachments("Can get MeAggregatedSocialActivitiesItemAttachments", getTestStatus("canGetMeAggregatedSocialActivitiesItemAttachments")));
        this.addTest(canCreateMeAggregatedSocialActivitiesItemAttachments("Can create canCreateMeAggregatedSocialActivitiesItemAttachments", getTestStatus("canCreateMeAggregatedSocialActivitiesItemAttachments")));
        this.addTest(canGetMeAggregatedSocialActivitiesItemSingleValueExtendedProperties("Can get MeAggregatedSocialActivitiesItemSingleValueExtendedProperties", getTestStatus("canGetMeAggregatedSocialActivitiesItemSingleValueExtendedProperties")));
        this.addTest(canCreateMeAggregatedSocialActivitiesItemSingleValueExtendedProperties("Can create canCreateMeAggregatedSocialActivitiesItemSingleValueExtendedProperties", getTestStatus("canCreateMeAggregatedSocialActivitiesItemSingleValueExtendedProperties")));
        this.addTest(canGetMeAggregatedSocialActivitiesItemMultiValueExtendedProperties("Can get MeAggregatedSocialActivitiesItemMultiValueExtendedProperties", getTestStatus("canGetMeAggregatedSocialActivitiesItemMultiValueExtendedProperties")));
        this.addTest(canCreateMeAggregatedSocialActivitiesItemMultiValueExtendedProperties("Can create canCreateMeAggregatedSocialActivitiesItemMultiValueExtendedProperties", getTestStatus("canCreateMeAggregatedSocialActivitiesItemMultiValueExtendedProperties")));
        this.addTest(canGetMePhoto("Can get MePhoto", getTestStatus("canGetMePhoto")));
        this.addTest(canGetMePhotos("Can get MePhotos", getTestStatus("canGetMePhotos")));
        this.addTest(canCreateMePhotos("Can create canCreateMePhotos", getTestStatus("canCreateMePhotos")));
        this.addTest(canGetMeDrives("Can get MeDrives", getTestStatus("canGetMeDrives")));
        this.addTest(canCreateMeDrives("Can create canCreateMeDrives", getTestStatus("canCreateMeDrives")));
        this.addTest(canGetMeDrivesExtensions("Can get MeDrivesExtensions", getTestStatus("canGetMeDrivesExtensions")));
        this.addTest(canCreateMeDrivesExtensions("Can create canCreateMeDrivesExtensions", getTestStatus("canCreateMeDrivesExtensions")));
        this.addTest(canGetMeDrivesFiles("Can get MeDrivesFiles", getTestStatus("canGetMeDrivesFiles")));
        this.addTest(canCreateMeDrivesFiles("Can create canCreateMeDrivesFiles", getTestStatus("canCreateMeDrivesFiles")));
        this.addTest(canGetMeDrivesFilesExtensions("Can get MeDrivesFilesExtensions", getTestStatus("canGetMeDrivesFilesExtensions")));
        this.addTest(canCreateMeDrivesFilesExtensions("Can create canCreateMeDrivesFilesExtensions", getTestStatus("canCreateMeDrivesFilesExtensions")));
        this.addTest(canGetMeWorkingWithEntities("Can get MeWorkingWithEntities", getTestStatus("canGetMeWorkingWithEntities")));
        this.addTest(canCreateMeWorkingWithEntities("Can create canCreateMeWorkingWithEntities", getTestStatus("canCreateMeWorkingWithEntities")));
        this.addTest(canGetMeWorkingWithEntitiesExtensions("Can get MeWorkingWithEntitiesExtensions", getTestStatus("canGetMeWorkingWithEntitiesExtensions")));
        this.addTest(canCreateMeWorkingWithEntitiesExtensions("Can create canCreateMeWorkingWithEntitiesExtensions", getTestStatus("canCreateMeWorkingWithEntitiesExtensions")));
    }

    private TestStatus getTestStatus(String name){
        return mNotSupportedTests.contains(name) ? TestStatus.NotSupported : TestStatus.NotRun;
    }
    private User getSampleUser() throws InstantiationException, IllegalAccessException{
        User sampleUser = new User();

        mFiller.fill(sampleUser);
        if(sampleUser == null) {
            throw new IllegalArgumentException("Couldn't fill sample User with default values");
        }

        return sampleUser;
    }

    private PushSubscription getSampleSubscription() throws InstantiationException, IllegalAccessException{
        PushSubscription samplePushSubscription = new PushSubscription();

        mFiller.fill(samplePushSubscription);
        if(samplePushSubscription == null) {
            throw new IllegalArgumentException("Couldn't fill sample PushSubscription with default values");
        }

        return samplePushSubscription;
    }

    private Message getSampleMessage() throws InstantiationException, IllegalAccessException{
        Message sampleMessage = new Message();

        mFiller.fill(sampleMessage);
        if(sampleMessage == null) {
            throw new IllegalArgumentException("Couldn't fill sample Message with default values");
        }

        return sampleMessage;
    }

    private OpenTypeExtension getSampleExtension() throws InstantiationException, IllegalAccessException{
        OpenTypeExtension sampleOpenTypeExtension = new OpenTypeExtension();

        mFiller.fill(sampleOpenTypeExtension);
        if(sampleOpenTypeExtension == null) {
            throw new IllegalArgumentException("Couldn't fill sample OpenTypeExtension with default values");
        }

        return sampleOpenTypeExtension;
    }

    private FileAttachment getSampleAttachment() throws InstantiationException, IllegalAccessException{
        FileAttachment sampleFileAttachment = new FileAttachment();

        mFiller.fill(sampleFileAttachment);
        if(sampleFileAttachment == null) {
            throw new IllegalArgumentException("Couldn't fill sample FileAttachment with default values");
        }

        return sampleFileAttachment;
    }

    private SingleValueLegacyExtendedProperty getSampleSingleValueLegacyExtendedProperty() throws InstantiationException, IllegalAccessException{
        SingleValueLegacyExtendedProperty sampleSingleValueLegacyExtendedProperty = new SingleValueLegacyExtendedProperty();

        mFiller.fill(sampleSingleValueLegacyExtendedProperty);
        if(sampleSingleValueLegacyExtendedProperty == null) {
            throw new IllegalArgumentException("Couldn't fill sample SingleValueLegacyExtendedProperty with default values");
        }

        return sampleSingleValueLegacyExtendedProperty;
    }

    private MultiValueLegacyExtendedProperty getSampleMultiValueLegacyExtendedProperty() throws InstantiationException, IllegalAccessException{
        MultiValueLegacyExtendedProperty sampleMultiValueLegacyExtendedProperty = new MultiValueLegacyExtendedProperty();

        mFiller.fill(sampleMultiValueLegacyExtendedProperty);
        if(sampleMultiValueLegacyExtendedProperty == null) {
            throw new IllegalArgumentException("Couldn't fill sample MultiValueLegacyExtendedProperty with default values");
        }

        return sampleMultiValueLegacyExtendedProperty;
    }

    private Group getSampleGroup() throws InstantiationException, IllegalAccessException{
        Group sampleGroup = new Group();

        mFiller.fill(sampleGroup);
        if(sampleGroup == null) {
            throw new IllegalArgumentException("Couldn't fill sample Group with default values");
        }

        return sampleGroup;
    }

    private ConversationThread getSampleConversationThread() throws InstantiationException, IllegalAccessException{
        ConversationThread sampleConversationThread = new ConversationThread();

        mFiller.fill(sampleConversationThread);
        if(sampleConversationThread == null) {
            throw new IllegalArgumentException("Couldn't fill sample ConversationThread with default values");
        }

        return sampleConversationThread;
    }

    private Post getSamplePost() throws InstantiationException, IllegalAccessException{
        Post samplePost = new Post();

        mFiller.fill(samplePost);
        if(samplePost == null) {
            throw new IllegalArgumentException("Couldn't fill sample Post with default values");
        }

        return samplePost;
    }

    private Event getSampleEvent() throws InstantiationException, IllegalAccessException{
        Event sampleEvent = new Event();

        mFiller.fill(sampleEvent);
        if(sampleEvent == null) {
            throw new IllegalArgumentException("Couldn't fill sample Event with default values");
        }

        return sampleEvent;
    }

    private Conversation getSampleConversation() throws InstantiationException, IllegalAccessException{
        Conversation sampleConversation = new Conversation();

        mFiller.fill(sampleConversation);
        if(sampleConversation == null) {
            throw new IllegalArgumentException("Couldn't fill sample Conversation with default values");
        }

        return sampleConversation;
    }

    private Photo getSamplePhoto() throws InstantiationException, IllegalAccessException{
        Photo samplePhoto = new Photo();

        mFiller.fill(samplePhoto);
        if(samplePhoto == null) {
            throw new IllegalArgumentException("Couldn't fill sample Photo with default values");
        }

        return samplePhoto;
    }

    private User getSampleDirectoryObject() throws InstantiationException, IllegalAccessException{
        User sampleUser = new User();

        mFiller.fill(sampleUser);
        if(sampleUser == null) {
            throw new IllegalArgumentException("Couldn't fill sample User with default values");
        }

        return sampleUser;
    }

    private MailFolder getSampleMailFolder() throws InstantiationException, IllegalAccessException{
        MailFolder sampleMailFolder = new MailFolder();

        mFiller.fill(sampleMailFolder);
        if(sampleMailFolder == null) {
            throw new IllegalArgumentException("Couldn't fill sample MailFolder with default values");
        }

        return sampleMailFolder;
    }

    private Calendar getSampleCalendar() throws InstantiationException, IllegalAccessException{
        Calendar sampleCalendar = new Calendar();

        mFiller.fill(sampleCalendar);
        if(sampleCalendar == null) {
            throw new IllegalArgumentException("Couldn't fill sample Calendar with default values");
        }

        return sampleCalendar;
    }

    private CalendarGroup getSampleCalendarGroup() throws InstantiationException, IllegalAccessException{
        CalendarGroup sampleCalendarGroup = new CalendarGroup();

        mFiller.fill(sampleCalendarGroup);
        if(sampleCalendarGroup == null) {
            throw new IllegalArgumentException("Couldn't fill sample CalendarGroup with default values");
        }

        return sampleCalendarGroup;
    }

    private Person getSamplePerson() throws InstantiationException, IllegalAccessException{
        Person samplePerson = new Person();

        mFiller.fill(samplePerson);
        if(samplePerson == null) {
            throw new IllegalArgumentException("Couldn't fill sample Person with default values");
        }

        return samplePerson;
    }

    private Contact getSampleContact() throws InstantiationException, IllegalAccessException{
        Contact sampleContact = new Contact();

        mFiller.fill(sampleContact);
        if(sampleContact == null) {
            throw new IllegalArgumentException("Couldn't fill sample Contact with default values");
        }

        return sampleContact;
    }

    private ContactFolder getSampleContactFolder() throws InstantiationException, IllegalAccessException{
        ContactFolder sampleContactFolder = new ContactFolder();

        mFiller.fill(sampleContactFolder);
        if(sampleContactFolder == null) {
            throw new IllegalArgumentException("Couldn't fill sample ContactFolder with default values");
        }

        return sampleContactFolder;
    }

    private InferenceClassificationOverride getSampleInferenceClassificationOverride() throws InstantiationException, IllegalAccessException{
        InferenceClassificationOverride sampleInferenceClassificationOverride = new InferenceClassificationOverride();

        mFiller.fill(sampleInferenceClassificationOverride);
        if(sampleInferenceClassificationOverride == null) {
            throw new IllegalArgumentException("Couldn't fill sample InferenceClassificationOverride with default values");
        }

        return sampleInferenceClassificationOverride;
    }

    private AggregatedSocialActivity getSampleAggregatedSocialActivity() throws InstantiationException, IllegalAccessException{
        AggregatedSocialActivity sampleAggregatedSocialActivity = new AggregatedSocialActivity();

        mFiller.fill(sampleAggregatedSocialActivity);
        if(sampleAggregatedSocialActivity == null) {
            throw new IllegalArgumentException("Couldn't fill sample AggregatedSocialActivity with default values");
        }

        return sampleAggregatedSocialActivity;
    }

    private Drive getSampleDrive() throws InstantiationException, IllegalAccessException{
        Drive sampleDrive = new Drive();

        mFiller.fill(sampleDrive);
        if(sampleDrive == null) {
            throw new IllegalArgumentException("Couldn't fill sample Drive with default values");
        }

        return sampleDrive;
    }

    private File getSampleFile() throws InstantiationException, IllegalAccessException{
        File sampleFile = new File();

        mFiller.fill(sampleFile);
        if(sampleFile == null) {
            throw new IllegalArgumentException("Couldn't fill sample File with default values");
        }

        return sampleFile;
    }

    private WorkingWithEntity getSampleWorkingWithEntity() throws InstantiationException, IllegalAccessException{
        WorkingWithEntity sampleWorkingWithEntity = new WorkingWithEntity();

        mFiller.fill(sampleWorkingWithEntity);
        if(sampleWorkingWithEntity == null) {
            throw new IllegalArgumentException("Couldn't fill sample WorkingWithEntity with default values");
        }

        return sampleWorkingWithEntity;
    }

}