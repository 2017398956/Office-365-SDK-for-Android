

/*******************************************************************************
 **NOTE** This code was generated by a tool and will occasionally be
 overwritten. We welcome comments and issues regarding this code; they will be
 addressed in the generation tool. If you wish to submit pull requests, please
 do so for the templates in that tool.

 This code was generated by Vipr (https://github.com/microsoft/vipr) using
 the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

 Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
 Licensed under the Apache License 2.0; see LICENSE in the source repository
 root for authoritative license information.ï»¿
 ******************************************************************************/

package com.microsoft.office365.test.integration.tests;

import com.microsoft.services.outlook.*;
import com.microsoft.services.outlook.fetchers.*;
import com.microsoft.office365.test.integration.ApplicationContext;
import com.microsoft.office365.test.integration.framework.*;
import com.microsoft.office365.test.integration.framework.objectFiller.*;

import java.util.List;
import java.util.Set;

/**
 * The type OutlookClientTests.
 */
public class OutlookClientTests extends TestGroup {
    private ObjectFiller mFiller;
    private Set<String> mNotSupportedTests;
    private TestCase canGetMe(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    User _me = client.getMe().read().get();

                    if (_me != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeFolders(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    List<Folder> _folders = client.getMe().getFolders().read().get();

                    if (_folders != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeFolders(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Folder sampleFolder = getSampleFolder();
                    Folder _createdfolder = client.getMe().getFolders().add(sampleFolder).get();

                    if (_createdfolder != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeFoldersChildFolders(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<Folder> _listfolders = client.getMe().getFolders().read().get();
                    Folder _folder = _listfolders == null? null : _listfolders.get(0);

                    if(_folder == null){
                        throw new Exception("Folder not available. Can't proceed with the test.");
                    }

                    List<Folder> _childFolders = client.getMe().getFolders().getById(_folder.getId()).getChildFolders().read().get();

                    if (_childFolders != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeFoldersChildFolders(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Folder sampleFolder = getSampleFolder();

                    List<Folder> _listfolders = client.getMe().getFolders().read().get();
                    Folder _folder = _listfolders == null? null : _listfolders.get(0);

                    if(_folder == null){
                        throw new Exception("Folder not available. Can't proceed with the test.");
                    }

                    Folder _createdchildFolder = client.getMe().getFolders().getById(_folder.getId()).getChildFolders().add(sampleFolder).get();

                    if (_createdchildFolder != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeFoldersChildFoldersMessages(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<Folder> _listfolders = client.getMe().getFolders().read().get();
                    Folder _folder = _listfolders == null? null : _listfolders.get(0);

                    if(_folder == null){
                        throw new Exception("Folder not available. Can't proceed with the test.");
                    }


                    List<Folder> _listchildFolders = client.getMe().getFolders().getById(_folder.getId()).getChildFolders().read().get();
                    Folder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);

                    if(_childFolder == null){
                        throw new Exception("ChildFolder not available. Can't proceed with the test.");
                    }

                    List<Message> _messages = client.getMe().getFolders().getById(_folder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().read().get();

                    if (_messages != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeFoldersChildFoldersMessages(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Message sampleMessage = getSampleMessage();

                    List<Folder> _listfolders = client.getMe().getFolders().read().get();
                    Folder _folder = _listfolders == null? null : _listfolders.get(0);

                    if(_folder == null){
                        throw new Exception("Folder not available. Can't proceed with the test.");
                    }


                    List<Folder> _listchildFolders = client.getMe().getFolders().getById(_folder.getId()).getChildFolders().read().get();
                    Folder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);

                    if(_childFolder == null){
                        throw new Exception("ChildFolder not available. Can't proceed with the test.");
                    }

                    Message _createdmessage = client.getMe().getFolders().getById(_folder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().add(sampleMessage).get();

                    if (_createdmessage != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeFoldersChildFoldersMessagesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<Folder> _listfolders = client.getMe().getFolders().read().get();
                    Folder _folder = _listfolders == null? null : _listfolders.get(0);

                    if(_folder == null){
                        throw new Exception("Folder not available. Can't proceed with the test.");
                    }


                    List<Folder> _listchildFolders = client.getMe().getFolders().getById(_folder.getId()).getChildFolders().read().get();
                    Folder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);

                    if(_childFolder == null){
                        throw new Exception("ChildFolder not available. Can't proceed with the test.");
                    }


                    List<Message> _listmessages = client.getMe().getFolders().getById(_folder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
                    Message _message = _listmessages == null? null : _listmessages.get(0);

                    if(_message == null){
                        throw new Exception("Message not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getMe().getFolders().getById(_folder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().getById(_message.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeFoldersChildFoldersMessagesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Folder> _listfolders = client.getMe().getFolders().read().get();
                    Folder _folder = _listfolders == null? null : _listfolders.get(0);

                    if(_folder == null){
                        throw new Exception("Folder not available. Can't proceed with the test.");
                    }


                    List<Folder> _listchildFolders = client.getMe().getFolders().getById(_folder.getId()).getChildFolders().read().get();
                    Folder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);

                    if(_childFolder == null){
                        throw new Exception("ChildFolder not available. Can't proceed with the test.");
                    }


                    List<Message> _listmessages = client.getMe().getFolders().getById(_folder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
                    Message _message = _listmessages == null? null : _listmessages.get(0);

                    if(_message == null){
                        throw new Exception("Message not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getMe().getFolders().getById(_folder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().getById(_message.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeFoldersMessages(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<Folder> _listfolders = client.getMe().getFolders().read().get();
                    Folder _folder = _listfolders == null? null : _listfolders.get(0);

                    if(_folder == null){
                        throw new Exception("Folder not available. Can't proceed with the test.");
                    }

                    List<Message> _messages = client.getMe().getFolders().getById(_folder.getId()).getMessages().read().get();

                    if (_messages != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeFoldersMessages(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Message sampleMessage = getSampleMessage();

                    List<Folder> _listfolders = client.getMe().getFolders().read().get();
                    Folder _folder = _listfolders == null? null : _listfolders.get(0);

                    if(_folder == null){
                        throw new Exception("Folder not available. Can't proceed with the test.");
                    }

                    Message _createdmessage = client.getMe().getFolders().getById(_folder.getId()).getMessages().add(sampleMessage).get();

                    if (_createdmessage != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeFoldersMessagesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<Folder> _listfolders = client.getMe().getFolders().read().get();
                    Folder _folder = _listfolders == null? null : _listfolders.get(0);

                    if(_folder == null){
                        throw new Exception("Folder not available. Can't proceed with the test.");
                    }


                    List<Message> _listmessages = client.getMe().getFolders().getById(_folder.getId()).getMessages().read().get();
                    Message _message = _listmessages == null? null : _listmessages.get(0);

                    if(_message == null){
                        throw new Exception("Message not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getMe().getFolders().getById(_folder.getId()).getMessages().getById(_message.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeFoldersMessagesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Folder> _listfolders = client.getMe().getFolders().read().get();
                    Folder _folder = _listfolders == null? null : _listfolders.get(0);

                    if(_folder == null){
                        throw new Exception("Folder not available. Can't proceed with the test.");
                    }


                    List<Message> _listmessages = client.getMe().getFolders().getById(_folder.getId()).getMessages().read().get();
                    Message _message = _listmessages == null? null : _listmessages.get(0);

                    if(_message == null){
                        throw new Exception("Message not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getMe().getFolders().getById(_folder.getId()).getMessages().getById(_message.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeMessages(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    List<Message> _messages = client.getMe().getMessages().read().get();

                    if (_messages != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeMessages(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Message sampleMessage = getSampleMessage();
                    Message _createdmessage = client.getMe().getMessages().add(sampleMessage).get();

                    if (_createdmessage != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeMessagesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<Message> _listmessages = client.getMe().getMessages().read().get();
                    Message _message = _listmessages == null? null : _listmessages.get(0);

                    if(_message == null){
                        throw new Exception("Message not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getMe().getMessages().getById(_message.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeMessagesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Message> _listmessages = client.getMe().getMessages().read().get();
                    Message _message = _listmessages == null? null : _listmessages.get(0);

                    if(_message == null){
                        throw new Exception("Message not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getMe().getMessages().getById(_message.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeRootFolder(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Folder _rootFolder = client.getMe().getRootFolder().read().get();

                    if (_rootFolder != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeRootFolderChildFolders(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    List<Folder> _childFolders = client.getMe().getRootFolder().getChildFolders().read().get();

                    if (_childFolders != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeRootFolderChildFolders(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Folder sampleFolder = getSampleFolder();
                    Folder _createdchildFolder = client.getMe().getRootFolder().getChildFolders().add(sampleFolder).get();

                    if (_createdchildFolder != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeRootFolderChildFoldersMessages(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<Folder> _listchildFolders = client.getMe().getRootFolder().getChildFolders().read().get();
                    Folder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);

                    if(_childFolder == null){
                        throw new Exception("ChildFolder not available. Can't proceed with the test.");
                    }

                    List<Message> _messages = client.getMe().getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().read().get();

                    if (_messages != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeRootFolderChildFoldersMessages(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Message sampleMessage = getSampleMessage();

                    List<Folder> _listchildFolders = client.getMe().getRootFolder().getChildFolders().read().get();
                    Folder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);

                    if(_childFolder == null){
                        throw new Exception("ChildFolder not available. Can't proceed with the test.");
                    }

                    Message _createdmessage = client.getMe().getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().add(sampleMessage).get();

                    if (_createdmessage != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeRootFolderChildFoldersMessagesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<Folder> _listchildFolders = client.getMe().getRootFolder().getChildFolders().read().get();
                    Folder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);

                    if(_childFolder == null){
                        throw new Exception("ChildFolder not available. Can't proceed with the test.");
                    }


                    List<Message> _listmessages = client.getMe().getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
                    Message _message = _listmessages == null? null : _listmessages.get(0);

                    if(_message == null){
                        throw new Exception("Message not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getMe().getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().getById(_message.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeRootFolderChildFoldersMessagesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Folder> _listchildFolders = client.getMe().getRootFolder().getChildFolders().read().get();
                    Folder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);

                    if(_childFolder == null){
                        throw new Exception("ChildFolder not available. Can't proceed with the test.");
                    }


                    List<Message> _listmessages = client.getMe().getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
                    Message _message = _listmessages == null? null : _listmessages.get(0);

                    if(_message == null){
                        throw new Exception("Message not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getMe().getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().getById(_message.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeRootFolderMessages(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    List<Message> _messages = client.getMe().getRootFolder().getMessages().read().get();

                    if (_messages != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeRootFolderMessages(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Message sampleMessage = getSampleMessage();
                    Message _createdmessage = client.getMe().getRootFolder().getMessages().add(sampleMessage).get();

                    if (_createdmessage != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeRootFolderMessagesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<Message> _listmessages = client.getMe().getRootFolder().getMessages().read().get();
                    Message _message = _listmessages == null? null : _listmessages.get(0);

                    if(_message == null){
                        throw new Exception("Message not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getMe().getRootFolder().getMessages().getById(_message.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeRootFolderMessagesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Message> _listmessages = client.getMe().getRootFolder().getMessages().read().get();
                    Message _message = _listmessages == null? null : _listmessages.get(0);

                    if(_message == null){
                        throw new Exception("Message not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getMe().getRootFolder().getMessages().getById(_message.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeCalendars(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    List<Calendar> _calendars = client.getMe().getCalendars().read().get();

                    if (_calendars != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeCalendars(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Calendar sampleCalendar = getSampleCalendar();
                    Calendar _createdcalendar = client.getMe().getCalendars().add(sampleCalendar).get();

                    if (_createdcalendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeCalendarsCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    List<Event> _calendarView = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();

                    if (_calendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeCalendarsCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Event sampleEvent = getSampleEvent();

                    List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    Event _createdcalendarView = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().add(sampleEvent).get();

                    if (_createdcalendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeCalendarsCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeCalendarsCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeCalendarsCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeCalendarsCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Event sampleEvent = getSampleEvent();

                    List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeCalendarsCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeCalendarsCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeCalendarsEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    List<Event> _events = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().read().get();

                    if (_events != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeCalendarsEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Event sampleEvent = getSampleEvent();

                    List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    Event _createdevent = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().add(sampleEvent).get();

                    if (_createdevent != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeCalendarsEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeCalendarsEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeCalendarsEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeCalendarsEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Event sampleEvent = getSampleEvent();

                    List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeCalendarsEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeCalendarsEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Calendar _calendar = client.getMe().getCalendar().read().get();

                    if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeCalendarCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    List<Event> _calendarView = client.getMe().getCalendar().getCalendarView().read().get();

                    if (_calendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeCalendarCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Event sampleEvent = getSampleEvent();
                    Event _createdcalendarView = client.getMe().getCalendar().getCalendarView().add(sampleEvent).get();

                    if (_createdcalendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeCalendarCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<Event> _listcalendarView = client.getMe().getCalendar().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getMe().getCalendar().getCalendarView().getById(_calendarView.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeCalendarCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Event> _listcalendarView = client.getMe().getCalendar().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getMe().getCalendar().getCalendarView().getById(_calendarView.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeCalendarCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<Event> _listcalendarView = client.getMe().getCalendar().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getMe().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeCalendarCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Event sampleEvent = getSampleEvent();

                    List<Event> _listcalendarView = client.getMe().getCalendar().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getMe().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeCalendarCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<Event> _listcalendarView = client.getMe().getCalendar().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getMe().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getMe().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeCalendarCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Event> _listcalendarView = client.getMe().getCalendar().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getMe().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getMe().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeCalendarEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    List<Event> _events = client.getMe().getCalendar().getEvents().read().get();

                    if (_events != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeCalendarEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Event sampleEvent = getSampleEvent();
                    Event _createdevent = client.getMe().getCalendar().getEvents().add(sampleEvent).get();

                    if (_createdevent != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeCalendarEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<Event> _listevents = client.getMe().getCalendar().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getMe().getCalendar().getEvents().getById(_event.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeCalendarEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Event> _listevents = client.getMe().getCalendar().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getMe().getCalendar().getEvents().getById(_event.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeCalendarEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<Event> _listevents = client.getMe().getCalendar().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getMe().getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeCalendarEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Event sampleEvent = getSampleEvent();

                    List<Event> _listevents = client.getMe().getCalendar().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getMe().getCalendar().getEvents().getById(_event.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeCalendarEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<Event> _listevents = client.getMe().getCalendar().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getMe().getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getMe().getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeCalendarEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Event> _listevents = client.getMe().getCalendar().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getMe().getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getMe().getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeCalendarGroups(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    List<CalendarGroup> _calendarGroups = client.getMe().getCalendarGroups().read().get();

                    if (_calendarGroups != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeCalendarGroups(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    CalendarGroup sampleCalendarGroup = getSampleCalendarGroup();
                    CalendarGroup _createdcalendarGroup = client.getMe().getCalendarGroups().add(sampleCalendarGroup).get();

                    if (_createdcalendarGroup != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeCalendarGroupsCalendars(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }

                    List<Calendar> _calendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();

                    if (_calendars != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeCalendarGroupsCalendars(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Calendar sampleCalendar = getSampleCalendar();

                    List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }

                    Calendar _createdcalendar = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().add(sampleCalendar).get();

                    if (_createdcalendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeCalendarGroupsCalendarsCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    List<Event> _calendarView = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();

                    if (_calendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeCalendarGroupsCalendarsCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Event sampleEvent = getSampleEvent();

                    List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    Event _createdcalendarView = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().add(sampleEvent).get();

                    if (_createdcalendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeCalendarGroupsCalendarsCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeCalendarGroupsCalendarsCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeCalendarGroupsCalendarsCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeCalendarGroupsCalendarsCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Event sampleEvent = getSampleEvent();

                    List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeCalendarGroupsCalendarsCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeCalendarGroupsCalendarsCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listcalendarView = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeCalendarGroupsCalendarsEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    List<Event> _events = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();

                    if (_events != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeCalendarGroupsCalendarsEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Event sampleEvent = getSampleEvent();

                    List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }

                    Event _createdevent = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().add(sampleEvent).get();

                    if (_createdevent != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeCalendarGroupsCalendarsEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeCalendarGroupsCalendarsEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeCalendarGroupsCalendarsEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeCalendarGroupsCalendarsEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Event sampleEvent = getSampleEvent();

                    List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeCalendarGroupsCalendarsEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeCalendarGroupsCalendarsEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
                    CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

                    if(_calendarGroup == null){
                        throw new Exception("CalendarGroup not available. Can't proceed with the test.");
                    }


                    List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
                    Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

                    if(_calendar == null){
                        throw new Exception("Calendar not available. Can't proceed with the test.");
                    }


                    List<Event> _listevents = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    List<Event> _events = client.getMe().getEvents().read().get();

                    if (_events != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeEvents(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Event sampleEvent = getSampleEvent();
                    Event _createdevent = client.getMe().getEvents().add(sampleEvent).get();

                    if (_createdevent != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<Event> _listevents = client.getMe().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getMe().getEvents().getById(_event.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeEventsAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Event> _listevents = client.getMe().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getMe().getEvents().getById(_event.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeEventsCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<Event> _listevents = client.getMe().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Calendar _calendar = client.getMe().getEvents().getById(_event.getId()).getCalendar().read().get();

                    if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<Event> _listevents = client.getMe().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getMe().getEvents().getById(_event.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeEventsInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Event sampleEvent = getSampleEvent();

                    List<Event> _listevents = client.getMe().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getMe().getEvents().getById(_event.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<Event> _listevents = client.getMe().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getMe().getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getMe().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeEventsInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Event> _listevents = client.getMe().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getMe().getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getMe().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeEventsInstancesCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<Event> _listevents = client.getMe().getEvents().read().get();
                    Event _event = _listevents == null? null : _listevents.get(0);

                    if(_event == null){
                        throw new Exception("Event not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getMe().getEvents().getById(_event.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Calendar _calendar = client.getMe().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getCalendar().read().get();

                    if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    List<Event> _calendarView = client.getMe().getCalendarView().read().get();

                    if (_calendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeCalendarView(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Event sampleEvent = getSampleEvent();
                    Event _createdcalendarView = client.getMe().getCalendarView().add(sampleEvent).get();

                    if (_createdcalendarView != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getMe().getCalendarView().getById(_calendarView.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeCalendarViewAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getMe().getCalendarView().getById(_calendarView.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeCalendarViewCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Calendar _calendar = client.getMe().getCalendarView().getById(_calendarView.getId()).getCalendar().read().get();

                    if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    List<Event> _instances = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();

                    if (_instances != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeCalendarViewInstances(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Event sampleEvent = getSampleEvent();

                    List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }

                    Event _createdinstance = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().add(sampleEvent).get();

                    if (_createdinstance != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    List<Attachment> _attachments = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

                    if (_attachments != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeCalendarViewInstancesAttachments(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Attachment sampleAttachment = getSampleAttachment();

                    List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Attachment _createdattachment = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

                    if (_createdattachment != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeCalendarViewInstancesCalendar(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
                    Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

                    if(_calendarView == null){
                        throw new Exception("CalendarView not available. Can't proceed with the test.");
                    }


                    List<Event> _listinstances = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
                    Event _instance = _listinstances == null? null : _listinstances.get(0);

                    if(_instance == null){
                        throw new Exception("Instance not available. Can't proceed with the test.");
                    }

                    Calendar _calendar = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getCalendar().read().get();

                    if (_calendar != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeContacts(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    List<Contact> _contacts = client.getMe().getContacts().read().get();

                    if (_contacts != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeContacts(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Contact sampleContact = getSampleContact();
                    Contact _createdcontact = client.getMe().getContacts().add(sampleContact).get();

                    if (_createdcontact != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeContactFolders(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    List<ContactFolder> _contactFolders = client.getMe().getContactFolders().read().get();

                    if (_contactFolders != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeContactFolders(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    ContactFolder sampleContactFolder = getSampleContactFolder();
                    ContactFolder _createdcontactFolder = client.getMe().getContactFolders().add(sampleContactFolder).get();

                    if (_createdcontactFolder != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeContactFoldersContacts(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<ContactFolder> _listcontactFolders = client.getMe().getContactFolders().read().get();
                    ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);

                    if(_contactFolder == null){
                        throw new Exception("ContactFolder not available. Can't proceed with the test.");
                    }

                    List<Contact> _contacts = client.getMe().getContactFolders().getById(_contactFolder.getId()).getContacts().read().get();

                    if (_contacts != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeContactFoldersContacts(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Contact sampleContact = getSampleContact();

                    List<ContactFolder> _listcontactFolders = client.getMe().getContactFolders().read().get();
                    ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);

                    if(_contactFolder == null){
                        throw new Exception("ContactFolder not available. Can't proceed with the test.");
                    }

                    Contact _createdcontact = client.getMe().getContactFolders().getById(_contactFolder.getId()).getContacts().add(sampleContact).get();

                    if (_createdcontact != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeContactFoldersChildFolders(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<ContactFolder> _listcontactFolders = client.getMe().getContactFolders().read().get();
                    ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);

                    if(_contactFolder == null){
                        throw new Exception("ContactFolder not available. Can't proceed with the test.");
                    }

                    List<ContactFolder> _childFolders = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().read().get();

                    if (_childFolders != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeContactFoldersChildFolders(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    ContactFolder sampleContactFolder = getSampleContactFolder();

                    List<ContactFolder> _listcontactFolders = client.getMe().getContactFolders().read().get();
                    ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);

                    if(_contactFolder == null){
                        throw new Exception("ContactFolder not available. Can't proceed with the test.");
                    }

                    ContactFolder _createdchildFolder = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().add(sampleContactFolder).get();

                    if (_createdchildFolder != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canGetMeContactFoldersChildFoldersContacts(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();


                    List<ContactFolder> _listcontactFolders = client.getMe().getContactFolders().read().get();
                    ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);

                    if(_contactFolder == null){
                        throw new Exception("ContactFolder not available. Can't proceed with the test.");
                    }


                    List<ContactFolder> _listchildFolders = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().read().get();
                    ContactFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);

                    if(_childFolder == null){
                        throw new Exception("ChildFolder not available. Can't proceed with the test.");
                    }

                    List<Contact> _contacts = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getContacts().read().get();

                    if (_contacts != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);
        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }
    private TestCase canCreateMeContactFoldersChildFoldersContacts(String name, TestStatus status) {
        TestCase test = new TestCase() {

            @Override
            public TestResult executeTest() {
                try {
                    TestResult result = new TestResult();
                    result.setStatus(TestStatus.Failed);
                    result.setTestCase(this);

                    OutlookClient client = ApplicationContext.getOutlookClient();

                    Contact sampleContact = getSampleContact();

                    List<ContactFolder> _listcontactFolders = client.getMe().getContactFolders().read().get();
                    ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);

                    if(_contactFolder == null){
                        throw new Exception("ContactFolder not available. Can't proceed with the test.");
                    }


                    List<ContactFolder> _listchildFolders = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().read().get();
                    ContactFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);

                    if(_childFolder == null){
                        throw new Exception("ChildFolder not available. Can't proceed with the test.");
                    }

                    Contact _createdcontact = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getContacts().add(sampleContact).get();

                    if (_createdcontact != null)
                        result.setStatus(TestStatus.Passed);

                    return result;
                } catch (Exception e) {
                    return createResultFromException(e);
                }
            }
        };

        test.setName(name);

        test.setStatus(status);
        test.setEnabled(status == TestStatus.NotRun);
        return test;
    }

    public OutlookClientTests() {
        super("Outlook Tests");
    }

    public OutlookClientTests(List<PropertyFilter> filters, Set<String> notSupportedTests ){
        this();
        mFiller = new ObjectFiller();
        mNotSupportedTests = notSupportedTests;

        for (PropertyFilter pf : filters) {
            mFiller.addPropertyFilter(pf);
        }

        this.addTest(canGetMe("Can get Me", getTestStatus("canGetMe")));
        this.addTest(canGetMeFolders("Can get MeFolders", getTestStatus("canGetMeFolders")));
        this.addTest(canCreateMeFolders("Can create canCreateMeFolders", getTestStatus("canCreateMeFolders")));
        this.addTest(canGetMeFoldersChildFolders("Can get MeFoldersChildFolders", getTestStatus("canGetMeFoldersChildFolders")));
        this.addTest(canCreateMeFoldersChildFolders("Can create canCreateMeFoldersChildFolders", getTestStatus("canCreateMeFoldersChildFolders")));
        this.addTest(canGetMeFoldersChildFoldersMessages("Can get MeFoldersChildFoldersMessages", getTestStatus("canGetMeFoldersChildFoldersMessages")));
        this.addTest(canCreateMeFoldersChildFoldersMessages("Can create canCreateMeFoldersChildFoldersMessages", getTestStatus("canCreateMeFoldersChildFoldersMessages")));
        this.addTest(canGetMeFoldersChildFoldersMessagesAttachments("Can get MeFoldersChildFoldersMessagesAttachments", getTestStatus("canGetMeFoldersChildFoldersMessagesAttachments")));
        this.addTest(canCreateMeFoldersChildFoldersMessagesAttachments("Can create canCreateMeFoldersChildFoldersMessagesAttachments", getTestStatus("canCreateMeFoldersChildFoldersMessagesAttachments")));
        this.addTest(canGetMeFoldersMessages("Can get MeFoldersMessages", getTestStatus("canGetMeFoldersMessages")));
        this.addTest(canCreateMeFoldersMessages("Can create canCreateMeFoldersMessages", getTestStatus("canCreateMeFoldersMessages")));
        this.addTest(canGetMeFoldersMessagesAttachments("Can get MeFoldersMessagesAttachments", getTestStatus("canGetMeFoldersMessagesAttachments")));
        this.addTest(canCreateMeFoldersMessagesAttachments("Can create canCreateMeFoldersMessagesAttachments", getTestStatus("canCreateMeFoldersMessagesAttachments")));
        this.addTest(canGetMeMessages("Can get MeMessages", getTestStatus("canGetMeMessages")));
        this.addTest(canCreateMeMessages("Can create canCreateMeMessages", getTestStatus("canCreateMeMessages")));
        this.addTest(canGetMeMessagesAttachments("Can get MeMessagesAttachments", getTestStatus("canGetMeMessagesAttachments")));
        this.addTest(canCreateMeMessagesAttachments("Can create canCreateMeMessagesAttachments", getTestStatus("canCreateMeMessagesAttachments")));
        this.addTest(canGetMeRootFolder("Can get MeRootFolder", getTestStatus("canGetMeRootFolder")));
        this.addTest(canGetMeRootFolderChildFolders("Can get MeRootFolderChildFolders", getTestStatus("canGetMeRootFolderChildFolders")));
        this.addTest(canCreateMeRootFolderChildFolders("Can create canCreateMeRootFolderChildFolders", getTestStatus("canCreateMeRootFolderChildFolders")));
        this.addTest(canGetMeRootFolderChildFoldersMessages("Can get MeRootFolderChildFoldersMessages", getTestStatus("canGetMeRootFolderChildFoldersMessages")));
        this.addTest(canCreateMeRootFolderChildFoldersMessages("Can create canCreateMeRootFolderChildFoldersMessages", getTestStatus("canCreateMeRootFolderChildFoldersMessages")));
        this.addTest(canGetMeRootFolderChildFoldersMessagesAttachments("Can get MeRootFolderChildFoldersMessagesAttachments", getTestStatus("canGetMeRootFolderChildFoldersMessagesAttachments")));
        this.addTest(canCreateMeRootFolderChildFoldersMessagesAttachments("Can create canCreateMeRootFolderChildFoldersMessagesAttachments", getTestStatus("canCreateMeRootFolderChildFoldersMessagesAttachments")));
        this.addTest(canGetMeRootFolderMessages("Can get MeRootFolderMessages", getTestStatus("canGetMeRootFolderMessages")));
        this.addTest(canCreateMeRootFolderMessages("Can create canCreateMeRootFolderMessages", getTestStatus("canCreateMeRootFolderMessages")));
        this.addTest(canGetMeRootFolderMessagesAttachments("Can get MeRootFolderMessagesAttachments", getTestStatus("canGetMeRootFolderMessagesAttachments")));
        this.addTest(canCreateMeRootFolderMessagesAttachments("Can create canCreateMeRootFolderMessagesAttachments", getTestStatus("canCreateMeRootFolderMessagesAttachments")));
        this.addTest(canGetMeCalendars("Can get MeCalendars", getTestStatus("canGetMeCalendars")));
        this.addTest(canCreateMeCalendars("Can create canCreateMeCalendars", getTestStatus("canCreateMeCalendars")));
        this.addTest(canGetMeCalendarsCalendarView("Can get MeCalendarsCalendarView", getTestStatus("canGetMeCalendarsCalendarView")));
        this.addTest(canCreateMeCalendarsCalendarView("Can create canCreateMeCalendarsCalendarView", getTestStatus("canCreateMeCalendarsCalendarView")));
        this.addTest(canGetMeCalendarsCalendarViewAttachments("Can get MeCalendarsCalendarViewAttachments", getTestStatus("canGetMeCalendarsCalendarViewAttachments")));
        this.addTest(canCreateMeCalendarsCalendarViewAttachments("Can create canCreateMeCalendarsCalendarViewAttachments", getTestStatus("canCreateMeCalendarsCalendarViewAttachments")));
        this.addTest(canGetMeCalendarsCalendarViewInstances("Can get MeCalendarsCalendarViewInstances", getTestStatus("canGetMeCalendarsCalendarViewInstances")));
        this.addTest(canCreateMeCalendarsCalendarViewInstances("Can create canCreateMeCalendarsCalendarViewInstances", getTestStatus("canCreateMeCalendarsCalendarViewInstances")));
        this.addTest(canGetMeCalendarsCalendarViewInstancesAttachments("Can get MeCalendarsCalendarViewInstancesAttachments", getTestStatus("canGetMeCalendarsCalendarViewInstancesAttachments")));
        this.addTest(canCreateMeCalendarsCalendarViewInstancesAttachments("Can create canCreateMeCalendarsCalendarViewInstancesAttachments", getTestStatus("canCreateMeCalendarsCalendarViewInstancesAttachments")));
        this.addTest(canGetMeCalendarsEvents("Can get MeCalendarsEvents", getTestStatus("canGetMeCalendarsEvents")));
        this.addTest(canCreateMeCalendarsEvents("Can create canCreateMeCalendarsEvents", getTestStatus("canCreateMeCalendarsEvents")));
        this.addTest(canGetMeCalendarsEventsAttachments("Can get MeCalendarsEventsAttachments", getTestStatus("canGetMeCalendarsEventsAttachments")));
        this.addTest(canCreateMeCalendarsEventsAttachments("Can create canCreateMeCalendarsEventsAttachments", getTestStatus("canCreateMeCalendarsEventsAttachments")));
        this.addTest(canGetMeCalendarsEventsInstances("Can get MeCalendarsEventsInstances", getTestStatus("canGetMeCalendarsEventsInstances")));
        this.addTest(canCreateMeCalendarsEventsInstances("Can create canCreateMeCalendarsEventsInstances", getTestStatus("canCreateMeCalendarsEventsInstances")));
        this.addTest(canGetMeCalendarsEventsInstancesAttachments("Can get MeCalendarsEventsInstancesAttachments", getTestStatus("canGetMeCalendarsEventsInstancesAttachments")));
        this.addTest(canCreateMeCalendarsEventsInstancesAttachments("Can create canCreateMeCalendarsEventsInstancesAttachments", getTestStatus("canCreateMeCalendarsEventsInstancesAttachments")));
        this.addTest(canGetMeCalendar("Can get MeCalendar", getTestStatus("canGetMeCalendar")));
        this.addTest(canGetMeCalendarCalendarView("Can get MeCalendarCalendarView", getTestStatus("canGetMeCalendarCalendarView")));
        this.addTest(canCreateMeCalendarCalendarView("Can create canCreateMeCalendarCalendarView", getTestStatus("canCreateMeCalendarCalendarView")));
        this.addTest(canGetMeCalendarCalendarViewAttachments("Can get MeCalendarCalendarViewAttachments", getTestStatus("canGetMeCalendarCalendarViewAttachments")));
        this.addTest(canCreateMeCalendarCalendarViewAttachments("Can create canCreateMeCalendarCalendarViewAttachments", getTestStatus("canCreateMeCalendarCalendarViewAttachments")));
        this.addTest(canGetMeCalendarCalendarViewInstances("Can get MeCalendarCalendarViewInstances", getTestStatus("canGetMeCalendarCalendarViewInstances")));
        this.addTest(canCreateMeCalendarCalendarViewInstances("Can create canCreateMeCalendarCalendarViewInstances", getTestStatus("canCreateMeCalendarCalendarViewInstances")));
        this.addTest(canGetMeCalendarCalendarViewInstancesAttachments("Can get MeCalendarCalendarViewInstancesAttachments", getTestStatus("canGetMeCalendarCalendarViewInstancesAttachments")));
        this.addTest(canCreateMeCalendarCalendarViewInstancesAttachments("Can create canCreateMeCalendarCalendarViewInstancesAttachments", getTestStatus("canCreateMeCalendarCalendarViewInstancesAttachments")));
        this.addTest(canGetMeCalendarEvents("Can get MeCalendarEvents", getTestStatus("canGetMeCalendarEvents")));
        this.addTest(canCreateMeCalendarEvents("Can create canCreateMeCalendarEvents", getTestStatus("canCreateMeCalendarEvents")));
        this.addTest(canGetMeCalendarEventsAttachments("Can get MeCalendarEventsAttachments", getTestStatus("canGetMeCalendarEventsAttachments")));
        this.addTest(canCreateMeCalendarEventsAttachments("Can create canCreateMeCalendarEventsAttachments", getTestStatus("canCreateMeCalendarEventsAttachments")));
        this.addTest(canGetMeCalendarEventsInstances("Can get MeCalendarEventsInstances", getTestStatus("canGetMeCalendarEventsInstances")));
        this.addTest(canCreateMeCalendarEventsInstances("Can create canCreateMeCalendarEventsInstances", getTestStatus("canCreateMeCalendarEventsInstances")));
        this.addTest(canGetMeCalendarEventsInstancesAttachments("Can get MeCalendarEventsInstancesAttachments", getTestStatus("canGetMeCalendarEventsInstancesAttachments")));
        this.addTest(canCreateMeCalendarEventsInstancesAttachments("Can create canCreateMeCalendarEventsInstancesAttachments", getTestStatus("canCreateMeCalendarEventsInstancesAttachments")));
        this.addTest(canGetMeCalendarGroups("Can get MeCalendarGroups", getTestStatus("canGetMeCalendarGroups")));
        this.addTest(canCreateMeCalendarGroups("Can create canCreateMeCalendarGroups", getTestStatus("canCreateMeCalendarGroups")));
        this.addTest(canGetMeCalendarGroupsCalendars("Can get MeCalendarGroupsCalendars", getTestStatus("canGetMeCalendarGroupsCalendars")));
        this.addTest(canCreateMeCalendarGroupsCalendars("Can create canCreateMeCalendarGroupsCalendars", getTestStatus("canCreateMeCalendarGroupsCalendars")));
        this.addTest(canGetMeCalendarGroupsCalendarsCalendarView("Can get MeCalendarGroupsCalendarsCalendarView", getTestStatus("canGetMeCalendarGroupsCalendarsCalendarView")));
        this.addTest(canCreateMeCalendarGroupsCalendarsCalendarView("Can create canCreateMeCalendarGroupsCalendarsCalendarView", getTestStatus("canCreateMeCalendarGroupsCalendarsCalendarView")));
        this.addTest(canGetMeCalendarGroupsCalendarsCalendarViewAttachments("Can get MeCalendarGroupsCalendarsCalendarViewAttachments", getTestStatus("canGetMeCalendarGroupsCalendarsCalendarViewAttachments")));
        this.addTest(canCreateMeCalendarGroupsCalendarsCalendarViewAttachments("Can create canCreateMeCalendarGroupsCalendarsCalendarViewAttachments", getTestStatus("canCreateMeCalendarGroupsCalendarsCalendarViewAttachments")));
        this.addTest(canGetMeCalendarGroupsCalendarsCalendarViewInstances("Can get MeCalendarGroupsCalendarsCalendarViewInstances", getTestStatus("canGetMeCalendarGroupsCalendarsCalendarViewInstances")));
        this.addTest(canCreateMeCalendarGroupsCalendarsCalendarViewInstances("Can create canCreateMeCalendarGroupsCalendarsCalendarViewInstances", getTestStatus("canCreateMeCalendarGroupsCalendarsCalendarViewInstances")));
        this.addTest(canGetMeCalendarGroupsCalendarsCalendarViewInstancesAttachments("Can get MeCalendarGroupsCalendarsCalendarViewInstancesAttachments", getTestStatus("canGetMeCalendarGroupsCalendarsCalendarViewInstancesAttachments")));
        this.addTest(canCreateMeCalendarGroupsCalendarsCalendarViewInstancesAttachments("Can create canCreateMeCalendarGroupsCalendarsCalendarViewInstancesAttachments", getTestStatus("canCreateMeCalendarGroupsCalendarsCalendarViewInstancesAttachments")));
        this.addTest(canGetMeCalendarGroupsCalendarsEvents("Can get MeCalendarGroupsCalendarsEvents", getTestStatus("canGetMeCalendarGroupsCalendarsEvents")));
        this.addTest(canCreateMeCalendarGroupsCalendarsEvents("Can create canCreateMeCalendarGroupsCalendarsEvents", getTestStatus("canCreateMeCalendarGroupsCalendarsEvents")));
        this.addTest(canGetMeCalendarGroupsCalendarsEventsAttachments("Can get MeCalendarGroupsCalendarsEventsAttachments", getTestStatus("canGetMeCalendarGroupsCalendarsEventsAttachments")));
        this.addTest(canCreateMeCalendarGroupsCalendarsEventsAttachments("Can create canCreateMeCalendarGroupsCalendarsEventsAttachments", getTestStatus("canCreateMeCalendarGroupsCalendarsEventsAttachments")));
        this.addTest(canGetMeCalendarGroupsCalendarsEventsInstances("Can get MeCalendarGroupsCalendarsEventsInstances", getTestStatus("canGetMeCalendarGroupsCalendarsEventsInstances")));
        this.addTest(canCreateMeCalendarGroupsCalendarsEventsInstances("Can create canCreateMeCalendarGroupsCalendarsEventsInstances", getTestStatus("canCreateMeCalendarGroupsCalendarsEventsInstances")));
        this.addTest(canGetMeCalendarGroupsCalendarsEventsInstancesAttachments("Can get MeCalendarGroupsCalendarsEventsInstancesAttachments", getTestStatus("canGetMeCalendarGroupsCalendarsEventsInstancesAttachments")));
        this.addTest(canCreateMeCalendarGroupsCalendarsEventsInstancesAttachments("Can create canCreateMeCalendarGroupsCalendarsEventsInstancesAttachments", getTestStatus("canCreateMeCalendarGroupsCalendarsEventsInstancesAttachments")));
        this.addTest(canGetMeEvents("Can get MeEvents", getTestStatus("canGetMeEvents")));
        this.addTest(canCreateMeEvents("Can create canCreateMeEvents", getTestStatus("canCreateMeEvents")));
        this.addTest(canGetMeEventsAttachments("Can get MeEventsAttachments", getTestStatus("canGetMeEventsAttachments")));
        this.addTest(canCreateMeEventsAttachments("Can create canCreateMeEventsAttachments", getTestStatus("canCreateMeEventsAttachments")));
        this.addTest(canGetMeEventsCalendar("Can get MeEventsCalendar", getTestStatus("canGetMeEventsCalendar")));
        this.addTest(canGetMeEventsInstances("Can get MeEventsInstances", getTestStatus("canGetMeEventsInstances")));
        this.addTest(canCreateMeEventsInstances("Can create canCreateMeEventsInstances", getTestStatus("canCreateMeEventsInstances")));
        this.addTest(canGetMeEventsInstancesAttachments("Can get MeEventsInstancesAttachments", getTestStatus("canGetMeEventsInstancesAttachments")));
        this.addTest(canCreateMeEventsInstancesAttachments("Can create canCreateMeEventsInstancesAttachments", getTestStatus("canCreateMeEventsInstancesAttachments")));
        this.addTest(canGetMeEventsInstancesCalendar("Can get MeEventsInstancesCalendar", getTestStatus("canGetMeEventsInstancesCalendar")));
        this.addTest(canGetMeCalendarView("Can get MeCalendarView", getTestStatus("canGetMeCalendarView")));
        this.addTest(canCreateMeCalendarView("Can create canCreateMeCalendarView", getTestStatus("canCreateMeCalendarView")));
        this.addTest(canGetMeCalendarViewAttachments("Can get MeCalendarViewAttachments", getTestStatus("canGetMeCalendarViewAttachments")));
        this.addTest(canCreateMeCalendarViewAttachments("Can create canCreateMeCalendarViewAttachments", getTestStatus("canCreateMeCalendarViewAttachments")));
        this.addTest(canGetMeCalendarViewCalendar("Can get MeCalendarViewCalendar", getTestStatus("canGetMeCalendarViewCalendar")));
        this.addTest(canGetMeCalendarViewInstances("Can get MeCalendarViewInstances", getTestStatus("canGetMeCalendarViewInstances")));
        this.addTest(canCreateMeCalendarViewInstances("Can create canCreateMeCalendarViewInstances", getTestStatus("canCreateMeCalendarViewInstances")));
        this.addTest(canGetMeCalendarViewInstancesAttachments("Can get MeCalendarViewInstancesAttachments", getTestStatus("canGetMeCalendarViewInstancesAttachments")));
        this.addTest(canCreateMeCalendarViewInstancesAttachments("Can create canCreateMeCalendarViewInstancesAttachments", getTestStatus("canCreateMeCalendarViewInstancesAttachments")));
        this.addTest(canGetMeCalendarViewInstancesCalendar("Can get MeCalendarViewInstancesCalendar", getTestStatus("canGetMeCalendarViewInstancesCalendar")));
        this.addTest(canGetMeContacts("Can get MeContacts", getTestStatus("canGetMeContacts")));
        this.addTest(canCreateMeContacts("Can create canCreateMeContacts", getTestStatus("canCreateMeContacts")));
        this.addTest(canGetMeContactFolders("Can get MeContactFolders", getTestStatus("canGetMeContactFolders")));
        this.addTest(canCreateMeContactFolders("Can create canCreateMeContactFolders", getTestStatus("canCreateMeContactFolders")));
        this.addTest(canGetMeContactFoldersContacts("Can get MeContactFoldersContacts", getTestStatus("canGetMeContactFoldersContacts")));
        this.addTest(canCreateMeContactFoldersContacts("Can create canCreateMeContactFoldersContacts", getTestStatus("canCreateMeContactFoldersContacts")));
        this.addTest(canGetMeContactFoldersChildFolders("Can get MeContactFoldersChildFolders", getTestStatus("canGetMeContactFoldersChildFolders")));
        this.addTest(canCreateMeContactFoldersChildFolders("Can create canCreateMeContactFoldersChildFolders", getTestStatus("canCreateMeContactFoldersChildFolders")));
        this.addTest(canGetMeContactFoldersChildFoldersContacts("Can get MeContactFoldersChildFoldersContacts", getTestStatus("canGetMeContactFoldersChildFoldersContacts")));
        this.addTest(canCreateMeContactFoldersChildFoldersContacts("Can create canCreateMeContactFoldersChildFoldersContacts", getTestStatus("canCreateMeContactFoldersChildFoldersContacts")));
    }

    private TestStatus getTestStatus(String name){
        return mNotSupportedTests.contains(name) ? TestStatus.NotSupported : TestStatus.NotRun;
    }
    private Folder getSampleFolder() throws InstantiationException, IllegalAccessException{
        Folder sampleFolder = new Folder();

        mFiller.fill(sampleFolder);
        if(sampleFolder == null) {
            throw new IllegalArgumentException("Couldn't fill sample Folder with default values");
        }

        return sampleFolder;
    }

    private Message getSampleMessage() throws InstantiationException, IllegalAccessException{
        Message sampleMessage = new Message();

        mFiller.fill(sampleMessage);
        if(sampleMessage == null) {
            throw new IllegalArgumentException("Couldn't fill sample Message with default values");
        }

        return sampleMessage;
    }

    private FileAttachment getSampleAttachment() throws InstantiationException, IllegalAccessException{
        FileAttachment sampleFileAttachment = new FileAttachment();

        mFiller.fill(sampleFileAttachment);
        if(sampleFileAttachment == null) {
            throw new IllegalArgumentException("Couldn't fill sample FileAttachment with default values");
        }

        return sampleFileAttachment;
    }

    private Calendar getSampleCalendar() throws InstantiationException, IllegalAccessException{
        Calendar sampleCalendar = new Calendar();

        mFiller.fill(sampleCalendar);
        if(sampleCalendar == null) {
            throw new IllegalArgumentException("Couldn't fill sample Calendar with default values");
        }

        return sampleCalendar;
    }

    private Event getSampleEvent() throws InstantiationException, IllegalAccessException{
        Event sampleEvent = new Event();

        mFiller.fill(sampleEvent);
        if(sampleEvent == null) {
            throw new IllegalArgumentException("Couldn't fill sample Event with default values");
        }

        return sampleEvent;
    }

    private CalendarGroup getSampleCalendarGroup() throws InstantiationException, IllegalAccessException{
        CalendarGroup sampleCalendarGroup = new CalendarGroup();

        mFiller.fill(sampleCalendarGroup);
        if(sampleCalendarGroup == null) {
            throw new IllegalArgumentException("Couldn't fill sample CalendarGroup with default values");
        }

        return sampleCalendarGroup;
    }

    private Contact getSampleContact() throws InstantiationException, IllegalAccessException{
        Contact sampleContact = new Contact();

        mFiller.fill(sampleContact);
        if(sampleContact == null) {
            throw new IllegalArgumentException("Couldn't fill sample Contact with default values");
        }

        return sampleContact;
    }

    private ContactFolder getSampleContactFolder() throws InstantiationException, IllegalAccessException{
        ContactFolder sampleContactFolder = new ContactFolder();

        mFiller.fill(sampleContactFolder);
        if(sampleContactFolder == null) {
            throw new IllegalArgumentException("Couldn't fill sample ContactFolder with default values");
        }

        return sampleContactFolder;
    }

}