

/*******************************************************************************
 **NOTE** This code was generated by a tool and will occasionally be
 overwritten. We welcome comments and issues regarding this code; they will be
 addressed in the generation tool. If you wish to submit pull requests, please
 do so for the templates in that tool.

 This code was generated by Vipr (https://github.com/microsoft/vipr) using
 the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

 Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
 Licensed under the Apache License 2.0; see LICENSE in the source repository
 root for authoritative license information.ï»¿
 ******************************************************************************/

package microsoft.com.unittests;

import com.microsoft.aad.adal4j.AuthenticationResult;
import com.microsoft.services.orc.auth.AuthenticationCredentials;
import com.microsoft.services.orc.core.DependencyResolver;
import com.microsoft.services.orc.http.Credentials;
import com.microsoft.services.orc.http.impl.*;
import com.microsoft.services.orc.serialization.impl.*;
import com.microsoft.services.outlook.*;
import com.microsoft.services.outlook.fetchers.*;


import java.util.List;
import java.util.Set;
import java.util.concurrent.ExecutionException;

import org.junit.BeforeClass;
import org.junit.Test;

import microsoft.com.unittests.Constants;
import microsoft.com.unittests.LoginHelper;
import static org.junit.Assert.*;

/**
 * The type OutlookClientTests.
 */
public class OutlookClientUnitTests {

    protected static OutlookClient client;

    @BeforeClass
    public static void setUp() throws Exception {
        final AuthenticationResult result = LoginHelper.getAccessTokenFromUserCredentials(Constants.OUTLOOK_RESOURCE, Constants.USER, Constants.PASSWORD);
        DependencyResolver dependencyResolver = new DependencyResolver.Builder(
                new OkHttpTransport(), new GsonSerializer(),
                new AuthenticationCredentials() {
                    @Override
                    public Credentials getCredentials() {
                        return new OAuthCredentials(result.getAccessToken());
                    }
                }).build();

        client = new OutlookClient(Constants.OUTLOOK_ENDPOINT, dependencyResolver);
    }
    @Test
    public void canGetMe() throws Exception {

        User _me = client.getMe().read().get();

        assertNotNull(_me);
    }
    @Test
    public void canGetMeFolders() throws Exception {

        List<Folder> _folders = client.getMe().getFolders().read().get();

        assertNotNull(_folders);
    }
    @Test
    public void canCreateMeFolders() throws Exception {

        Folder sampleFolder = getSampleFolder();
        Folder _createdfolder = client.getMe().getFolders().add(sampleFolder).get();

        assertNotNull(_createdfolder);
    }
    @Test
    public void canGetMeFoldersChildFolders() throws Exception {


        List<Folder> _listfolders = client.getMe().getFolders().read().get();
        Folder _folder = _listfolders == null? null : _listfolders.get(0);

        if(_folder == null){
            throw new Exception("Folder not available. Can't proceed with the test.");
        }

        List<Folder> _childFolders = client.getMe().getFolders().getById(_folder.getId()).getChildFolders().read().get();

        assertNotNull(_childFolders);
    }
    @Test
    public void canCreateMeFoldersChildFolders() throws Exception {

        Folder sampleFolder = getSampleFolder();

        List<Folder> _listfolders = client.getMe().getFolders().read().get();
        Folder _folder = _listfolders == null? null : _listfolders.get(0);

        if(_folder == null){
            throw new Exception("Folder not available. Can't proceed with the test.");
        }

        Folder _createdchildFolder = client.getMe().getFolders().getById(_folder.getId()).getChildFolders().add(sampleFolder).get();

        assertNotNull(_createdchildFolder);
    }
    @Test
    public void canGetMeFoldersChildFoldersMessages() throws Exception {


        List<Folder> _listfolders = client.getMe().getFolders().read().get();
        Folder _folder = _listfolders == null? null : _listfolders.get(0);

        if(_folder == null){
            throw new Exception("Folder not available. Can't proceed with the test.");
        }


        List<Folder> _listchildFolders = client.getMe().getFolders().getById(_folder.getId()).getChildFolders().read().get();
        Folder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);

        if(_childFolder == null){
            throw new Exception("ChildFolder not available. Can't proceed with the test.");
        }

        List<Message> _messages = client.getMe().getFolders().getById(_folder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().read().get();

        assertNotNull(_messages);
    }
    @Test
    public void canCreateMeFoldersChildFoldersMessages() throws Exception {

        Message sampleMessage = getSampleMessage();

        List<Folder> _listfolders = client.getMe().getFolders().read().get();
        Folder _folder = _listfolders == null? null : _listfolders.get(0);

        if(_folder == null){
            throw new Exception("Folder not available. Can't proceed with the test.");
        }


        List<Folder> _listchildFolders = client.getMe().getFolders().getById(_folder.getId()).getChildFolders().read().get();
        Folder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);

        if(_childFolder == null){
            throw new Exception("ChildFolder not available. Can't proceed with the test.");
        }

        Message _createdmessage = client.getMe().getFolders().getById(_folder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().add(sampleMessage).get();

        assertNotNull(_createdmessage);
    }
    @Test
    public void canGetMeFoldersChildFoldersMessagesAttachments() throws Exception {


        List<Folder> _listfolders = client.getMe().getFolders().read().get();
        Folder _folder = _listfolders == null? null : _listfolders.get(0);

        if(_folder == null){
            throw new Exception("Folder not available. Can't proceed with the test.");
        }


        List<Folder> _listchildFolders = client.getMe().getFolders().getById(_folder.getId()).getChildFolders().read().get();
        Folder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);

        if(_childFolder == null){
            throw new Exception("ChildFolder not available. Can't proceed with the test.");
        }


        List<Message> _listmessages = client.getMe().getFolders().getById(_folder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
        Message _message = _listmessages == null? null : _listmessages.get(0);

        if(_message == null){
            throw new Exception("Message not available. Can't proceed with the test.");
        }

        List<Attachment> _attachments = client.getMe().getFolders().getById(_folder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().getById(_message.getId()).getAttachments().read().get();

        assertNotNull(_attachments);
    }
    @Test
    public void canCreateMeFoldersChildFoldersMessagesAttachments() throws Exception {

        Attachment sampleAttachment = getSampleAttachment();

        List<Folder> _listfolders = client.getMe().getFolders().read().get();
        Folder _folder = _listfolders == null? null : _listfolders.get(0);

        if(_folder == null){
            throw new Exception("Folder not available. Can't proceed with the test.");
        }


        List<Folder> _listchildFolders = client.getMe().getFolders().getById(_folder.getId()).getChildFolders().read().get();
        Folder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);

        if(_childFolder == null){
            throw new Exception("ChildFolder not available. Can't proceed with the test.");
        }


        List<Message> _listmessages = client.getMe().getFolders().getById(_folder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
        Message _message = _listmessages == null? null : _listmessages.get(0);

        if(_message == null){
            throw new Exception("Message not available. Can't proceed with the test.");
        }

        Attachment _createdattachment = client.getMe().getFolders().getById(_folder.getId()).getChildFolders().getById(_childFolder.getId()).getMessages().getById(_message.getId()).getAttachments().add(sampleAttachment).get();

        assertNotNull(_createdattachment);
    }
    @Test
    public void canGetMeFoldersMessages() throws Exception {


        List<Folder> _listfolders = client.getMe().getFolders().read().get();
        Folder _folder = _listfolders == null? null : _listfolders.get(0);

        if(_folder == null){
            throw new Exception("Folder not available. Can't proceed with the test.");
        }

        List<Message> _messages = client.getMe().getFolders().getById(_folder.getId()).getMessages().read().get();

        assertNotNull(_messages);
    }
    @Test
    public void canCreateMeFoldersMessages() throws Exception {

        Message sampleMessage = getSampleMessage();

        List<Folder> _listfolders = client.getMe().getFolders().read().get();
        Folder _folder = _listfolders == null? null : _listfolders.get(0);

        if(_folder == null){
            throw new Exception("Folder not available. Can't proceed with the test.");
        }

        Message _createdmessage = client.getMe().getFolders().getById(_folder.getId()).getMessages().add(sampleMessage).get();

        assertNotNull(_createdmessage);
    }
    @Test
    public void canGetMeFoldersMessagesAttachments() throws Exception {


        List<Folder> _listfolders = client.getMe().getFolders().read().get();
        Folder _folder = _listfolders == null? null : _listfolders.get(0);

        if(_folder == null){
            throw new Exception("Folder not available. Can't proceed with the test.");
        }


        List<Message> _listmessages = client.getMe().getFolders().getById(_folder.getId()).getMessages().read().get();
        Message _message = _listmessages == null? null : _listmessages.get(0);

        if(_message == null){
            throw new Exception("Message not available. Can't proceed with the test.");
        }

        List<Attachment> _attachments = client.getMe().getFolders().getById(_folder.getId()).getMessages().getById(_message.getId()).getAttachments().read().get();

        assertNotNull(_attachments);
    }
    @Test
    public void canCreateMeFoldersMessagesAttachments() throws Exception {

        Attachment sampleAttachment = getSampleAttachment();

        List<Folder> _listfolders = client.getMe().getFolders().read().get();
        Folder _folder = _listfolders == null? null : _listfolders.get(0);

        if(_folder == null){
            throw new Exception("Folder not available. Can't proceed with the test.");
        }


        List<Message> _listmessages = client.getMe().getFolders().getById(_folder.getId()).getMessages().read().get();
        Message _message = _listmessages == null? null : _listmessages.get(0);

        if(_message == null){
            throw new Exception("Message not available. Can't proceed with the test.");
        }

        Attachment _createdattachment = client.getMe().getFolders().getById(_folder.getId()).getMessages().getById(_message.getId()).getAttachments().add(sampleAttachment).get();

        assertNotNull(_createdattachment);
    }
    @Test
    public void canGetMeMessages() throws Exception {

        List<Message> _messages = client.getMe().getMessages().read().get();

        assertNotNull(_messages);
    }
    @Test
    public void canCreateMeMessages() throws Exception {

        Message sampleMessage = getSampleMessage();
        Message _createdmessage = client.getMe().getMessages().add(sampleMessage).get();

        assertNotNull(_createdmessage);
    }
    @Test
    public void canGetMeMessagesAttachments() throws Exception {


        List<Message> _listmessages = client.getMe().getMessages().read().get();
        Message _message = _listmessages == null? null : _listmessages.get(0);

        if(_message == null){
            throw new Exception("Message not available. Can't proceed with the test.");
        }

        List<Attachment> _attachments = client.getMe().getMessages().getById(_message.getId()).getAttachments().read().get();

        assertNotNull(_attachments);
    }
    @Test
    public void canCreateMeMessagesAttachments() throws Exception {

        Attachment sampleAttachment = getSampleAttachment();

        List<Message> _listmessages = client.getMe().getMessages().read().get();
        Message _message = _listmessages == null? null : _listmessages.get(0);

        if(_message == null){
            throw new Exception("Message not available. Can't proceed with the test.");
        }

        Attachment _createdattachment = client.getMe().getMessages().getById(_message.getId()).getAttachments().add(sampleAttachment).get();

        assertNotNull(_createdattachment);
    }
    @Test
    public void canGetMeRootFolder() throws Exception {

        Folder _rootFolder = client.getMe().getRootFolder().read().get();

        assertNotNull(_rootFolder);
    }
    @Test
    public void canGetMeRootFolderChildFolders() throws Exception {

        List<Folder> _childFolders = client.getMe().getRootFolder().getChildFolders().read().get();

        assertNotNull(_childFolders);
    }
    @Test
    public void canCreateMeRootFolderChildFolders() throws Exception {

        Folder sampleFolder = getSampleFolder();
        Folder _createdchildFolder = client.getMe().getRootFolder().getChildFolders().add(sampleFolder).get();

        assertNotNull(_createdchildFolder);
    }
    @Test
    public void canGetMeRootFolderChildFoldersMessages() throws Exception {


        List<Folder> _listchildFolders = client.getMe().getRootFolder().getChildFolders().read().get();
        Folder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);

        if(_childFolder == null){
            throw new Exception("ChildFolder not available. Can't proceed with the test.");
        }

        List<Message> _messages = client.getMe().getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().read().get();

        assertNotNull(_messages);
    }
    @Test
    public void canCreateMeRootFolderChildFoldersMessages() throws Exception {

        Message sampleMessage = getSampleMessage();

        List<Folder> _listchildFolders = client.getMe().getRootFolder().getChildFolders().read().get();
        Folder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);

        if(_childFolder == null){
            throw new Exception("ChildFolder not available. Can't proceed with the test.");
        }

        Message _createdmessage = client.getMe().getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().add(sampleMessage).get();

        assertNotNull(_createdmessage);
    }
    @Test
    public void canGetMeRootFolderChildFoldersMessagesAttachments() throws Exception {


        List<Folder> _listchildFolders = client.getMe().getRootFolder().getChildFolders().read().get();
        Folder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);

        if(_childFolder == null){
            throw new Exception("ChildFolder not available. Can't proceed with the test.");
        }


        List<Message> _listmessages = client.getMe().getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
        Message _message = _listmessages == null? null : _listmessages.get(0);

        if(_message == null){
            throw new Exception("Message not available. Can't proceed with the test.");
        }

        List<Attachment> _attachments = client.getMe().getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().getById(_message.getId()).getAttachments().read().get();

        assertNotNull(_attachments);
    }
    @Test
    public void canCreateMeRootFolderChildFoldersMessagesAttachments() throws Exception {

        Attachment sampleAttachment = getSampleAttachment();

        List<Folder> _listchildFolders = client.getMe().getRootFolder().getChildFolders().read().get();
        Folder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);

        if(_childFolder == null){
            throw new Exception("ChildFolder not available. Can't proceed with the test.");
        }


        List<Message> _listmessages = client.getMe().getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().read().get();
        Message _message = _listmessages == null? null : _listmessages.get(0);

        if(_message == null){
            throw new Exception("Message not available. Can't proceed with the test.");
        }

        Attachment _createdattachment = client.getMe().getRootFolder().getChildFolders().getById(_childFolder.getId()).getMessages().getById(_message.getId()).getAttachments().add(sampleAttachment).get();

        assertNotNull(_createdattachment);
    }
    @Test
    public void canGetMeRootFolderMessages() throws Exception {

        List<Message> _messages = client.getMe().getRootFolder().getMessages().read().get();

        assertNotNull(_messages);
    }
    @Test
    public void canCreateMeRootFolderMessages() throws Exception {

        Message sampleMessage = getSampleMessage();
        Message _createdmessage = client.getMe().getRootFolder().getMessages().add(sampleMessage).get();

        assertNotNull(_createdmessage);
    }
    @Test
    public void canGetMeRootFolderMessagesAttachments() throws Exception {


        List<Message> _listmessages = client.getMe().getRootFolder().getMessages().read().get();
        Message _message = _listmessages == null? null : _listmessages.get(0);

        if(_message == null){
            throw new Exception("Message not available. Can't proceed with the test.");
        }

        List<Attachment> _attachments = client.getMe().getRootFolder().getMessages().getById(_message.getId()).getAttachments().read().get();

        assertNotNull(_attachments);
    }
    @Test
    public void canCreateMeRootFolderMessagesAttachments() throws Exception {

        Attachment sampleAttachment = getSampleAttachment();

        List<Message> _listmessages = client.getMe().getRootFolder().getMessages().read().get();
        Message _message = _listmessages == null? null : _listmessages.get(0);

        if(_message == null){
            throw new Exception("Message not available. Can't proceed with the test.");
        }

        Attachment _createdattachment = client.getMe().getRootFolder().getMessages().getById(_message.getId()).getAttachments().add(sampleAttachment).get();

        assertNotNull(_createdattachment);
    }
    @Test
    public void canGetMeCalendars() throws Exception {

        List<Calendar> _calendars = client.getMe().getCalendars().read().get();

        assertNotNull(_calendars);
    }
    @Test
    public void canCreateMeCalendars() throws Exception {

        Calendar sampleCalendar = getSampleCalendar();
        Calendar _createdcalendar = client.getMe().getCalendars().add(sampleCalendar).get();

        assertNotNull(_createdcalendar);
    }
    @Test
    public void canGetMeCalendarsCalendarView() throws Exception {


        List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
        Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

        if(_calendar == null){
            throw new Exception("Calendar not available. Can't proceed with the test.");
        }

        List<Event> _calendarView = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();

        assertNotNull(_calendarView);
    }
    @Test
    public void canCreateMeCalendarsCalendarView() throws Exception {

        Event sampleEvent = getSampleEvent();

        List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
        Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

        if(_calendar == null){
            throw new Exception("Calendar not available. Can't proceed with the test.");
        }

        Event _createdcalendarView = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().add(sampleEvent).get();

        assertNotNull(_createdcalendarView);
    }
    @Test
    public void canGetMeCalendarsCalendarViewAttachments() throws Exception {


        List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
        Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

        if(_calendar == null){
            throw new Exception("Calendar not available. Can't proceed with the test.");
        }


        List<Event> _listcalendarView = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
        Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

        if(_calendarView == null){
            throw new Exception("CalendarView not available. Can't proceed with the test.");
        }

        List<Attachment> _attachments = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().read().get();

        assertNotNull(_attachments);
    }
    @Test
    public void canCreateMeCalendarsCalendarViewAttachments() throws Exception {

        Attachment sampleAttachment = getSampleAttachment();

        List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
        Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

        if(_calendar == null){
            throw new Exception("Calendar not available. Can't proceed with the test.");
        }


        List<Event> _listcalendarView = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
        Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

        if(_calendarView == null){
            throw new Exception("CalendarView not available. Can't proceed with the test.");
        }

        Attachment _createdattachment = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().add(sampleAttachment).get();

        assertNotNull(_createdattachment);
    }
    @Test
    public void canGetMeCalendarsCalendarViewInstances() throws Exception {


        List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
        Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

        if(_calendar == null){
            throw new Exception("Calendar not available. Can't proceed with the test.");
        }


        List<Event> _listcalendarView = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
        Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

        if(_calendarView == null){
            throw new Exception("CalendarView not available. Can't proceed with the test.");
        }

        List<Event> _instances = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();

        assertNotNull(_instances);
    }
    @Test
    public void canCreateMeCalendarsCalendarViewInstances() throws Exception {

        Event sampleEvent = getSampleEvent();

        List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
        Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

        if(_calendar == null){
            throw new Exception("Calendar not available. Can't proceed with the test.");
        }


        List<Event> _listcalendarView = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
        Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

        if(_calendarView == null){
            throw new Exception("CalendarView not available. Can't proceed with the test.");
        }

        Event _createdinstance = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().add(sampleEvent).get();

        assertNotNull(_createdinstance);
    }
    @Test
    public void canGetMeCalendarsCalendarViewInstancesAttachments() throws Exception {


        List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
        Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

        if(_calendar == null){
            throw new Exception("Calendar not available. Can't proceed with the test.");
        }


        List<Event> _listcalendarView = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
        Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

        if(_calendarView == null){
            throw new Exception("CalendarView not available. Can't proceed with the test.");
        }


        List<Event> _listinstances = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
        Event _instance = _listinstances == null? null : _listinstances.get(0);

        if(_instance == null){
            throw new Exception("Instance not available. Can't proceed with the test.");
        }

        List<Attachment> _attachments = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

        assertNotNull(_attachments);
    }
    @Test
    public void canCreateMeCalendarsCalendarViewInstancesAttachments() throws Exception {

        Attachment sampleAttachment = getSampleAttachment();

        List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
        Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

        if(_calendar == null){
            throw new Exception("Calendar not available. Can't proceed with the test.");
        }


        List<Event> _listcalendarView = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
        Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

        if(_calendarView == null){
            throw new Exception("CalendarView not available. Can't proceed with the test.");
        }


        List<Event> _listinstances = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
        Event _instance = _listinstances == null? null : _listinstances.get(0);

        if(_instance == null){
            throw new Exception("Instance not available. Can't proceed with the test.");
        }

        Attachment _createdattachment = client.getMe().getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

        assertNotNull(_createdattachment);
    }
    @Test
    public void canGetMeCalendarsEvents() throws Exception {


        List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
        Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

        if(_calendar == null){
            throw new Exception("Calendar not available. Can't proceed with the test.");
        }

        List<Event> _events = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().read().get();

        assertNotNull(_events);
    }
    @Test
    public void canCreateMeCalendarsEvents() throws Exception {

        Event sampleEvent = getSampleEvent();

        List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
        Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

        if(_calendar == null){
            throw new Exception("Calendar not available. Can't proceed with the test.");
        }

        Event _createdevent = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().add(sampleEvent).get();

        assertNotNull(_createdevent);
    }
    @Test
    public void canGetMeCalendarsEventsAttachments() throws Exception {


        List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
        Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

        if(_calendar == null){
            throw new Exception("Calendar not available. Can't proceed with the test.");
        }


        List<Event> _listevents = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().read().get();
        Event _event = _listevents == null? null : _listevents.get(0);

        if(_event == null){
            throw new Exception("Event not available. Can't proceed with the test.");
        }

        List<Attachment> _attachments = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getAttachments().read().get();

        assertNotNull(_attachments);
    }
    @Test
    public void canCreateMeCalendarsEventsAttachments() throws Exception {

        Attachment sampleAttachment = getSampleAttachment();

        List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
        Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

        if(_calendar == null){
            throw new Exception("Calendar not available. Can't proceed with the test.");
        }


        List<Event> _listevents = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().read().get();
        Event _event = _listevents == null? null : _listevents.get(0);

        if(_event == null){
            throw new Exception("Event not available. Can't proceed with the test.");
        }

        Attachment _createdattachment = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getAttachments().add(sampleAttachment).get();

        assertNotNull(_createdattachment);
    }
    @Test
    public void canGetMeCalendarsEventsInstances() throws Exception {


        List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
        Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

        if(_calendar == null){
            throw new Exception("Calendar not available. Can't proceed with the test.");
        }


        List<Event> _listevents = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().read().get();
        Event _event = _listevents == null? null : _listevents.get(0);

        if(_event == null){
            throw new Exception("Event not available. Can't proceed with the test.");
        }

        List<Event> _instances = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();

        assertNotNull(_instances);
    }
    @Test
    public void canCreateMeCalendarsEventsInstances() throws Exception {

        Event sampleEvent = getSampleEvent();

        List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
        Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

        if(_calendar == null){
            throw new Exception("Calendar not available. Can't proceed with the test.");
        }


        List<Event> _listevents = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().read().get();
        Event _event = _listevents == null? null : _listevents.get(0);

        if(_event == null){
            throw new Exception("Event not available. Can't proceed with the test.");
        }

        Event _createdinstance = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().add(sampleEvent).get();

        assertNotNull(_createdinstance);
    }
    @Test
    public void canGetMeCalendarsEventsInstancesAttachments() throws Exception {


        List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
        Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

        if(_calendar == null){
            throw new Exception("Calendar not available. Can't proceed with the test.");
        }


        List<Event> _listevents = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().read().get();
        Event _event = _listevents == null? null : _listevents.get(0);

        if(_event == null){
            throw new Exception("Event not available. Can't proceed with the test.");
        }


        List<Event> _listinstances = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
        Event _instance = _listinstances == null? null : _listinstances.get(0);

        if(_instance == null){
            throw new Exception("Instance not available. Can't proceed with the test.");
        }

        List<Attachment> _attachments = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

        assertNotNull(_attachments);
    }
    @Test
    public void canCreateMeCalendarsEventsInstancesAttachments() throws Exception {

        Attachment sampleAttachment = getSampleAttachment();

        List<Calendar> _listcalendars = client.getMe().getCalendars().read().get();
        Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

        if(_calendar == null){
            throw new Exception("Calendar not available. Can't proceed with the test.");
        }


        List<Event> _listevents = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().read().get();
        Event _event = _listevents == null? null : _listevents.get(0);

        if(_event == null){
            throw new Exception("Event not available. Can't proceed with the test.");
        }


        List<Event> _listinstances = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
        Event _instance = _listinstances == null? null : _listinstances.get(0);

        if(_instance == null){
            throw new Exception("Instance not available. Can't proceed with the test.");
        }

        Attachment _createdattachment = client.getMe().getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

        assertNotNull(_createdattachment);
    }
    @Test
    public void canGetMeCalendar() throws Exception {

        Calendar _calendar = client.getMe().getCalendar().read().get();

        assertNotNull(_calendar);
    }
    @Test
    public void canGetMeCalendarCalendarView() throws Exception {

        List<Event> _calendarView = client.getMe().getCalendar().getCalendarView().read().get();

        assertNotNull(_calendarView);
    }
    @Test
    public void canCreateMeCalendarCalendarView() throws Exception {

        Event sampleEvent = getSampleEvent();
        Event _createdcalendarView = client.getMe().getCalendar().getCalendarView().add(sampleEvent).get();

        assertNotNull(_createdcalendarView);
    }
    @Test
    public void canGetMeCalendarCalendarViewAttachments() throws Exception {


        List<Event> _listcalendarView = client.getMe().getCalendar().getCalendarView().read().get();
        Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

        if(_calendarView == null){
            throw new Exception("CalendarView not available. Can't proceed with the test.");
        }

        List<Attachment> _attachments = client.getMe().getCalendar().getCalendarView().getById(_calendarView.getId()).getAttachments().read().get();

        assertNotNull(_attachments);
    }
    @Test
    public void canCreateMeCalendarCalendarViewAttachments() throws Exception {

        Attachment sampleAttachment = getSampleAttachment();

        List<Event> _listcalendarView = client.getMe().getCalendar().getCalendarView().read().get();
        Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

        if(_calendarView == null){
            throw new Exception("CalendarView not available. Can't proceed with the test.");
        }

        Attachment _createdattachment = client.getMe().getCalendar().getCalendarView().getById(_calendarView.getId()).getAttachments().add(sampleAttachment).get();

        assertNotNull(_createdattachment);
    }
    @Test
    public void canGetMeCalendarCalendarViewInstances() throws Exception {


        List<Event> _listcalendarView = client.getMe().getCalendar().getCalendarView().read().get();
        Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

        if(_calendarView == null){
            throw new Exception("CalendarView not available. Can't proceed with the test.");
        }

        List<Event> _instances = client.getMe().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();

        assertNotNull(_instances);
    }
    @Test
    public void canCreateMeCalendarCalendarViewInstances() throws Exception {

        Event sampleEvent = getSampleEvent();

        List<Event> _listcalendarView = client.getMe().getCalendar().getCalendarView().read().get();
        Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

        if(_calendarView == null){
            throw new Exception("CalendarView not available. Can't proceed with the test.");
        }

        Event _createdinstance = client.getMe().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().add(sampleEvent).get();

        assertNotNull(_createdinstance);
    }
    @Test
    public void canGetMeCalendarCalendarViewInstancesAttachments() throws Exception {


        List<Event> _listcalendarView = client.getMe().getCalendar().getCalendarView().read().get();
        Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

        if(_calendarView == null){
            throw new Exception("CalendarView not available. Can't proceed with the test.");
        }


        List<Event> _listinstances = client.getMe().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
        Event _instance = _listinstances == null? null : _listinstances.get(0);

        if(_instance == null){
            throw new Exception("Instance not available. Can't proceed with the test.");
        }

        List<Attachment> _attachments = client.getMe().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

        assertNotNull(_attachments);
    }
    @Test
    public void canCreateMeCalendarCalendarViewInstancesAttachments() throws Exception {

        Attachment sampleAttachment = getSampleAttachment();

        List<Event> _listcalendarView = client.getMe().getCalendar().getCalendarView().read().get();
        Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

        if(_calendarView == null){
            throw new Exception("CalendarView not available. Can't proceed with the test.");
        }


        List<Event> _listinstances = client.getMe().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
        Event _instance = _listinstances == null? null : _listinstances.get(0);

        if(_instance == null){
            throw new Exception("Instance not available. Can't proceed with the test.");
        }

        Attachment _createdattachment = client.getMe().getCalendar().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

        assertNotNull(_createdattachment);
    }
    @Test
    public void canGetMeCalendarEvents() throws Exception {

        List<Event> _events = client.getMe().getCalendar().getEvents().read().get();

        assertNotNull(_events);
    }
    @Test
    public void canCreateMeCalendarEvents() throws Exception {

        Event sampleEvent = getSampleEvent();
        Event _createdevent = client.getMe().getCalendar().getEvents().add(sampleEvent).get();

        assertNotNull(_createdevent);
    }
    @Test
    public void canGetMeCalendarEventsAttachments() throws Exception {


        List<Event> _listevents = client.getMe().getCalendar().getEvents().read().get();
        Event _event = _listevents == null? null : _listevents.get(0);

        if(_event == null){
            throw new Exception("Event not available. Can't proceed with the test.");
        }

        List<Attachment> _attachments = client.getMe().getCalendar().getEvents().getById(_event.getId()).getAttachments().read().get();

        assertNotNull(_attachments);
    }
    @Test
    public void canCreateMeCalendarEventsAttachments() throws Exception {

        Attachment sampleAttachment = getSampleAttachment();

        List<Event> _listevents = client.getMe().getCalendar().getEvents().read().get();
        Event _event = _listevents == null? null : _listevents.get(0);

        if(_event == null){
            throw new Exception("Event not available. Can't proceed with the test.");
        }

        Attachment _createdattachment = client.getMe().getCalendar().getEvents().getById(_event.getId()).getAttachments().add(sampleAttachment).get();

        assertNotNull(_createdattachment);
    }
    @Test
    public void canGetMeCalendarEventsInstances() throws Exception {


        List<Event> _listevents = client.getMe().getCalendar().getEvents().read().get();
        Event _event = _listevents == null? null : _listevents.get(0);

        if(_event == null){
            throw new Exception("Event not available. Can't proceed with the test.");
        }

        List<Event> _instances = client.getMe().getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();

        assertNotNull(_instances);
    }
    @Test
    public void canCreateMeCalendarEventsInstances() throws Exception {

        Event sampleEvent = getSampleEvent();

        List<Event> _listevents = client.getMe().getCalendar().getEvents().read().get();
        Event _event = _listevents == null? null : _listevents.get(0);

        if(_event == null){
            throw new Exception("Event not available. Can't proceed with the test.");
        }

        Event _createdinstance = client.getMe().getCalendar().getEvents().getById(_event.getId()).getInstances().add(sampleEvent).get();

        assertNotNull(_createdinstance);
    }
    @Test
    public void canGetMeCalendarEventsInstancesAttachments() throws Exception {


        List<Event> _listevents = client.getMe().getCalendar().getEvents().read().get();
        Event _event = _listevents == null? null : _listevents.get(0);

        if(_event == null){
            throw new Exception("Event not available. Can't proceed with the test.");
        }


        List<Event> _listinstances = client.getMe().getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
        Event _instance = _listinstances == null? null : _listinstances.get(0);

        if(_instance == null){
            throw new Exception("Instance not available. Can't proceed with the test.");
        }

        List<Attachment> _attachments = client.getMe().getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

        assertNotNull(_attachments);
    }
    @Test
    public void canCreateMeCalendarEventsInstancesAttachments() throws Exception {

        Attachment sampleAttachment = getSampleAttachment();

        List<Event> _listevents = client.getMe().getCalendar().getEvents().read().get();
        Event _event = _listevents == null? null : _listevents.get(0);

        if(_event == null){
            throw new Exception("Event not available. Can't proceed with the test.");
        }


        List<Event> _listinstances = client.getMe().getCalendar().getEvents().getById(_event.getId()).getInstances().read().get();
        Event _instance = _listinstances == null? null : _listinstances.get(0);

        if(_instance == null){
            throw new Exception("Instance not available. Can't proceed with the test.");
        }

        Attachment _createdattachment = client.getMe().getCalendar().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

        assertNotNull(_createdattachment);
    }
    @Test
    public void canGetMeCalendarGroups() throws Exception {

        List<CalendarGroup> _calendarGroups = client.getMe().getCalendarGroups().read().get();

        assertNotNull(_calendarGroups);
    }
    @Test
    public void canCreateMeCalendarGroups() throws Exception {

        CalendarGroup sampleCalendarGroup = getSampleCalendarGroup();
        CalendarGroup _createdcalendarGroup = client.getMe().getCalendarGroups().add(sampleCalendarGroup).get();

        assertNotNull(_createdcalendarGroup);
    }
    @Test
    public void canGetMeCalendarGroupsCalendars() throws Exception {


        List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
        CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

        if(_calendarGroup == null){
            throw new Exception("CalendarGroup not available. Can't proceed with the test.");
        }

        List<Calendar> _calendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();

        assertNotNull(_calendars);
    }
    @Test
    public void canCreateMeCalendarGroupsCalendars() throws Exception {

        Calendar sampleCalendar = getSampleCalendar();

        List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
        CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

        if(_calendarGroup == null){
            throw new Exception("CalendarGroup not available. Can't proceed with the test.");
        }

        Calendar _createdcalendar = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().add(sampleCalendar).get();

        assertNotNull(_createdcalendar);
    }
    @Test
    public void canGetMeCalendarGroupsCalendarsCalendarView() throws Exception {


        List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
        CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

        if(_calendarGroup == null){
            throw new Exception("CalendarGroup not available. Can't proceed with the test.");
        }


        List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
        Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

        if(_calendar == null){
            throw new Exception("Calendar not available. Can't proceed with the test.");
        }

        List<Event> _calendarView = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();

        assertNotNull(_calendarView);
    }
    @Test
    public void canCreateMeCalendarGroupsCalendarsCalendarView() throws Exception {

        Event sampleEvent = getSampleEvent();

        List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
        CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

        if(_calendarGroup == null){
            throw new Exception("CalendarGroup not available. Can't proceed with the test.");
        }


        List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
        Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

        if(_calendar == null){
            throw new Exception("Calendar not available. Can't proceed with the test.");
        }

        Event _createdcalendarView = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().add(sampleEvent).get();

        assertNotNull(_createdcalendarView);
    }
    @Test
    public void canGetMeCalendarGroupsCalendarsCalendarViewAttachments() throws Exception {


        List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
        CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

        if(_calendarGroup == null){
            throw new Exception("CalendarGroup not available. Can't proceed with the test.");
        }


        List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
        Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

        if(_calendar == null){
            throw new Exception("Calendar not available. Can't proceed with the test.");
        }


        List<Event> _listcalendarView = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
        Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

        if(_calendarView == null){
            throw new Exception("CalendarView not available. Can't proceed with the test.");
        }

        List<Attachment> _attachments = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().read().get();

        assertNotNull(_attachments);
    }
    @Test
    public void canCreateMeCalendarGroupsCalendarsCalendarViewAttachments() throws Exception {

        Attachment sampleAttachment = getSampleAttachment();

        List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
        CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

        if(_calendarGroup == null){
            throw new Exception("CalendarGroup not available. Can't proceed with the test.");
        }


        List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
        Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

        if(_calendar == null){
            throw new Exception("Calendar not available. Can't proceed with the test.");
        }


        List<Event> _listcalendarView = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
        Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

        if(_calendarView == null){
            throw new Exception("CalendarView not available. Can't proceed with the test.");
        }

        Attachment _createdattachment = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getAttachments().add(sampleAttachment).get();

        assertNotNull(_createdattachment);
    }
    @Test
    public void canGetMeCalendarGroupsCalendarsCalendarViewInstances() throws Exception {


        List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
        CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

        if(_calendarGroup == null){
            throw new Exception("CalendarGroup not available. Can't proceed with the test.");
        }


        List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
        Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

        if(_calendar == null){
            throw new Exception("Calendar not available. Can't proceed with the test.");
        }


        List<Event> _listcalendarView = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
        Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

        if(_calendarView == null){
            throw new Exception("CalendarView not available. Can't proceed with the test.");
        }

        List<Event> _instances = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();

        assertNotNull(_instances);
    }
    @Test
    public void canCreateMeCalendarGroupsCalendarsCalendarViewInstances() throws Exception {

        Event sampleEvent = getSampleEvent();

        List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
        CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

        if(_calendarGroup == null){
            throw new Exception("CalendarGroup not available. Can't proceed with the test.");
        }


        List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
        Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

        if(_calendar == null){
            throw new Exception("Calendar not available. Can't proceed with the test.");
        }


        List<Event> _listcalendarView = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
        Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

        if(_calendarView == null){
            throw new Exception("CalendarView not available. Can't proceed with the test.");
        }

        Event _createdinstance = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().add(sampleEvent).get();

        assertNotNull(_createdinstance);
    }
    @Test
    public void canGetMeCalendarGroupsCalendarsCalendarViewInstancesAttachments() throws Exception {


        List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
        CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

        if(_calendarGroup == null){
            throw new Exception("CalendarGroup not available. Can't proceed with the test.");
        }


        List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
        Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

        if(_calendar == null){
            throw new Exception("Calendar not available. Can't proceed with the test.");
        }


        List<Event> _listcalendarView = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
        Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

        if(_calendarView == null){
            throw new Exception("CalendarView not available. Can't proceed with the test.");
        }


        List<Event> _listinstances = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
        Event _instance = _listinstances == null? null : _listinstances.get(0);

        if(_instance == null){
            throw new Exception("Instance not available. Can't proceed with the test.");
        }

        List<Attachment> _attachments = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

        assertNotNull(_attachments);
    }
    @Test
    public void canCreateMeCalendarGroupsCalendarsCalendarViewInstancesAttachments() throws Exception {

        Attachment sampleAttachment = getSampleAttachment();

        List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
        CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

        if(_calendarGroup == null){
            throw new Exception("CalendarGroup not available. Can't proceed with the test.");
        }


        List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
        Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

        if(_calendar == null){
            throw new Exception("Calendar not available. Can't proceed with the test.");
        }


        List<Event> _listcalendarView = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().read().get();
        Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

        if(_calendarView == null){
            throw new Exception("CalendarView not available. Can't proceed with the test.");
        }


        List<Event> _listinstances = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
        Event _instance = _listinstances == null? null : _listinstances.get(0);

        if(_instance == null){
            throw new Exception("Instance not available. Can't proceed with the test.");
        }

        Attachment _createdattachment = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

        assertNotNull(_createdattachment);
    }
    @Test
    public void canGetMeCalendarGroupsCalendarsEvents() throws Exception {


        List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
        CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

        if(_calendarGroup == null){
            throw new Exception("CalendarGroup not available. Can't proceed with the test.");
        }


        List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
        Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

        if(_calendar == null){
            throw new Exception("Calendar not available. Can't proceed with the test.");
        }

        List<Event> _events = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();

        assertNotNull(_events);
    }
    @Test
    public void canCreateMeCalendarGroupsCalendarsEvents() throws Exception {

        Event sampleEvent = getSampleEvent();

        List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
        CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

        if(_calendarGroup == null){
            throw new Exception("CalendarGroup not available. Can't proceed with the test.");
        }


        List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
        Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

        if(_calendar == null){
            throw new Exception("Calendar not available. Can't proceed with the test.");
        }

        Event _createdevent = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().add(sampleEvent).get();

        assertNotNull(_createdevent);
    }
    @Test
    public void canGetMeCalendarGroupsCalendarsEventsAttachments() throws Exception {


        List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
        CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

        if(_calendarGroup == null){
            throw new Exception("CalendarGroup not available. Can't proceed with the test.");
        }


        List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
        Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

        if(_calendar == null){
            throw new Exception("Calendar not available. Can't proceed with the test.");
        }


        List<Event> _listevents = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
        Event _event = _listevents == null? null : _listevents.get(0);

        if(_event == null){
            throw new Exception("Event not available. Can't proceed with the test.");
        }

        List<Attachment> _attachments = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getAttachments().read().get();

        assertNotNull(_attachments);
    }
    @Test
    public void canCreateMeCalendarGroupsCalendarsEventsAttachments() throws Exception {

        Attachment sampleAttachment = getSampleAttachment();

        List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
        CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

        if(_calendarGroup == null){
            throw new Exception("CalendarGroup not available. Can't proceed with the test.");
        }


        List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
        Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

        if(_calendar == null){
            throw new Exception("Calendar not available. Can't proceed with the test.");
        }


        List<Event> _listevents = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
        Event _event = _listevents == null? null : _listevents.get(0);

        if(_event == null){
            throw new Exception("Event not available. Can't proceed with the test.");
        }

        Attachment _createdattachment = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getAttachments().add(sampleAttachment).get();

        assertNotNull(_createdattachment);
    }
    @Test
    public void canGetMeCalendarGroupsCalendarsEventsInstances() throws Exception {


        List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
        CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

        if(_calendarGroup == null){
            throw new Exception("CalendarGroup not available. Can't proceed with the test.");
        }


        List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
        Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

        if(_calendar == null){
            throw new Exception("Calendar not available. Can't proceed with the test.");
        }


        List<Event> _listevents = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
        Event _event = _listevents == null? null : _listevents.get(0);

        if(_event == null){
            throw new Exception("Event not available. Can't proceed with the test.");
        }

        List<Event> _instances = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();

        assertNotNull(_instances);
    }
    @Test
    public void canCreateMeCalendarGroupsCalendarsEventsInstances() throws Exception {

        Event sampleEvent = getSampleEvent();

        List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
        CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

        if(_calendarGroup == null){
            throw new Exception("CalendarGroup not available. Can't proceed with the test.");
        }


        List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
        Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

        if(_calendar == null){
            throw new Exception("Calendar not available. Can't proceed with the test.");
        }


        List<Event> _listevents = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
        Event _event = _listevents == null? null : _listevents.get(0);

        if(_event == null){
            throw new Exception("Event not available. Can't proceed with the test.");
        }

        Event _createdinstance = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().add(sampleEvent).get();

        assertNotNull(_createdinstance);
    }
    @Test
    public void canGetMeCalendarGroupsCalendarsEventsInstancesAttachments() throws Exception {


        List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
        CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

        if(_calendarGroup == null){
            throw new Exception("CalendarGroup not available. Can't proceed with the test.");
        }


        List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
        Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

        if(_calendar == null){
            throw new Exception("Calendar not available. Can't proceed with the test.");
        }


        List<Event> _listevents = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
        Event _event = _listevents == null? null : _listevents.get(0);

        if(_event == null){
            throw new Exception("Event not available. Can't proceed with the test.");
        }


        List<Event> _listinstances = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
        Event _instance = _listinstances == null? null : _listinstances.get(0);

        if(_instance == null){
            throw new Exception("Instance not available. Can't proceed with the test.");
        }

        List<Attachment> _attachments = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

        assertNotNull(_attachments);
    }
    @Test
    public void canCreateMeCalendarGroupsCalendarsEventsInstancesAttachments() throws Exception {

        Attachment sampleAttachment = getSampleAttachment();

        List<CalendarGroup> _listcalendarGroups = client.getMe().getCalendarGroups().read().get();
        CalendarGroup _calendarGroup = _listcalendarGroups == null? null : _listcalendarGroups.get(0);

        if(_calendarGroup == null){
            throw new Exception("CalendarGroup not available. Can't proceed with the test.");
        }


        List<Calendar> _listcalendars = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().read().get();
        Calendar _calendar = _listcalendars == null? null : _listcalendars.get(0);

        if(_calendar == null){
            throw new Exception("Calendar not available. Can't proceed with the test.");
        }


        List<Event> _listevents = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().read().get();
        Event _event = _listevents == null? null : _listevents.get(0);

        if(_event == null){
            throw new Exception("Event not available. Can't proceed with the test.");
        }


        List<Event> _listinstances = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().read().get();
        Event _instance = _listinstances == null? null : _listinstances.get(0);

        if(_instance == null){
            throw new Exception("Instance not available. Can't proceed with the test.");
        }

        Attachment _createdattachment = client.getMe().getCalendarGroups().getById(_calendarGroup.getId()).getCalendars().getById(_calendar.getId()).getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

        assertNotNull(_createdattachment);
    }
    @Test
    public void canGetMeEvents() throws Exception {

        List<Event> _events = client.getMe().getEvents().read().get();

        assertNotNull(_events);
    }
    @Test
    public void canCreateMeEvents() throws Exception {

        Event sampleEvent = getSampleEvent();
        Event _createdevent = client.getMe().getEvents().add(sampleEvent).get();

        assertNotNull(_createdevent);
    }
    @Test
    public void canGetMeEventsAttachments() throws Exception {


        List<Event> _listevents = client.getMe().getEvents().read().get();
        Event _event = _listevents == null? null : _listevents.get(0);

        if(_event == null){
            throw new Exception("Event not available. Can't proceed with the test.");
        }

        List<Attachment> _attachments = client.getMe().getEvents().getById(_event.getId()).getAttachments().read().get();

        assertNotNull(_attachments);
    }
    @Test
    public void canCreateMeEventsAttachments() throws Exception {

        Attachment sampleAttachment = getSampleAttachment();

        List<Event> _listevents = client.getMe().getEvents().read().get();
        Event _event = _listevents == null? null : _listevents.get(0);

        if(_event == null){
            throw new Exception("Event not available. Can't proceed with the test.");
        }

        Attachment _createdattachment = client.getMe().getEvents().getById(_event.getId()).getAttachments().add(sampleAttachment).get();

        assertNotNull(_createdattachment);
    }
    @Test
    public void canGetMeEventsCalendar() throws Exception {


        List<Event> _listevents = client.getMe().getEvents().read().get();
        Event _event = _listevents == null? null : _listevents.get(0);

        if(_event == null){
            throw new Exception("Event not available. Can't proceed with the test.");
        }

        Calendar _calendar = client.getMe().getEvents().getById(_event.getId()).getCalendar().read().get();

        assertNotNull(_calendar);
    }
    @Test
    public void canGetMeEventsInstances() throws Exception {


        List<Event> _listevents = client.getMe().getEvents().read().get();
        Event _event = _listevents == null? null : _listevents.get(0);

        if(_event == null){
            throw new Exception("Event not available. Can't proceed with the test.");
        }

        List<Event> _instances = client.getMe().getEvents().getById(_event.getId()).getInstances().read().get();

        assertNotNull(_instances);
    }
    @Test
    public void canCreateMeEventsInstances() throws Exception {

        Event sampleEvent = getSampleEvent();

        List<Event> _listevents = client.getMe().getEvents().read().get();
        Event _event = _listevents == null? null : _listevents.get(0);

        if(_event == null){
            throw new Exception("Event not available. Can't proceed with the test.");
        }

        Event _createdinstance = client.getMe().getEvents().getById(_event.getId()).getInstances().add(sampleEvent).get();

        assertNotNull(_createdinstance);
    }
    @Test
    public void canGetMeEventsInstancesAttachments() throws Exception {


        List<Event> _listevents = client.getMe().getEvents().read().get();
        Event _event = _listevents == null? null : _listevents.get(0);

        if(_event == null){
            throw new Exception("Event not available. Can't proceed with the test.");
        }


        List<Event> _listinstances = client.getMe().getEvents().getById(_event.getId()).getInstances().read().get();
        Event _instance = _listinstances == null? null : _listinstances.get(0);

        if(_instance == null){
            throw new Exception("Instance not available. Can't proceed with the test.");
        }

        List<Attachment> _attachments = client.getMe().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

        assertNotNull(_attachments);
    }
    @Test
    public void canCreateMeEventsInstancesAttachments() throws Exception {

        Attachment sampleAttachment = getSampleAttachment();

        List<Event> _listevents = client.getMe().getEvents().read().get();
        Event _event = _listevents == null? null : _listevents.get(0);

        if(_event == null){
            throw new Exception("Event not available. Can't proceed with the test.");
        }


        List<Event> _listinstances = client.getMe().getEvents().getById(_event.getId()).getInstances().read().get();
        Event _instance = _listinstances == null? null : _listinstances.get(0);

        if(_instance == null){
            throw new Exception("Instance not available. Can't proceed with the test.");
        }

        Attachment _createdattachment = client.getMe().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

        assertNotNull(_createdattachment);
    }
    @Test
    public void canGetMeEventsInstancesCalendar() throws Exception {


        List<Event> _listevents = client.getMe().getEvents().read().get();
        Event _event = _listevents == null? null : _listevents.get(0);

        if(_event == null){
            throw new Exception("Event not available. Can't proceed with the test.");
        }


        List<Event> _listinstances = client.getMe().getEvents().getById(_event.getId()).getInstances().read().get();
        Event _instance = _listinstances == null? null : _listinstances.get(0);

        if(_instance == null){
            throw new Exception("Instance not available. Can't proceed with the test.");
        }

        Calendar _calendar = client.getMe().getEvents().getById(_event.getId()).getInstances().getById(_instance.getId()).getCalendar().read().get();

        assertNotNull(_calendar);
    }
    @Test
    public void canGetMeCalendarView() throws Exception {

        List<Event> _calendarView = client.getMe().getCalendarView().read().get();

        assertNotNull(_calendarView);
    }
    @Test
    public void canCreateMeCalendarView() throws Exception {

        Event sampleEvent = getSampleEvent();
        Event _createdcalendarView = client.getMe().getCalendarView().add(sampleEvent).get();

        assertNotNull(_createdcalendarView);
    }
    @Test
    public void canGetMeCalendarViewAttachments() throws Exception {


        List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
        Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

        if(_calendarView == null){
            throw new Exception("CalendarView not available. Can't proceed with the test.");
        }

        List<Attachment> _attachments = client.getMe().getCalendarView().getById(_calendarView.getId()).getAttachments().read().get();

        assertNotNull(_attachments);
    }
    @Test
    public void canCreateMeCalendarViewAttachments() throws Exception {

        Attachment sampleAttachment = getSampleAttachment();

        List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
        Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

        if(_calendarView == null){
            throw new Exception("CalendarView not available. Can't proceed with the test.");
        }

        Attachment _createdattachment = client.getMe().getCalendarView().getById(_calendarView.getId()).getAttachments().add(sampleAttachment).get();

        assertNotNull(_createdattachment);
    }
    @Test
    public void canGetMeCalendarViewCalendar() throws Exception {


        List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
        Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

        if(_calendarView == null){
            throw new Exception("CalendarView not available. Can't proceed with the test.");
        }

        Calendar _calendar = client.getMe().getCalendarView().getById(_calendarView.getId()).getCalendar().read().get();

        assertNotNull(_calendar);
    }
    @Test
    public void canGetMeCalendarViewInstances() throws Exception {


        List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
        Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

        if(_calendarView == null){
            throw new Exception("CalendarView not available. Can't proceed with the test.");
        }

        List<Event> _instances = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();

        assertNotNull(_instances);
    }
    @Test
    public void canCreateMeCalendarViewInstances() throws Exception {

        Event sampleEvent = getSampleEvent();

        List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
        Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

        if(_calendarView == null){
            throw new Exception("CalendarView not available. Can't proceed with the test.");
        }

        Event _createdinstance = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().add(sampleEvent).get();

        assertNotNull(_createdinstance);
    }
    @Test
    public void canGetMeCalendarViewInstancesAttachments() throws Exception {


        List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
        Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

        if(_calendarView == null){
            throw new Exception("CalendarView not available. Can't proceed with the test.");
        }


        List<Event> _listinstances = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
        Event _instance = _listinstances == null? null : _listinstances.get(0);

        if(_instance == null){
            throw new Exception("Instance not available. Can't proceed with the test.");
        }

        List<Attachment> _attachments = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().read().get();

        assertNotNull(_attachments);
    }
    @Test
    public void canCreateMeCalendarViewInstancesAttachments() throws Exception {

        Attachment sampleAttachment = getSampleAttachment();

        List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
        Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

        if(_calendarView == null){
            throw new Exception("CalendarView not available. Can't proceed with the test.");
        }


        List<Event> _listinstances = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
        Event _instance = _listinstances == null? null : _listinstances.get(0);

        if(_instance == null){
            throw new Exception("Instance not available. Can't proceed with the test.");
        }

        Attachment _createdattachment = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getAttachments().add(sampleAttachment).get();

        assertNotNull(_createdattachment);
    }
    @Test
    public void canGetMeCalendarViewInstancesCalendar() throws Exception {


        List<Event> _listcalendarView = client.getMe().getCalendarView().read().get();
        Event _calendarView = _listcalendarView == null? null : _listcalendarView.get(0);

        if(_calendarView == null){
            throw new Exception("CalendarView not available. Can't proceed with the test.");
        }


        List<Event> _listinstances = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().read().get();
        Event _instance = _listinstances == null? null : _listinstances.get(0);

        if(_instance == null){
            throw new Exception("Instance not available. Can't proceed with the test.");
        }

        Calendar _calendar = client.getMe().getCalendarView().getById(_calendarView.getId()).getInstances().getById(_instance.getId()).getCalendar().read().get();

        assertNotNull(_calendar);
    }
    @Test
    public void canGetMeContacts() throws Exception {

        List<Contact> _contacts = client.getMe().getContacts().read().get();

        assertNotNull(_contacts);
    }
    @Test
    public void canCreateMeContacts() throws Exception {

        Contact sampleContact = getSampleContact();
        Contact _createdcontact = client.getMe().getContacts().add(sampleContact).get();

        assertNotNull(_createdcontact);
    }
    @Test
    public void canGetMeContactFolders() throws Exception {

        List<ContactFolder> _contactFolders = client.getMe().getContactFolders().read().get();

        assertNotNull(_contactFolders);
    }
    @Test
    public void canCreateMeContactFolders() throws Exception {

        ContactFolder sampleContactFolder = getSampleContactFolder();
        ContactFolder _createdcontactFolder = client.getMe().getContactFolders().add(sampleContactFolder).get();

        assertNotNull(_createdcontactFolder);
    }
    @Test
    public void canGetMeContactFoldersContacts() throws Exception {


        List<ContactFolder> _listcontactFolders = client.getMe().getContactFolders().read().get();
        ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);

        if(_contactFolder == null){
            throw new Exception("ContactFolder not available. Can't proceed with the test.");
        }

        List<Contact> _contacts = client.getMe().getContactFolders().getById(_contactFolder.getId()).getContacts().read().get();

        assertNotNull(_contacts);
    }
    @Test
    public void canCreateMeContactFoldersContacts() throws Exception {

        Contact sampleContact = getSampleContact();

        List<ContactFolder> _listcontactFolders = client.getMe().getContactFolders().read().get();
        ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);

        if(_contactFolder == null){
            throw new Exception("ContactFolder not available. Can't proceed with the test.");
        }

        Contact _createdcontact = client.getMe().getContactFolders().getById(_contactFolder.getId()).getContacts().add(sampleContact).get();

        assertNotNull(_createdcontact);
    }
    @Test
    public void canGetMeContactFoldersChildFolders() throws Exception {


        List<ContactFolder> _listcontactFolders = client.getMe().getContactFolders().read().get();
        ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);

        if(_contactFolder == null){
            throw new Exception("ContactFolder not available. Can't proceed with the test.");
        }

        List<ContactFolder> _childFolders = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().read().get();

        assertNotNull(_childFolders);
    }
    @Test
    public void canCreateMeContactFoldersChildFolders() throws Exception {

        ContactFolder sampleContactFolder = getSampleContactFolder();

        List<ContactFolder> _listcontactFolders = client.getMe().getContactFolders().read().get();
        ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);

        if(_contactFolder == null){
            throw new Exception("ContactFolder not available. Can't proceed with the test.");
        }

        ContactFolder _createdchildFolder = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().add(sampleContactFolder).get();

        assertNotNull(_createdchildFolder);
    }
    @Test
    public void canGetMeContactFoldersChildFoldersContacts() throws Exception {


        List<ContactFolder> _listcontactFolders = client.getMe().getContactFolders().read().get();
        ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);

        if(_contactFolder == null){
            throw new Exception("ContactFolder not available. Can't proceed with the test.");
        }


        List<ContactFolder> _listchildFolders = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().read().get();
        ContactFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);

        if(_childFolder == null){
            throw new Exception("ChildFolder not available. Can't proceed with the test.");
        }

        List<Contact> _contacts = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getContacts().read().get();

        assertNotNull(_contacts);
    }
    @Test
    public void canCreateMeContactFoldersChildFoldersContacts() throws Exception {

        Contact sampleContact = getSampleContact();

        List<ContactFolder> _listcontactFolders = client.getMe().getContactFolders().read().get();
        ContactFolder _contactFolder = _listcontactFolders == null? null : _listcontactFolders.get(0);

        if(_contactFolder == null){
            throw new Exception("ContactFolder not available. Can't proceed with the test.");
        }


        List<ContactFolder> _listchildFolders = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().read().get();
        ContactFolder _childFolder = _listchildFolders == null? null : _listchildFolders.get(0);

        if(_childFolder == null){
            throw new Exception("ChildFolder not available. Can't proceed with the test.");
        }

        Contact _createdcontact = client.getMe().getContactFolders().getById(_contactFolder.getId()).getChildFolders().getById(_childFolder.getId()).getContacts().add(sampleContact).get();

        assertNotNull(_createdcontact);
    }
    private Folder getSampleFolder() throws InstantiationException, IllegalAccessException{
        Folder sampleFolder = new Folder();

        if(sampleFolder == null) {
            throw new IllegalArgumentException("Couldn't fill sample Folder with default values");
        }

        return sampleFolder;
    }

    private Message getSampleMessage() throws InstantiationException, IllegalAccessException{
        Message sampleMessage = new Message();

        if(sampleMessage == null) {
            throw new IllegalArgumentException("Couldn't fill sample Message with default values");
        }

        return sampleMessage;
    }

    private FileAttachment getSampleAttachment() throws InstantiationException, IllegalAccessException{
        FileAttachment sampleFileAttachment = new FileAttachment();

        if(sampleFileAttachment == null) {
            throw new IllegalArgumentException("Couldn't fill sample FileAttachment with default values");
        }

        return sampleFileAttachment;
    }

    private Calendar getSampleCalendar() throws InstantiationException, IllegalAccessException{
        Calendar sampleCalendar = new Calendar();

        if(sampleCalendar == null) {
            throw new IllegalArgumentException("Couldn't fill sample Calendar with default values");
        }

        return sampleCalendar;
    }

    private Event getSampleEvent() throws InstantiationException, IllegalAccessException{
        Event sampleEvent = new Event();

        if(sampleEvent == null) {
            throw new IllegalArgumentException("Couldn't fill sample Event with default values");
        }

        return sampleEvent;
    }

    private CalendarGroup getSampleCalendarGroup() throws InstantiationException, IllegalAccessException{
        CalendarGroup sampleCalendarGroup = new CalendarGroup();

        if(sampleCalendarGroup == null) {
            throw new IllegalArgumentException("Couldn't fill sample CalendarGroup with default values");
        }

        return sampleCalendarGroup;
    }

    private Contact getSampleContact() throws InstantiationException, IllegalAccessException{
        Contact sampleContact = new Contact();

        if(sampleContact == null) {
            throw new IllegalArgumentException("Couldn't fill sample Contact with default values");
        }

        return sampleContact;
    }

    private ContactFolder getSampleContactFolder() throws InstantiationException, IllegalAccessException{
        ContactFolder sampleContactFolder = new ContactFolder();

        if(sampleContactFolder == null) {
            throw new IllegalArgumentException("Couldn't fill sample ContactFolder with default values");
        }

        return sampleContactFolder;
    }

}