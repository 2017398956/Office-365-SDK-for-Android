/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/
package com.microsoft.services.outlook.fetchers;

import com.microsoft.services.outlook.*;
import com.google.common.util.concurrent.*;
import com.microsoft.services.orc.core.*;
import com.microsoft.services.orc.core.Readable;

/**
 * The type  InferenceClassification
 */
public class InferenceClassificationFetcher extends OrcEntityFetcher<InferenceClassification,InferenceClassificationOperations> 
                                     implements Readable<InferenceClassification> {

     /**
     * Instantiates a new InferenceClassificationFetcher.
     *
     * @param urlComponent the url component
     * @param parent the parent
     */
     public InferenceClassificationFetcher(String urlComponent, OrcExecutable parent) {
        super(urlComponent, parent, InferenceClassification.class, InferenceClassificationOperations.class);
    }

     /**
     * Add parameter.
     *
     * @param name the name
     * @param value the value
     * @return the fetcher
     */
    public InferenceClassificationFetcher addParameter(String name, Object value) {
        addCustomParameter(name, value);
        return this;
    }
	
	/**
     * Add header.
     *
     * @param name the name
     * @param value the value
     * @return the fetcher
     */
    public InferenceClassificationFetcher addHeader(String name, String value) {
        addCustomHeader(name, value);
        return this;
    }

    
    
    
     /**
     * Gets overrides.
     *
     * @return the overrides
     */
    public OrcCollectionFetcher<InferenceClassificationOverride, InferenceClassificationOverrideFetcher, InferenceClassificationOverrideCollectionOperations> getOverrides() {
        return new OrcCollectionFetcher<InferenceClassificationOverride, InferenceClassificationOverrideFetcher, InferenceClassificationOverrideCollectionOperations>("Overrides", this, InferenceClassificationOverride.class, InferenceClassificationOverrideCollectionOperations.class);
    }

    /**
     * Gets override.
     *
     * @return the override
     */
    public InferenceClassificationOverrideFetcher getOverride(String id){
         return new OrcCollectionFetcher<InferenceClassificationOverride, InferenceClassificationOverrideFetcher, InferenceClassificationOverrideCollectionOperations>("Overrides", this, InferenceClassificationOverride.class, InferenceClassificationOverrideCollectionOperations.class).getById(id);
    }

}
