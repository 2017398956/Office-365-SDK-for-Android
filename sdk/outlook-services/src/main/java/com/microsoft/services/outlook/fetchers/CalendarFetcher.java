/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/
package com.microsoft.services.outlook.fetchers;

import com.microsoft.services.outlook.*;
import com.google.common.util.concurrent.*;
import com.microsoft.services.orc.core.*;
import com.microsoft.services.orc.core.Readable;

/**
 * The type  Calendar
 */
public class CalendarFetcher extends OrcEntityFetcher<Calendar,CalendarOperations> 
                                     implements Readable<Calendar> {

     /**
     * Instantiates a new CalendarFetcher.
     *
     * @param urlComponent the url component
     * @param parent the parent
     */
     public CalendarFetcher(String urlComponent, OrcExecutable parent) {
        super(urlComponent, parent, Calendar.class, CalendarOperations.class);
    }

     /**
     * Add parameter.
     *
     * @param name the name
     * @param value the value
     * @return the fetcher
     */
    public CalendarFetcher addParameter(String name, Object value) {
        addCustomParameter(name, value);
        return this;
    }
	
	/**
     * Add header.
     *
     * @param name the name
     * @param value the value
     * @return the fetcher
     */
    public CalendarFetcher addHeader(String name, String value) {
        addCustomHeader(name, value);
        return this;
    }

    
    
    
     /**
     * Gets events.
     *
     * @return the events
     */
    public OrcCollectionFetcher<Event, EventFetcher, EventCollectionOperations> getEvents() {
        return new OrcCollectionFetcher<Event, EventFetcher, EventCollectionOperations>("Events", this, Event.class, EventCollectionOperations.class);
    }

    /**
     * Gets event.
     *
     * @return the event
     */
    public EventFetcher getEvent(String id){
         return new OrcCollectionFetcher<Event, EventFetcher, EventCollectionOperations>("Events", this, Event.class, EventCollectionOperations.class).getById(id);
    }

     /**
     * Gets calendar view.
     *
     * @return the calendar view
     */
    public OrcCollectionFetcher<Event, EventFetcher, EventCollectionOperations> getCalendarView() {
        return new OrcCollectionFetcher<Event, EventFetcher, EventCollectionOperations>("CalendarView", this, Event.class, EventCollectionOperations.class);
    }

    /**
     * Gets calendar view.
     *
     * @return the calendar view
     */
    public EventFetcher getCalendarView(String id){
         return new OrcCollectionFetcher<Event, EventFetcher, EventCollectionOperations>("CalendarView", this, Event.class, EventCollectionOperations.class).getById(id);
    }

     /**
     * Gets single value extended properties.
     *
     * @return the single value extended properties
     */
    public OrcCollectionFetcher<SingleValueLegacyExtendedProperty, SingleValueLegacyExtendedPropertyFetcher, SingleValueLegacyExtendedPropertyCollectionOperations> getSingleValueExtendedProperties() {
        return new OrcCollectionFetcher<SingleValueLegacyExtendedProperty, SingleValueLegacyExtendedPropertyFetcher, SingleValueLegacyExtendedPropertyCollectionOperations>("SingleValueExtendedProperties", this, SingleValueLegacyExtendedProperty.class, SingleValueLegacyExtendedPropertyCollectionOperations.class);
    }

    /**
     * Gets single value extended property.
     *
     * @return the single value extended property
     */
    public SingleValueLegacyExtendedPropertyFetcher getSingleValueExtendedProperty(String id){
         return new OrcCollectionFetcher<SingleValueLegacyExtendedProperty, SingleValueLegacyExtendedPropertyFetcher, SingleValueLegacyExtendedPropertyCollectionOperations>("SingleValueExtendedProperties", this, SingleValueLegacyExtendedProperty.class, SingleValueLegacyExtendedPropertyCollectionOperations.class).getById(id);
    }

     /**
     * Gets multi value extended properties.
     *
     * @return the multi value extended properties
     */
    public OrcCollectionFetcher<MultiValueLegacyExtendedProperty, MultiValueLegacyExtendedPropertyFetcher, MultiValueLegacyExtendedPropertyCollectionOperations> getMultiValueExtendedProperties() {
        return new OrcCollectionFetcher<MultiValueLegacyExtendedProperty, MultiValueLegacyExtendedPropertyFetcher, MultiValueLegacyExtendedPropertyCollectionOperations>("MultiValueExtendedProperties", this, MultiValueLegacyExtendedProperty.class, MultiValueLegacyExtendedPropertyCollectionOperations.class);
    }

    /**
     * Gets multi value extended property.
     *
     * @return the multi value extended property
     */
    public MultiValueLegacyExtendedPropertyFetcher getMultiValueExtendedProperty(String id){
         return new OrcCollectionFetcher<MultiValueLegacyExtendedProperty, MultiValueLegacyExtendedPropertyFetcher, MultiValueLegacyExtendedPropertyCollectionOperations>("MultiValueExtendedProperties", this, MultiValueLegacyExtendedProperty.class, MultiValueLegacyExtendedPropertyCollectionOperations.class).getById(id);
    }

}
