/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/
package com.microsoft.services.outlook.fetchers;

import com.microsoft.services.outlook.*;
import com.google.common.util.concurrent.*;
import com.microsoft.services.orc.core.*;
import com.microsoft.services.orc.http.*;
import static com.microsoft.services.orc.core.Helpers.*;
import com.microsoft.services.orc.serialization.JsonSerializer;

/**
 * The type UserOperations.
 */
public class UserOperations extends DirectoryObjectOperations {

     /**
      * Instantiates a new UserOperations.
      *
      * @param urlComponent the url component
      * @param parent the parent
      */
    public UserOperations(String urlComponent, OrcExecutable parent) {
            super(urlComponent, parent);
    }

    /**
     * Add parameter.
     *
     * @param name the name
     * @param value the value
     * @return the operations
     */
    public UserOperations addParameter(String name, Object value) {
        addCustomParameter(name, value);
        return this;
    }

     /**
     * Add header.
     *
     * @param name the name
     * @param value the value
     * @return the operations
     */
    public UserOperations addHeader(String name, String value) {
        addCustomHeader(name, value);
        return this;
    }

    
    
    /**
     * SendMail listenable future.
     * @param message the message @param saveToSentItems the saveToSentItems 
     * @return the listenable future
     */         
    public ListenableFuture<Integer> sendMail(Message message, Boolean saveToSentItems) { 
        JsonSerializer serializer = getResolver().getJsonSerializer();      
        String serializedMessage = serializer.serialize(message);
		String serializedSaveToSentItems = serializer.serialize(saveToSentItems);
		  
        
        ListenableFuture<String> future = sendMailRaw(serializedMessage, serializedSaveToSentItems);
        return transformToEntityListenableFuture(future, Integer.class, getResolver());
        
    }

     /**
     * SendMailRaw listenable future.
     * @param message the message @param saveToSentItems the saveToSentItems 
     * @return the listenable future
     */ 
    public ListenableFuture<String> sendMailRaw(String message, String saveToSentItems){
        
        java.util.Map<String, String> map = new java.util.HashMap<String, String>();
        
        map.put("Message", message);
		map.put("SaveToSentItems", saveToSentItems);
		
        Request request = getResolver().createRequest();
        request.setVerb(HttpVerb.POST);
        
        request.setContent(getResolver().getJsonSerializer()
               .jsonObjectFromJsonMap(map).getBytes(Constants.UTF8));
                        
        request.getUrl().appendPathComponent("Microsoft.OutlookServices.SendMail");
        
        ListenableFuture<OrcResponse> future = oDataExecute(request);
        return transformToStringListenableFuture(future);
    }


    
    
    /**
     * FindMeetingTimes listenable future.
     * @param attendees the attendees @param locationConstraint the locationConstraint @param timeConstraint the timeConstraint @param meetingDuration the meetingDuration @param maxCandidates the maxCandidates @param isOrganizerOptional the isOrganizerOptional 
     * @return the listenable future
     */         
    public ListenableFuture<MeetingTimeCandidate> findMeetingTimes(java.util.List<AttendeeBase> attendees, LocationConstraint locationConstraint, TimeConstraint timeConstraint, org.joda.time.Period meetingDuration, Integer maxCandidates, Boolean isOrganizerOptional) { 
        JsonSerializer serializer = getResolver().getJsonSerializer();      
        String serializedAttendees = serializer.serialize(attendees);
		String serializedLocationConstraint = serializer.serialize(locationConstraint);
		String serializedTimeConstraint = serializer.serialize(timeConstraint);
		String serializedMeetingDuration = serializer.serialize(meetingDuration);
		String serializedMaxCandidates = serializer.serialize(maxCandidates);
		String serializedIsOrganizerOptional = serializer.serialize(isOrganizerOptional);
		  
        
        ListenableFuture<String> future = findMeetingTimesRaw(serializedAttendees, serializedLocationConstraint, serializedTimeConstraint, serializedMeetingDuration, serializedMaxCandidates, serializedIsOrganizerOptional);
        return transformToEntityListenableFuture(future, MeetingTimeCandidate.class, getResolver());
        
    }

     /**
     * FindMeetingTimesRaw listenable future.
     * @param attendees the attendees @param locationConstraint the locationConstraint @param timeConstraint the timeConstraint @param meetingDuration the meetingDuration @param maxCandidates the maxCandidates @param isOrganizerOptional the isOrganizerOptional 
     * @return the listenable future
     */ 
    public ListenableFuture<String> findMeetingTimesRaw(String attendees, String locationConstraint, String timeConstraint, String meetingDuration, String maxCandidates, String isOrganizerOptional){
        
        java.util.Map<String, String> map = new java.util.HashMap<String, String>();
        
        map.put("Attendees", attendees);
		map.put("LocationConstraint", locationConstraint);
		map.put("TimeConstraint", timeConstraint);
		map.put("MeetingDuration", meetingDuration);
		map.put("MaxCandidates", maxCandidates);
		map.put("IsOrganizerOptional", isOrganizerOptional);
		
        Request request = getResolver().createRequest();
        request.setVerb(HttpVerb.POST);
        
        request.setContent(getResolver().getJsonSerializer()
               .jsonObjectFromJsonMap(map).getBytes(Constants.UTF8));
                        
        request.getUrl().appendPathComponent("Microsoft.OutlookServices.FindMeetingTimes");
        
        ListenableFuture<OrcResponse> future = oDataExecute(request);
        return transformToStringListenableFuture(future);
    }


    
    
    /**
     * ReminderView listenable future.
     * @param startDateTime the startDateTime @param endDateTime the endDateTime 
     * @return the listenable future
     */         
    public ListenableFuture<Reminder> reminderView(java.util.Calendar startDateTime, java.util.Calendar endDateTime) { 
        JsonSerializer serializer = getResolver().getJsonSerializer();      
        String serializedstartDateTime = serializer.serialize(startDateTime);
		String serializedendDateTime = serializer.serialize(endDateTime);
		  
        
        ListenableFuture<String> future = reminderViewRaw(serializedstartDateTime, serializedendDateTime);
        return transformToEntityListenableFuture(future, Reminder.class, getResolver());
        
    }

     /**
     * ReminderViewRaw listenable future.
     * @param startDateTime the startDateTime @param endDateTime the endDateTime 
     * @return the listenable future
     */ 
    public ListenableFuture<String> reminderViewRaw(String startDateTime, String endDateTime){
        
        java.util.Map<String, String> map = new java.util.HashMap<String, String>();
        
        map.put("startDateTime", startDateTime);
		map.put("endDateTime", endDateTime);
		
        Request request = getResolver().createRequest();
        request.setVerb(HttpVerb.POST);
        
        request.setContent(getResolver().getJsonSerializer()
               .jsonObjectFromJsonMap(map).getBytes(Constants.UTF8));
                        
        request.getUrl().appendPathComponent("Microsoft.OutlookServices.ReminderView");
        
        ListenableFuture<OrcResponse> future = oDataExecute(request);
        return transformToStringListenableFuture(future);
    }


    
    
    /**
     * TrendingAround listenable future.
     * 
     * @return the listenable future
     */         
    public ListenableFuture<File> trendingAround() { 
              
          
        
        ListenableFuture<String> future = trendingAroundRaw();
        return transformToEntityListenableFuture(future, File.class, getResolver());
        
    }

     /**
     * TrendingAroundRaw listenable future.
     * 
     * @return the listenable future
     */ 
    public ListenableFuture<String> trendingAroundRaw(){
        
        
        Request request = getResolver().createRequest();
        request.setVerb(HttpVerb.POST);
                        
        request.getUrl().appendPathComponent("Microsoft.OutlookServices.TrendingAround");
        
        ListenableFuture<OrcResponse> future = oDataExecute(request);
        return transformToStringListenableFuture(future);
    }


    
    
    /**
     * WorkingWith listenable future.
     * 
     * @return the listenable future
     */         
    public ListenableFuture<WorkingWithEntity> workingWith() { 
              
          
        
        ListenableFuture<String> future = workingWithRaw();
        return transformToEntityListenableFuture(future, WorkingWithEntity.class, getResolver());
        
    }

     /**
     * WorkingWithRaw listenable future.
     * 
     * @return the listenable future
     */ 
    public ListenableFuture<String> workingWithRaw(){
        
        
        Request request = getResolver().createRequest();
        request.setVerb(HttpVerb.POST);
                        
        request.getUrl().appendPathComponent("Microsoft.OutlookServices.WorkingWith");
        
        ListenableFuture<OrcResponse> future = oDataExecute(request);
        return transformToStringListenableFuture(future);
    }


}
