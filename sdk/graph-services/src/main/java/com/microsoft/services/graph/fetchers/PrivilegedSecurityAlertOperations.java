/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/
package com.microsoft.services.graph.fetchers;

import com.microsoft.services.graph.*;
import com.google.common.util.concurrent.*;
import com.microsoft.services.orc.core.*;
import com.microsoft.services.orc.http.*;
import static com.microsoft.services.orc.core.Helpers.*;
import com.microsoft.services.orc.serialization.JsonSerializer;

/**
 * The type PrivilegedSecurityAlertOperations.
 */
public class PrivilegedSecurityAlertOperations extends OrcOperations {

     /**
      * Instantiates a new PrivilegedSecurityAlertOperations.
      *
      * @param urlComponent the url component
      * @param parent the parent
      */
    public PrivilegedSecurityAlertOperations(String urlComponent, OrcExecutable parent) {
            super(urlComponent, parent);
    }

    /**
     * Add parameter.
     *
     * @param name the name
     * @param value the value
     * @return the operations
     */
    public PrivilegedSecurityAlertOperations addParameter(String name, Object value) {
        addCustomParameter(name, value);
        return this;
    }

     /**
     * Add header.
     *
     * @param name the name
     * @param value the value
     * @return the operations
     */
    public PrivilegedSecurityAlertOperations addHeader(String name, String value) {
        addCustomHeader(name, value);
        return this;
    }

    
    
    /**
     * Dismiss listenable future.
     * 
     * @return the listenable future
     */         
    public ListenableFuture<PrivilegedSecurityAlert> dismiss() { 
              
          
        
        ListenableFuture<String> future = dismissRaw();
        return transformToEntityListenableFuture(future, PrivilegedSecurityAlert.class, getResolver());
        
    }

     /**
     * DismissRaw listenable future.
     * 
     * @return the listenable future
     */ 
    public ListenableFuture<String> dismissRaw(){
        
        
        Request request = getResolver().createRequest();
        request.setVerb(HttpVerb.POST);
                        
        request.getUrl().appendPathComponent("Microsoft.Graph.Dismiss");
        
        ListenableFuture<OrcResponse> future = oDataExecute(request);
        return transformToStringListenableFuture(future);
    }


    
    
    /**
     * Reactivate listenable future.
     * 
     * @return the listenable future
     */         
    public ListenableFuture<PrivilegedSecurityAlert> reactivate() { 
              
          
        
        ListenableFuture<String> future = reactivateRaw();
        return transformToEntityListenableFuture(future, PrivilegedSecurityAlert.class, getResolver());
        
    }

     /**
     * ReactivateRaw listenable future.
     * 
     * @return the listenable future
     */ 
    public ListenableFuture<String> reactivateRaw(){
        
        
        Request request = getResolver().createRequest();
        request.setVerb(HttpVerb.POST);
                        
        request.getUrl().appendPathComponent("Microsoft.Graph.Reactivate");
        
        ListenableFuture<OrcResponse> future = oDataExecute(request);
        return transformToStringListenableFuture(future);
    }


    
    
    /**
     * Fix listenable future.
     * @param itemId the itemId 
     * @return the listenable future
     */         
    public ListenableFuture<PrivilegedSecurityAlert> fix(Integer itemId) { 
        JsonSerializer serializer = getResolver().getJsonSerializer();      
        String serializedItemId = serializer.serialize(itemId);
		  
        
        ListenableFuture<String> future = fixRaw(serializedItemId);
        return transformToEntityListenableFuture(future, PrivilegedSecurityAlert.class, getResolver());
        
    }

     /**
     * FixRaw listenable future.
     * @param itemId the itemId 
     * @return the listenable future
     */ 
    public ListenableFuture<String> fixRaw(String itemId){
        
        java.util.Map<String, String> map = new java.util.HashMap<String, String>();
        
        map.put("ItemId", itemId);
		
        Request request = getResolver().createRequest();
        request.setVerb(HttpVerb.POST);
        
        request.setContent(getResolver().getJsonSerializer()
               .jsonObjectFromJsonMap(map).getBytes(Constants.UTF8));
                        
        request.getUrl().appendPathComponent("Microsoft.Graph.Fix");
        
        ListenableFuture<OrcResponse> future = oDataExecute(request);
        return transformToStringListenableFuture(future);
    }


}
