/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/
package com.microsoft.services.graph.fetchers;

import com.microsoft.services.graph.*;
import com.google.common.util.concurrent.*;
import com.microsoft.services.orc.core.*;
import com.microsoft.services.orc.http.*;
import static com.microsoft.services.orc.core.Helpers.*;
import com.microsoft.services.orc.serialization.JsonSerializer;

/**
 * The type PrivilegedRoleAssignmentOperations.
 */
public class PrivilegedRoleAssignmentOperations extends OrcOperations {

     /**
      * Instantiates a new PrivilegedRoleAssignmentOperations.
      *
      * @param urlComponent the url component
      * @param parent the parent
      */
    public PrivilegedRoleAssignmentOperations(String urlComponent, OrcExecutable parent) {
            super(urlComponent, parent);
    }

    /**
     * Add parameter.
     *
     * @param name the name
     * @param value the value
     * @return the operations
     */
    public PrivilegedRoleAssignmentOperations addParameter(String name, Object value) {
        addCustomParameter(name, value);
        return this;
    }

     /**
     * Add header.
     *
     * @param name the name
     * @param value the value
     * @return the operations
     */
    public PrivilegedRoleAssignmentOperations addHeader(String name, String value) {
        addCustomHeader(name, value);
        return this;
    }

    
    
    /**
     * Activate listenable future.
     * @param reason the reason @param duration the duration @param ticketNumber the ticketNumber @param ticketSystem the ticketSystem 
     * @return the listenable future
     */         
    public ListenableFuture<PrivilegedRoleAssignment> activate(String reason, String duration, String ticketNumber, String ticketSystem) { 
        JsonSerializer serializer = getResolver().getJsonSerializer();      
        String serializedReason = serializer.serialize(reason);
		String serializedDuration = serializer.serialize(duration);
		String serializedTicketNumber = serializer.serialize(ticketNumber);
		String serializedTicketSystem = serializer.serialize(ticketSystem);
		  
        
        ListenableFuture<String> future = activateRaw(serializedReason, serializedDuration, serializedTicketNumber, serializedTicketSystem);
        return transformToEntityListenableFuture(future, PrivilegedRoleAssignment.class, getResolver());
        
    }

     /**
     * ActivateRaw listenable future.
     * @param reason the reason @param duration the duration @param ticketNumber the ticketNumber @param ticketSystem the ticketSystem 
     * @return the listenable future
     */ 
    public ListenableFuture<String> activateRaw(String reason, String duration, String ticketNumber, String ticketSystem){
        
        java.util.Map<String, String> map = new java.util.HashMap<String, String>();
        
        map.put("Reason", reason);
		map.put("Duration", duration);
		map.put("TicketNumber", ticketNumber);
		map.put("TicketSystem", ticketSystem);
		
        Request request = getResolver().createRequest();
        request.setVerb(HttpVerb.POST);
        
        request.setContent(getResolver().getJsonSerializer()
               .jsonObjectFromJsonMap(map).getBytes(Constants.UTF8));
                        
        request.getUrl().appendPathComponent("Microsoft.Graph.Activate");
        
        ListenableFuture<OrcResponse> future = oDataExecute(request);
        return transformToStringListenableFuture(future);
    }


    
    
    /**
     * Deactivate listenable future.
     * 
     * @return the listenable future
     */         
    public ListenableFuture<PrivilegedRoleAssignment> deactivate() { 
              
          
        
        ListenableFuture<String> future = deactivateRaw();
        return transformToEntityListenableFuture(future, PrivilegedRoleAssignment.class, getResolver());
        
    }

     /**
     * DeactivateRaw listenable future.
     * 
     * @return the listenable future
     */ 
    public ListenableFuture<String> deactivateRaw(){
        
        
        Request request = getResolver().createRequest();
        request.setVerb(HttpVerb.POST);
                        
        request.getUrl().appendPathComponent("Microsoft.Graph.Deactivate");
        
        ListenableFuture<OrcResponse> future = oDataExecute(request);
        return transformToStringListenableFuture(future);
    }


}
