/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/
package com.microsoft.services.graph.fetchers;

import com.microsoft.services.graph.*;
import com.google.common.util.concurrent.*;
import com.microsoft.services.orc.core.*;
import com.microsoft.services.orc.core.Readable;

/**
 * The type  Item
 */
public class ItemFetcher extends OrcEntityFetcher<Item,ItemOperations> 
                                     implements Readable<Item> {

     /**
     * Instantiates a new ItemFetcher.
     *
     * @param urlComponent the url component
     * @param parent the parent
     */
     public ItemFetcher(String urlComponent, OrcExecutable parent) {
        super(urlComponent, parent, Item.class, ItemOperations.class);
    }

     /**
     * Add parameter.
     *
     * @param name the name
     * @param value the value
     * @return the fetcher
     */
    public ItemFetcher addParameter(String name, Object value) {
        addCustomParameter(name, value);
        return this;
    }
	
	/**
     * Add header.
     *
     * @param name the name
     * @param value the value
     * @return the fetcher
     */
    public ItemFetcher addHeader(String name, String value) {
        addCustomHeader(name, value);
        return this;
    }

    
    	

	/**
     * Gets content.
     *
     * @return the content
     */
    public OrcODataStreamFetcher getContent() {
		return new OrcODataStreamFetcher("content", this, getResolver());
    }

	
         /**
     * Gets createdbyuser.
     *
     * @return the created by user
     */
    public UserFetcher getCreatedByUser() {
        return new UserFetcher("createdByUser", this);
    }
     /**
     * Gets lastmodifiedbyuser.
     *
     * @return the last modified by user
     */
    public UserFetcher getLastModifiedByUser() {
        return new UserFetcher("lastModifiedByUser", this);
    }

     /**
     * Gets permissions.
     *
     * @return the permissions
     */
    public OrcCollectionFetcher<Permission, PermissionFetcher, PermissionCollectionOperations> getPermissions() {
        return new OrcCollectionFetcher<Permission, PermissionFetcher, PermissionCollectionOperations>("permissions", this, Permission.class, PermissionCollectionOperations.class);
    }

    /**
     * Gets permission.
     *
     * @return the permission
     */
    public PermissionFetcher getPermission(String id){
         return new OrcCollectionFetcher<Permission, PermissionFetcher, PermissionCollectionOperations>("permissions", this, Permission.class, PermissionCollectionOperations.class).getById(id);
    }

     /**
     * Gets versions.
     *
     * @return the versions
     */
    public OrcCollectionFetcher<Item, ItemFetcher, ItemCollectionOperations> getVersions() {
        return new OrcCollectionFetcher<Item, ItemFetcher, ItemCollectionOperations>("versions", this, Item.class, ItemCollectionOperations.class);
    }

    /**
     * Gets version.
     *
     * @return the version
     */
    public ItemFetcher getVersion(String id){
         return new OrcCollectionFetcher<Item, ItemFetcher, ItemCollectionOperations>("versions", this, Item.class, ItemCollectionOperations.class).getById(id);
    }

     /**
     * Gets children.
     *
     * @return the children
     */
    public OrcCollectionFetcher<Item, ItemFetcher, ItemCollectionOperations> getChildren() {
        return new OrcCollectionFetcher<Item, ItemFetcher, ItemCollectionOperations>("children", this, Item.class, ItemCollectionOperations.class);
    }

    /**
     * Gets child.
     *
     * @return the child
     */
    public ItemFetcher getChild(String id){
         return new OrcCollectionFetcher<Item, ItemFetcher, ItemCollectionOperations>("children", this, Item.class, ItemCollectionOperations.class).getById(id);
    }

     /**
     * Gets thumbnails.
     *
     * @return the thumbnails
     */
    public OrcCollectionFetcher<ThumbnailSet, ThumbnailSetFetcher, ThumbnailSetCollectionOperations> getThumbnails() {
        return new OrcCollectionFetcher<ThumbnailSet, ThumbnailSetFetcher, ThumbnailSetCollectionOperations>("thumbnails", this, ThumbnailSet.class, ThumbnailSetCollectionOperations.class);
    }

    /**
     * Gets thumbnail.
     *
     * @return the thumbnail
     */
    public ThumbnailSetFetcher getThumbnail(String id){
         return new OrcCollectionFetcher<ThumbnailSet, ThumbnailSetFetcher, ThumbnailSetCollectionOperations>("thumbnails", this, ThumbnailSet.class, ThumbnailSetCollectionOperations.class).getById(id);
    }

}
